const hasBuffer="undefined"!=typeof Buffer;let textDecoder;export class VSBuffer{constructor(buffer){this.buffer=buffer,this.byteLength=this.buffer.byteLength}static wrap(actual){return hasBuffer&&!Buffer.isBuffer(actual)&&(actual=Buffer.from(actual.buffer,actual.byteOffset,actual.byteLength)),new VSBuffer(actual)}toString(){return hasBuffer?this.buffer.toString():(textDecoder||(textDecoder=new TextDecoder),textDecoder.decode(this.buffer))}}export function readUInt16LE(source,offset){return source[offset+0]<<0>>>0|source[offset+1]<<8>>>0}export function writeUInt16LE(destination,value,offset){destination[offset+0]=255&value,value>>>=8,destination[offset+1]=255&value}export function readUInt32BE(source,offset){return source[offset]*Math.pow(2,24)+source[offset+1]*Math.pow(2,16)+source[offset+2]*Math.pow(2,8)+source[offset+3]}export function writeUInt32BE(destination,value,offset){destination[offset+3]=value,value>>>=8,destination[offset+2]=value,value>>>=8,destination[offset+1]=value,value>>>=8,destination[offset]=value}export function readUInt8(source,offset){return source[offset]}export function writeUInt8(destination,value,offset){destination[offset]=value}