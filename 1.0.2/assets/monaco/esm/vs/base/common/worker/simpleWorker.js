import{transformErrorForSerialization}from"../errors.js";import{Emitter}from"../event.js";import{Disposable}from"../lifecycle.js";import{globals,isWeb}from"../platform.js";import*as types from"../types.js";import*as strings from"../strings.js";const INITIALIZE="$initialize";let webWorkerWarningLogged=!1;export function logOnceWebWorkerWarning(err){isWeb&&(webWorkerWarningLogged||(webWorkerWarningLogged=!0,console.warn("Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq")),console.warn(err.message))}class RequestMessage{constructor(vsWorker,req,method,args){this.vsWorker=vsWorker,this.req=req,this.method=method,this.args=args,this.type=0}}class ReplyMessage{constructor(vsWorker,seq,res,err){this.vsWorker=vsWorker,this.seq=seq,this.res=res,this.err=err,this.type=1}}class SubscribeEventMessage{constructor(vsWorker,req,eventName,arg){this.vsWorker=vsWorker,this.req=req,this.eventName=eventName,this.arg=arg,this.type=2}}class EventMessage{constructor(vsWorker,req,event){this.vsWorker=vsWorker,this.req=req,this.event=event,this.type=3}}class UnsubscribeEventMessage{constructor(vsWorker,req){this.vsWorker=vsWorker,this.req=req,this.type=4}}class SimpleWorkerProtocol{constructor(handler){this._workerId=-1,this._handler=handler,this._lastSentReq=0,this._pendingReplies=Object.create(null),this._pendingEmitters=new Map,this._pendingEvents=new Map}setWorkerId(workerId){this._workerId=workerId}sendMessage(method,args){const req=String(++this._lastSentReq);return new Promise(((resolve,reject)=>{this._pendingReplies[req]={resolve,reject},this._send(new RequestMessage(this._workerId,req,method,args))}))}listen(eventName,arg){let req=null;const emitter=new Emitter({onFirstListenerAdd:()=>{req=String(++this._lastSentReq),this._pendingEmitters.set(req,emitter),this._send(new SubscribeEventMessage(this._workerId,req,eventName,arg))},onLastListenerRemove:()=>{this._pendingEmitters.delete(req),this._send(new UnsubscribeEventMessage(this._workerId,req)),req=null}});return emitter.event}handleMessage(message){message&&message.vsWorker&&(-1!==this._workerId&&message.vsWorker!==this._workerId||this._handleMessage(message))}_handleMessage(msg){switch(msg.type){case 1:return this._handleReplyMessage(msg);case 0:return this._handleRequestMessage(msg);case 2:return this._handleSubscribeEventMessage(msg);case 3:return this._handleEventMessage(msg);case 4:return this._handleUnsubscribeEventMessage(msg)}}_handleReplyMessage(replyMessage){if(!this._pendingReplies[replyMessage.seq])return void console.warn("Got reply to unknown seq");const reply=this._pendingReplies[replyMessage.seq];if(delete this._pendingReplies[replyMessage.seq],replyMessage.err){let err=replyMessage.err;return replyMessage.err.$isError&&(err=new Error,err.name=replyMessage.err.name,err.message=replyMessage.err.message,err.stack=replyMessage.err.stack),void reply.reject(err)}reply.resolve(replyMessage.res)}_handleRequestMessage(requestMessage){const req=requestMessage.req;this._handler.handleMessage(requestMessage.method,requestMessage.args).then((r=>{this._send(new ReplyMessage(this._workerId,req,r,void 0))}),(e=>{e.detail instanceof Error&&(e.detail=transformErrorForSerialization(e.detail)),this._send(new ReplyMessage(this._workerId,req,void 0,transformErrorForSerialization(e)))}))}_handleSubscribeEventMessage(msg){const req=msg.req,disposable=this._handler.handleEvent(msg.eventName,msg.arg)((event=>{this._send(new EventMessage(this._workerId,req,event))}));this._pendingEvents.set(req,disposable)}_handleEventMessage(msg){this._pendingEmitters.has(msg.req)?this._pendingEmitters.get(msg.req).fire(msg.event):console.warn("Got event for unknown req")}_handleUnsubscribeEventMessage(msg){this._pendingEvents.has(msg.req)?(this._pendingEvents.get(msg.req).dispose(),this._pendingEvents.delete(msg.req)):console.warn("Got unsubscribe for unknown req")}_send(msg){const transfer=[];if(0===msg.type)for(let i=0;i<msg.args.length;i++)msg.args[i]instanceof ArrayBuffer&&transfer.push(msg.args[i]);else 1===msg.type&&msg.res instanceof ArrayBuffer&&transfer.push(msg.res);this._handler.sendMessage(msg,transfer)}}export class SimpleWorkerClient extends Disposable{constructor(workerFactory,moduleId,host){super();let lazyProxyReject=null;this._worker=this._register(workerFactory.create("vs/base/common/worker/simpleWorker",(msg=>{this._protocol.handleMessage(msg)}),(err=>{null==lazyProxyReject||lazyProxyReject(err)}))),this._protocol=new SimpleWorkerProtocol({sendMessage:(msg,transfer)=>{this._worker.postMessage(msg,transfer)},handleMessage:(method,args)=>{if("function"!=typeof host[method])return Promise.reject(new Error("Missing method "+method+" on main thread host."));try{return Promise.resolve(host[method].apply(host,args))}catch(e){return Promise.reject(e)}},handleEvent:(eventName,arg)=>{if(propertyIsDynamicEvent(eventName)){const event=host[eventName].call(host,arg);if("function"!=typeof event)throw new Error(`Missing dynamic event ${eventName} on main thread host.`);return event}if(propertyIsEvent(eventName)){const event=host[eventName];if("function"!=typeof event)throw new Error(`Missing event ${eventName} on main thread host.`);return event}throw new Error(`Malformed event name ${eventName}`)}}),this._protocol.setWorkerId(this._worker.getId());let loaderConfiguration=null;void 0!==globals.require&&"function"==typeof globals.require.getConfig?loaderConfiguration=globals.require.getConfig():void 0!==globals.requirejs&&(loaderConfiguration=globals.requirejs.s.contexts._.config);const hostMethods=types.getAllMethodNames(host);this._onModuleLoaded=this._protocol.sendMessage(INITIALIZE,[this._worker.getId(),JSON.parse(JSON.stringify(loaderConfiguration)),moduleId,hostMethods]);const proxyMethodRequest=(method,args)=>this._request(method,args),proxyListen=(eventName,arg)=>this._protocol.listen(eventName,arg);this._lazyProxy=new Promise(((resolve,reject)=>{lazyProxyReject=reject,this._onModuleLoaded.then((availableMethods=>{resolve(createProxyObject(availableMethods,proxyMethodRequest,proxyListen))}),(e=>{reject(e),this._onError("Worker failed to load "+moduleId,e)}))}))}getProxyObject(){return this._lazyProxy}_request(method,args){return new Promise(((resolve,reject)=>{this._onModuleLoaded.then((()=>{this._protocol.sendMessage(method,args).then(resolve,reject)}),reject)}))}_onError(message,error){console.error(message),console.info(error)}}function propertyIsEvent(name){return"o"===name[0]&&"n"===name[1]&&strings.isUpperAsciiLetter(name.charCodeAt(2))}function propertyIsDynamicEvent(name){return/^onDynamic/.test(name)&&strings.isUpperAsciiLetter(name.charCodeAt(9))}function createProxyObject(methodNames,invoke,proxyListen){const createProxyMethod=method=>function(){const args=Array.prototype.slice.call(arguments,0);return invoke(method,args)},createProxyDynamicEvent=eventName=>function(arg){return proxyListen(eventName,arg)},result={};for(const methodName of methodNames)propertyIsDynamicEvent(methodName)?result[methodName]=createProxyDynamicEvent(methodName):propertyIsEvent(methodName)?result[methodName]=proxyListen(methodName,void 0):result[methodName]=createProxyMethod(methodName);return result}export class SimpleWorkerServer{constructor(postMessage,requestHandlerFactory){this._requestHandlerFactory=requestHandlerFactory,this._requestHandler=null,this._protocol=new SimpleWorkerProtocol({sendMessage:(msg,transfer)=>{postMessage(msg,transfer)},handleMessage:(method,args)=>this._handleMessage(method,args),handleEvent:(eventName,arg)=>this._handleEvent(eventName,arg)})}onmessage(msg){this._protocol.handleMessage(msg)}_handleMessage(method,args){if(method===INITIALIZE)return this.initialize(args[0],args[1],args[2],args[3]);if(!this._requestHandler||"function"!=typeof this._requestHandler[method])return Promise.reject(new Error("Missing requestHandler or method: "+method));try{return Promise.resolve(this._requestHandler[method].apply(this._requestHandler,args))}catch(e){return Promise.reject(e)}}_handleEvent(eventName,arg){if(!this._requestHandler)throw new Error("Missing requestHandler");if(propertyIsDynamicEvent(eventName)){const event=this._requestHandler[eventName].call(this._requestHandler,arg);if("function"!=typeof event)throw new Error(`Missing dynamic event ${eventName} on request handler.`);return event}if(propertyIsEvent(eventName)){const event=this._requestHandler[eventName];if("function"!=typeof event)throw new Error(`Missing event ${eventName} on request handler.`);return event}throw new Error(`Malformed event name ${eventName}`)}initialize(workerId,loaderConfig,moduleId,hostMethods){this._protocol.setWorkerId(workerId);const hostProxy=createProxyObject(hostMethods,((method,args)=>this._protocol.sendMessage(method,args)),((eventName,arg)=>this._protocol.listen(eventName,arg)));return this._requestHandlerFactory?(this._requestHandler=this._requestHandlerFactory(hostProxy),Promise.resolve(types.getAllMethodNames(this._requestHandler))):(loaderConfig&&(void 0!==loaderConfig.baseUrl&&delete loaderConfig.baseUrl,void 0!==loaderConfig.paths&&void 0!==loaderConfig.paths.vs&&delete loaderConfig.paths.vs,void 0!==typeof loaderConfig.trustedTypesPolicy&&delete loaderConfig.trustedTypesPolicy,loaderConfig.catchError=!0,globals.require.config(loaderConfig)),new Promise(((resolve,reject)=>{(0,globals.require)([moduleId],(module=>{this._requestHandler=module.create(hostProxy),this._requestHandler?resolve(types.getAllMethodNames(this._requestHandler)):reject(new Error("No RequestHandler!"))}),reject)})))}}export function create(postMessage){return new SimpleWorkerServer(postMessage,null)}