import{localize}from"../../../nls.js";import{TernarySearchTree}from"../../../base/common/map.js";import{URI}from"../../../base/common/uri.js";import{createDecorator}from"../../instantiation/common/instantiation.js";export const IWorkspaceContextService=createDecorator("contextService");export function isSingleFolderWorkspaceIdentifier(obj){const singleFolderIdentifier=obj;return"string"==typeof(null==singleFolderIdentifier?void 0:singleFolderIdentifier.id)&&URI.isUri(singleFolderIdentifier.uri)}export function toWorkspaceIdentifier(workspace){return workspace.configuration?{id:workspace.id,configPath:workspace.configuration}:1===workspace.folders.length?{id:workspace.id,uri:workspace.folders[0].uri}:void 0}export class Workspace{constructor(_id,folders,_transient,_configuration,_ignorePathCasing){this._id=_id,this._transient=_transient,this._configuration=_configuration,this._ignorePathCasing=_ignorePathCasing,this._foldersMap=TernarySearchTree.forUris(this._ignorePathCasing,(()=>!0)),this.folders=folders}get folders(){return this._folders}set folders(folders){this._folders=folders,this.updateFoldersMap()}get id(){return this._id}get transient(){return this._transient}get configuration(){return this._configuration}set configuration(configuration){this._configuration=configuration}getFolder(resource){return resource&&this._foldersMap.findSubstr(resource)||null}updateFoldersMap(){this._foldersMap=TernarySearchTree.forUris(this._ignorePathCasing,(()=>!0));for(const folder of this.folders)this._foldersMap.set(folder.uri,folder)}toJSON(){return{id:this.id,folders:this.folders,transient:this.transient,configuration:this.configuration}}}export class WorkspaceFolder{constructor(data,raw){this.raw=raw,this.uri=data.uri,this.index=data.index,this.name=data.name}toJSON(){return{uri:this.uri,name:this.name,index:this.index}}}export const WORKSPACE_EXTENSION="code-workspace";export const WORKSPACE_FILTER=[{name:localize("codeWorkspace","Code Workspace"),extensions:["code-workspace"]}];