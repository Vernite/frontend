import{ListAstNode}from"./ast.js";export function concat23Trees(items){if(0===items.length)return null;if(1===items.length)return items[0];let i=0;function readNode(){if(i>=items.length)return null;const start=i,height=items[start].listHeight;for(i++;i<items.length&&items[i].listHeight===height;)i++;return i-start>=2?concat23TreesOfSameHeight(0===start&&i===items.length?items:items.slice(start,i),!1):items[start]}let first=readNode(),second=readNode();if(!second)return first;for(let item=readNode();item;item=readNode())heightDiff(first,second)<=heightDiff(second,item)?(first=concat(first,second),second=item):second=concat(second,item);return concat(first,second)}export function concat23TreesOfSameHeight(items,createImmutableLists=!1){if(0===items.length)return null;if(1===items.length)return items[0];let length=items.length;for(;length>3;){const newLength=length>>1;for(let i=0;i<newLength;i++){const j=i<<1;items[i]=ListAstNode.create23(items[j],items[j+1],j+3===length?items[j+2]:null,createImmutableLists)}length=newLength}return ListAstNode.create23(items[0],items[1],length>=3?items[2]:null,createImmutableLists)}function heightDiff(node1,node2){return Math.abs(node1.listHeight-node2.listHeight)}function concat(node1,node2){return node1.listHeight===node2.listHeight?ListAstNode.create23(node1,node2,null,!1):node1.listHeight>node2.listHeight?append(node1,node2):prepend(node2,node1)}function append(list,nodeToAppend){let curNode=list=list.toMutable();const parents=new Array;let nodeToAppendOfCorrectHeight;for(;;){if(nodeToAppend.listHeight===curNode.listHeight){nodeToAppendOfCorrectHeight=nodeToAppend;break}if(4!==curNode.kind)throw new Error("unexpected");parents.push(curNode),curNode=curNode.makeLastElementMutable()}for(let i=parents.length-1;i>=0;i--){const parent=parents[i];nodeToAppendOfCorrectHeight?parent.childrenLength>=3?nodeToAppendOfCorrectHeight=ListAstNode.create23(parent.unappendChild(),nodeToAppendOfCorrectHeight,null,!1):(parent.appendChildOfSameHeight(nodeToAppendOfCorrectHeight),nodeToAppendOfCorrectHeight=void 0):parent.handleChildrenChanged()}return nodeToAppendOfCorrectHeight?ListAstNode.create23(list,nodeToAppendOfCorrectHeight,null,!1):list}function prepend(list,nodeToAppend){let curNode=list=list.toMutable();const parents=new Array;for(;nodeToAppend.listHeight!==curNode.listHeight;){if(4!==curNode.kind)throw new Error("unexpected");parents.push(curNode),curNode=curNode.makeFirstElementMutable()}let nodeToPrependOfCorrectHeight=nodeToAppend;for(let i=parents.length-1;i>=0;i--){const parent=parents[i];nodeToPrependOfCorrectHeight?parent.childrenLength>=3?nodeToPrependOfCorrectHeight=ListAstNode.create23(nodeToPrependOfCorrectHeight,parent.unprependChild(),null,!1):(parent.prependChildOfSameHeight(nodeToPrependOfCorrectHeight),nodeToPrependOfCorrectHeight=void 0):parent.handleChildrenChanged()}return nodeToPrependOfCorrectHeight?ListAstNode.create23(nodeToPrependOfCorrectHeight,list,null,!1):list}