import{CursorState,SingleCursorState}from"../cursorCommon.js";import{Position}from"../core/position.js";import{Range}from"../core/range.js";import{Selection}from"../core/selection.js";export class Cursor{constructor(context){this._selTrackedRange=null,this._trackSelection=!0,this._setState(context,new SingleCursorState(new Range(1,1,1,1),0,new Position(1,1),0),new SingleCursorState(new Range(1,1,1,1),0,new Position(1,1),0))}dispose(context){this._removeTrackedRange(context)}startTrackingSelection(context){this._trackSelection=!0,this._updateTrackedRange(context)}stopTrackingSelection(context){this._trackSelection=!1,this._removeTrackedRange(context)}_updateTrackedRange(context){this._trackSelection&&(this._selTrackedRange=context.model._setTrackedRange(this._selTrackedRange,this.modelState.selection,0))}_removeTrackedRange(context){this._selTrackedRange=context.model._setTrackedRange(this._selTrackedRange,null,0)}asCursorState(){return new CursorState(this.modelState,this.viewState)}readSelectionFromMarkers(context){const range=context.model._getTrackedRange(this._selTrackedRange);return Selection.fromRange(range,this.modelState.selection.getDirection())}ensureValidState(context){this._setState(context,this.modelState,this.viewState)}setState(context,modelState,viewState){this._setState(context,modelState,viewState)}static _validatePositionWithCache(viewModel,position,cacheInput,cacheOutput){return position.equals(cacheInput)?cacheOutput:viewModel.normalizePosition(position,2)}static _validateViewState(viewModel,viewState){const position=viewState.position,sStartPosition=viewState.selectionStart.getStartPosition(),sEndPosition=viewState.selectionStart.getEndPosition(),validPosition=viewModel.normalizePosition(position,2),validSStartPosition=this._validatePositionWithCache(viewModel,sStartPosition,position,validPosition),validSEndPosition=this._validatePositionWithCache(viewModel,sEndPosition,sStartPosition,validSStartPosition);return position.equals(validPosition)&&sStartPosition.equals(validSStartPosition)&&sEndPosition.equals(validSEndPosition)?viewState:new SingleCursorState(Range.fromPositions(validSStartPosition,validSEndPosition),viewState.selectionStartLeftoverVisibleColumns+sStartPosition.column-validSStartPosition.column,validPosition,viewState.leftoverVisibleColumns+position.column-validPosition.column)}_setState(context,modelState,viewState){if(viewState&&(viewState=Cursor._validateViewState(context.viewModel,viewState)),modelState){const selectionStart=context.model.validateRange(modelState.selectionStart),selectionStartLeftoverVisibleColumns=modelState.selectionStart.equalsRange(selectionStart)?modelState.selectionStartLeftoverVisibleColumns:0,position=context.model.validatePosition(modelState.position),leftoverVisibleColumns=modelState.position.equals(position)?modelState.leftoverVisibleColumns:0;modelState=new SingleCursorState(selectionStart,selectionStartLeftoverVisibleColumns,position,leftoverVisibleColumns)}else{if(!viewState)return;const selectionStart=context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart)),position=context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));modelState=new SingleCursorState(selectionStart,viewState.selectionStartLeftoverVisibleColumns,position,viewState.leftoverVisibleColumns)}if(viewState){const viewSelectionStart=context.coordinatesConverter.validateViewRange(viewState.selectionStart,modelState.selectionStart),viewPosition=context.coordinatesConverter.validateViewPosition(viewState.position,modelState.position);viewState=new SingleCursorState(viewSelectionStart,modelState.selectionStartLeftoverVisibleColumns,viewPosition,modelState.leftoverVisibleColumns)}else{const viewSelectionStart1=context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber,modelState.selectionStart.startColumn)),viewSelectionStart2=context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber,modelState.selectionStart.endColumn)),viewSelectionStart=new Range(viewSelectionStart1.lineNumber,viewSelectionStart1.column,viewSelectionStart2.lineNumber,viewSelectionStart2.column),viewPosition=context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);viewState=new SingleCursorState(viewSelectionStart,modelState.selectionStartLeftoverVisibleColumns,viewPosition,modelState.leftoverVisibleColumns)}this.modelState=modelState,this.viewState=viewState,this._updateTrackedRange(context)}}