import*as strings from"../../../../base/common/strings.js";import*as stringBuilder from"../../core/stringBuilder.js";import{Range}from"../../core/range.js";export class RichEditBracket{constructor(languageId,index,open,close,forwardRegex,reversedRegex){this._richEditBracketBrand=void 0,this.languageId=languageId,this.index=index,this.open=open,this.close=close,this.forwardRegex=forwardRegex,this.reversedRegex=reversedRegex,this._openSet=RichEditBracket._toSet(this.open),this._closeSet=RichEditBracket._toSet(this.close)}isOpen(text){return this._openSet.has(text)}isClose(text){return this._closeSet.has(text)}static _toSet(arr){const result=new Set;for(const element of arr)result.add(element);return result}}function groupFuzzyBrackets(brackets){const N=brackets.length;brackets=brackets.map((b=>[b[0].toLowerCase(),b[1].toLowerCase()]));const group=[];for(let i=0;i<N;i++)group[i]=i;const areOverlapping=(a,b)=>{const[aOpen,aClose]=a,[bOpen,bClose]=b;return aOpen===bOpen||aOpen===bClose||aClose===bOpen||aClose===bClose},mergeGroups=(g1,g2)=>{const newG=Math.min(g1,g2),oldG=Math.max(g1,g2);for(let i=0;i<N;i++)group[i]===oldG&&(group[i]=newG)};for(let i=0;i<N;i++){const a=brackets[i];for(let j=i+1;j<N;j++){areOverlapping(a,brackets[j])&&mergeGroups(group[i],group[j])}}const result=[];for(let g=0;g<N;g++){const currentOpen=[],currentClose=[];for(let i=0;i<N;i++)if(group[i]===g){const[open,close]=brackets[i];currentOpen.push(open),currentClose.push(close)}currentOpen.length>0&&result.push({open:currentOpen,close:currentClose})}return result}export class RichEditBrackets{constructor(languageId,_brackets){this._richEditBracketsBrand=void 0;const brackets=groupFuzzyBrackets(_brackets);this.brackets=brackets.map(((b,index)=>new RichEditBracket(languageId,index,b.open,b.close,getRegexForBracketPair(b.open,b.close,brackets,index),getReversedRegexForBracketPair(b.open,b.close,brackets,index)))),this.forwardRegex=getRegexForBrackets(this.brackets),this.reversedRegex=getReversedRegexForBrackets(this.brackets),this.textIsBracket={},this.textIsOpenBracket={},this.maxBracketLength=0;for(const bracket of this.brackets){for(const open of bracket.open)this.textIsBracket[open]=bracket,this.textIsOpenBracket[open]=!0,this.maxBracketLength=Math.max(this.maxBracketLength,open.length);for(const close of bracket.close)this.textIsBracket[close]=bracket,this.textIsOpenBracket[close]=!1,this.maxBracketLength=Math.max(this.maxBracketLength,close.length)}}}function collectSuperstrings(str,brackets,currentIndex,dest){for(let i=0,len=brackets.length;i<len;i++){if(i===currentIndex)continue;const bracket=brackets[i];for(const open of bracket.open)open.indexOf(str)>=0&&dest.push(open);for(const close of bracket.close)close.indexOf(str)>=0&&dest.push(close)}}function lengthcmp(a,b){return a.length-b.length}function unique(arr){if(arr.length<=1)return arr;const result=[],seen=new Set;for(const element of arr)seen.has(element)||(result.push(element),seen.add(element));return result}function getRegexForBracketPair(open,close,brackets,currentIndex){let pieces=[];pieces=pieces.concat(open),pieces=pieces.concat(close);for(let i=0,len=pieces.length;i<len;i++)collectSuperstrings(pieces[i],brackets,currentIndex,pieces);return pieces=unique(pieces),pieces.sort(lengthcmp),pieces.reverse(),createBracketOrRegExp(pieces)}function getReversedRegexForBracketPair(open,close,brackets,currentIndex){let pieces=[];pieces=pieces.concat(open),pieces=pieces.concat(close);for(let i=0,len=pieces.length;i<len;i++)collectSuperstrings(pieces[i],brackets,currentIndex,pieces);return pieces=unique(pieces),pieces.sort(lengthcmp),pieces.reverse(),createBracketOrRegExp(pieces.map(toReversedString))}function getRegexForBrackets(brackets){let pieces=[];for(const bracket of brackets){for(const open of bracket.open)pieces.push(open);for(const close of bracket.close)pieces.push(close)}return pieces=unique(pieces),createBracketOrRegExp(pieces)}function getReversedRegexForBrackets(brackets){let pieces=[];for(const bracket of brackets){for(const open of bracket.open)pieces.push(open);for(const close of bracket.close)pieces.push(close)}return pieces=unique(pieces),createBracketOrRegExp(pieces.map(toReversedString))}function prepareBracketForRegExp(str){const insertWordBoundaries=/^[\w ]+$/.test(str);return str=strings.escapeRegExpCharacters(str),insertWordBoundaries?`\\b${str}\\b`:str}function createBracketOrRegExp(pieces){const regexStr=`(${pieces.map(prepareBracketForRegExp).join(")|(")})`;return strings.createRegExp(regexStr,!0)}const toReversedString=function(){let lastInput=null,lastOutput=null;return function toReversedString(str){return lastInput!==str&&(lastInput=str,lastOutput=function reverse(str){if(stringBuilder.hasTextDecoder){const arr=new Uint16Array(str.length);let offset=0;for(let i=str.length-1;i>=0;i--)arr[offset++]=str.charCodeAt(i);return stringBuilder.getPlatformTextDecoder().decode(arr)}{const result=[];let resultLen=0;for(let i=str.length-1;i>=0;i--)result[resultLen++]=str.charAt(i);return result.join("")}}(lastInput)),lastOutput}}();export class BracketsUtils{static _findPrevBracketInText(reversedBracketRegex,lineNumber,reversedText,offset){const m=reversedText.match(reversedBracketRegex);if(!m)return null;const matchOffset=reversedText.length-(m.index||0),matchLength=m[0].length,absoluteMatchOffset=offset+matchOffset;return new Range(lineNumber,absoluteMatchOffset-matchLength+1,lineNumber,absoluteMatchOffset+1)}static findPrevBracketInRange(reversedBracketRegex,lineNumber,lineText,startOffset,endOffset){const reversedSubstr=toReversedString(lineText).substring(lineText.length-endOffset,lineText.length-startOffset);return this._findPrevBracketInText(reversedBracketRegex,lineNumber,reversedSubstr,startOffset)}static findNextBracketInText(bracketRegex,lineNumber,text,offset){const m=text.match(bracketRegex);if(!m)return null;const matchOffset=m.index||0,matchLength=m[0].length;if(0===matchLength)return null;const absoluteMatchOffset=offset+matchOffset;return new Range(lineNumber,absoluteMatchOffset+1,lineNumber,absoluteMatchOffset+1+matchLength)}static findNextBracketInRange(bracketRegex,lineNumber,lineText,startOffset,endOffset){const substr=lineText.substring(startOffset,endOffset);return this.findNextBracketInText(bracketRegex,lineNumber,substr,startOffset)}}