var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{CancellationToken}from"../../../../base/common/cancellation.js";import{onUnexpectedExternalError}from"../../../../base/common/errors.js";import{assertType}from"../../../../base/common/types.js";import{URI}from"../../../../base/common/uri.js";import{Position}from"../../../common/core/position.js";import*as languages from"../../../common/languages.js";import{ILanguageFeaturesService}from"../../../common/services/languageFeatures.js";import{ITextModelService}from"../../../common/services/resolverService.js";import{CommandsRegistry}from"../../../../platform/commands/common/commands.js";import{RawContextKey}from"../../../../platform/contextkey/common/contextkey.js";export const Context={Visible:new RawContextKey("parameterHintsVisible",!1),MultipleSignatures:new RawContextKey("parameterHintsMultipleSignatures",!1)};export function provideSignatureHelp(registry,model,position,context,token){return __awaiter(this,void 0,void 0,(function*(){const supports=registry.ordered(model);for(const support of supports)try{const result=yield support.provideSignatureHelp(model,position,token,context);if(result)return result}catch(err){onUnexpectedExternalError(err)}}))}CommandsRegistry.registerCommand("_executeSignatureHelpProvider",((accessor,...args)=>__awaiter(void 0,void 0,void 0,(function*(){const[uri,position,triggerCharacter]=args;assertType(URI.isUri(uri)),assertType(Position.isIPosition(position)),assertType("string"==typeof triggerCharacter||!triggerCharacter);const languageFeaturesService=accessor.get(ILanguageFeaturesService),ref=yield accessor.get(ITextModelService).createModelReference(uri);try{const result=yield provideSignatureHelp(languageFeaturesService.signatureHelpProvider,ref.object.textEditorModel,Position.lift(position),{triggerKind:languages.SignatureHelpTriggerKind.Invoke,isRetrigger:!1,triggerCharacter},CancellationToken.None);if(!result)return;return setTimeout((()=>result.dispose()),0),result.value}finally{ref.dispose()}}))));