import{Disposable}from"../../../../base/common/lifecycle.js";import{EditorAction,registerEditorAction,registerEditorContribution}from"../../../browser/editorExtensions.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import*as nls from"../../../../nls.js";class CursorState{constructor(selections){this.selections=selections}equals(other){const thisLen=this.selections.length;if(thisLen!==other.selections.length)return!1;for(let i=0;i<thisLen;i++)if(!this.selections[i].equalsSelection(other.selections[i]))return!1;return!0}}class StackElement{constructor(cursorState,scrollTop,scrollLeft){this.cursorState=cursorState,this.scrollTop=scrollTop,this.scrollLeft=scrollLeft}}export class CursorUndoRedoController extends Disposable{constructor(editor){super(),this._editor=editor,this._isCursorUndoRedo=!1,this._undoStack=[],this._redoStack=[],this._register(editor.onDidChangeModel((e=>{this._undoStack=[],this._redoStack=[]}))),this._register(editor.onDidChangeModelContent((e=>{this._undoStack=[],this._redoStack=[]}))),this._register(editor.onDidChangeCursorSelection((e=>{if(this._isCursorUndoRedo)return;if(!e.oldSelections)return;if(e.oldModelVersionId!==e.modelVersionId)return;const prevState=new CursorState(e.oldSelections);this._undoStack.length>0&&this._undoStack[this._undoStack.length-1].cursorState.equals(prevState)||(this._undoStack.push(new StackElement(prevState,editor.getScrollTop(),editor.getScrollLeft())),this._redoStack=[],this._undoStack.length>50&&this._undoStack.shift())})))}static get(editor){return editor.getContribution(CursorUndoRedoController.ID)}cursorUndo(){this._editor.hasModel()&&0!==this._undoStack.length&&(this._redoStack.push(new StackElement(new CursorState(this._editor.getSelections()),this._editor.getScrollTop(),this._editor.getScrollLeft())),this._applyState(this._undoStack.pop()))}cursorRedo(){this._editor.hasModel()&&0!==this._redoStack.length&&(this._undoStack.push(new StackElement(new CursorState(this._editor.getSelections()),this._editor.getScrollTop(),this._editor.getScrollLeft())),this._applyState(this._redoStack.pop()))}_applyState(stackElement){this._isCursorUndoRedo=!0,this._editor.setSelections(stackElement.cursorState.selections),this._editor.setScrollPosition({scrollTop:stackElement.scrollTop,scrollLeft:stackElement.scrollLeft}),this._isCursorUndoRedo=!1}}CursorUndoRedoController.ID="editor.contrib.cursorUndoRedoController";export class CursorUndo extends EditorAction{constructor(){super({id:"cursorUndo",label:nls.localize("cursor.undo","Cursor Undo"),alias:"Cursor Undo",precondition:void 0,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:2099,weight:100}})}run(accessor,editor,args){var _a;null===(_a=CursorUndoRedoController.get(editor))||void 0===_a||_a.cursorUndo()}}export class CursorRedo extends EditorAction{constructor(){super({id:"cursorRedo",label:nls.localize("cursor.redo","Cursor Redo"),alias:"Cursor Redo",precondition:void 0})}run(accessor,editor,args){var _a;null===(_a=CursorUndoRedoController.get(editor))||void 0===_a||_a.cursorRedo()}}registerEditorContribution(CursorUndoRedoController.ID,CursorUndoRedoController),registerEditorAction(CursorUndo),registerEditorAction(CursorRedo);