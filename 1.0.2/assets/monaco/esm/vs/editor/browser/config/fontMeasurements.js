import*as browser from"../../../base/browser/browser.js";import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{CharWidthRequest,readCharWidths}from"./charWidthReader.js";import{EditorFontLigatures}from"../../common/config/editorOptions.js";import{FontInfo}from"../../common/config/fontInfo.js";class FontMeasurementsImpl extends Disposable{constructor(){super(),this._onDidChange=this._register(new Emitter),this.onDidChange=this._onDidChange.event,this._cache=new FontMeasurementsCache,this._evictUntrustedReadingsTimeout=-1}dispose(){-1!==this._evictUntrustedReadingsTimeout&&(window.clearTimeout(this._evictUntrustedReadingsTimeout),this._evictUntrustedReadingsTimeout=-1),super.dispose()}clearAllFontInfos(){this._cache=new FontMeasurementsCache,this._onDidChange.fire()}_writeToCache(item,value){this._cache.put(item,value),value.isTrusted||-1!==this._evictUntrustedReadingsTimeout||(this._evictUntrustedReadingsTimeout=window.setTimeout((()=>{this._evictUntrustedReadingsTimeout=-1,this._evictUntrustedReadings()}),5e3))}_evictUntrustedReadings(){const values=this._cache.getValues();let somethingRemoved=!1;for(const item of values)item.isTrusted||(somethingRemoved=!0,this._cache.remove(item));somethingRemoved&&this._onDidChange.fire()}readFontInfo(bareFontInfo){if(!this._cache.has(bareFontInfo)){let readConfig=this._actualReadFontInfo(bareFontInfo);(readConfig.typicalHalfwidthCharacterWidth<=2||readConfig.typicalFullwidthCharacterWidth<=2||readConfig.spaceWidth<=2||readConfig.maxDigitWidth<=2)&&(readConfig=new FontInfo({pixelRatio:browser.PixelRatio.value,fontFamily:readConfig.fontFamily,fontWeight:readConfig.fontWeight,fontSize:readConfig.fontSize,fontFeatureSettings:readConfig.fontFeatureSettings,lineHeight:readConfig.lineHeight,letterSpacing:readConfig.letterSpacing,isMonospace:readConfig.isMonospace,typicalHalfwidthCharacterWidth:Math.max(readConfig.typicalHalfwidthCharacterWidth,5),typicalFullwidthCharacterWidth:Math.max(readConfig.typicalFullwidthCharacterWidth,5),canUseHalfwidthRightwardsArrow:readConfig.canUseHalfwidthRightwardsArrow,spaceWidth:Math.max(readConfig.spaceWidth,5),middotWidth:Math.max(readConfig.middotWidth,5),wsmiddotWidth:Math.max(readConfig.wsmiddotWidth,5),maxDigitWidth:Math.max(readConfig.maxDigitWidth,5)},!1)),this._writeToCache(bareFontInfo,readConfig)}return this._cache.get(bareFontInfo)}_createRequest(chr,type,all,monospace){const result=new CharWidthRequest(chr,type);return all.push(result),null==monospace||monospace.push(result),result}_actualReadFontInfo(bareFontInfo){const all=[],monospace=[],typicalHalfwidthCharacter=this._createRequest("n",0,all,monospace),typicalFullwidthCharacter=this._createRequest("ｍ",0,all,null),space=this._createRequest(" ",0,all,monospace),digit0=this._createRequest("0",0,all,monospace),digit1=this._createRequest("1",0,all,monospace),digit2=this._createRequest("2",0,all,monospace),digit3=this._createRequest("3",0,all,monospace),digit4=this._createRequest("4",0,all,monospace),digit5=this._createRequest("5",0,all,monospace),digit6=this._createRequest("6",0,all,monospace),digit7=this._createRequest("7",0,all,monospace),digit8=this._createRequest("8",0,all,monospace),digit9=this._createRequest("9",0,all,monospace),rightwardsArrow=this._createRequest("→",0,all,monospace),halfwidthRightwardsArrow=this._createRequest("￫",0,all,null),middot=this._createRequest("·",0,all,monospace),wsmiddotWidth=this._createRequest(String.fromCharCode(11825),0,all,null);for(let i=0,len="|/-_ilm%".length;i<len;i++)this._createRequest("|/-_ilm%".charAt(i),0,all,monospace),this._createRequest("|/-_ilm%".charAt(i),1,all,monospace),this._createRequest("|/-_ilm%".charAt(i),2,all,monospace);readCharWidths(bareFontInfo,all);const maxDigitWidth=Math.max(digit0.width,digit1.width,digit2.width,digit3.width,digit4.width,digit5.width,digit6.width,digit7.width,digit8.width,digit9.width);let isMonospace=bareFontInfo.fontFeatureSettings===EditorFontLigatures.OFF;const referenceWidth=monospace[0].width;for(let i=1,len=monospace.length;isMonospace&&i<len;i++){const diff=referenceWidth-monospace[i].width;if(diff<-.001||diff>.001){isMonospace=!1;break}}let canUseHalfwidthRightwardsArrow=!0;return isMonospace&&halfwidthRightwardsArrow.width!==referenceWidth&&(canUseHalfwidthRightwardsArrow=!1),halfwidthRightwardsArrow.width>rightwardsArrow.width&&(canUseHalfwidthRightwardsArrow=!1),new FontInfo({pixelRatio:browser.PixelRatio.value,fontFamily:bareFontInfo.fontFamily,fontWeight:bareFontInfo.fontWeight,fontSize:bareFontInfo.fontSize,fontFeatureSettings:bareFontInfo.fontFeatureSettings,lineHeight:bareFontInfo.lineHeight,letterSpacing:bareFontInfo.letterSpacing,isMonospace,typicalHalfwidthCharacterWidth:typicalHalfwidthCharacter.width,typicalFullwidthCharacterWidth:typicalFullwidthCharacter.width,canUseHalfwidthRightwardsArrow,spaceWidth:space.width,middotWidth:middot.width,wsmiddotWidth:wsmiddotWidth.width,maxDigitWidth},!0)}}class FontMeasurementsCache{constructor(){this._keys=Object.create(null),this._values=Object.create(null)}has(item){const itemId=item.getId();return!!this._values[itemId]}get(item){const itemId=item.getId();return this._values[itemId]}put(item,value){const itemId=item.getId();this._keys[itemId]=item,this._values[itemId]=value}remove(item){const itemId=item.getId();delete this._keys[itemId],delete this._values[itemId]}getValues(){return Object.keys(this._keys).map((id=>this._values[id]))}}export const FontMeasurements=new FontMeasurementsImpl;