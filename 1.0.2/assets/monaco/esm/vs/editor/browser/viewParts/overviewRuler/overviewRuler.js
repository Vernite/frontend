import{createFastDomNode}from"../../../../base/browser/fastDomNode.js";import{OverviewZoneManager}from"../../../common/viewModel/overviewZoneManager.js";import{ViewEventHandler}from"../../../common/viewEventHandler.js";export class OverviewRuler extends ViewEventHandler{constructor(context,cssClassName){super(),this._context=context;const options=this._context.configuration.options;this._domNode=createFastDomNode(document.createElement("canvas")),this._domNode.setClassName(cssClassName),this._domNode.setPosition("absolute"),this._domNode.setLayerHinting(!0),this._domNode.setContain("strict"),this._zoneManager=new OverviewZoneManager((lineNumber=>this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber))),this._zoneManager.setDOMWidth(0),this._zoneManager.setDOMHeight(0),this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight()),this._zoneManager.setLineHeight(options.get(61)),this._zoneManager.setPixelRatio(options.get(131)),this._context.addEventHandler(this)}dispose(){this._context.removeEventHandler(this),super.dispose()}onConfigurationChanged(e){const options=this._context.configuration.options;return e.hasChanged(61)&&(this._zoneManager.setLineHeight(options.get(61)),this._render()),e.hasChanged(131)&&(this._zoneManager.setPixelRatio(options.get(131)),this._domNode.setWidth(this._zoneManager.getDOMWidth()),this._domNode.setHeight(this._zoneManager.getDOMHeight()),this._domNode.domNode.width=this._zoneManager.getCanvasWidth(),this._domNode.domNode.height=this._zoneManager.getCanvasHeight(),this._render()),!0}onFlushed(e){return this._render(),!0}onScrollChanged(e){return e.scrollHeightChanged&&(this._zoneManager.setOuterHeight(e.scrollHeight),this._render()),!0}onZonesChanged(e){return this._render(),!0}getDomNode(){return this._domNode.domNode}setLayout(position){this._domNode.setTop(position.top),this._domNode.setRight(position.right);let hasChanged=!1;hasChanged=this._zoneManager.setDOMWidth(position.width)||hasChanged,hasChanged=this._zoneManager.setDOMHeight(position.height)||hasChanged,hasChanged&&(this._domNode.setWidth(this._zoneManager.getDOMWidth()),this._domNode.setHeight(this._zoneManager.getDOMHeight()),this._domNode.domNode.width=this._zoneManager.getCanvasWidth(),this._domNode.domNode.height=this._zoneManager.getCanvasHeight(),this._render())}setZones(zones){this._zoneManager.setZones(zones),this._render()}_render(){if(0===this._zoneManager.getOuterHeight())return!1;const width=this._zoneManager.getCanvasWidth(),height=this._zoneManager.getCanvasHeight(),colorZones=this._zoneManager.resolveColorZones(),id2Color=this._zoneManager.getId2Color(),ctx=this._domNode.domNode.getContext("2d");return ctx.clearRect(0,0,width,height),colorZones.length>0&&this._renderOneLane(ctx,colorZones,id2Color,width),!0}_renderOneLane(ctx,colorZones,id2Color,width){let currentColorId=0,currentFrom=0,currentTo=0;for(const zone of colorZones){const zoneColorId=zone.colorId,zoneFrom=zone.from,zoneTo=zone.to;zoneColorId!==currentColorId?(ctx.fillRect(0,currentFrom,width,currentTo-currentFrom),currentColorId=zoneColorId,ctx.fillStyle=id2Color[currentColorId],currentFrom=zoneFrom,currentTo=zoneTo):currentTo>=zoneFrom?currentTo=Math.max(currentTo,zoneTo):(ctx.fillRect(0,currentFrom,width,currentTo-currentFrom),currentFrom=zoneFrom,currentTo=zoneTo)}ctx.fillRect(0,currentFrom,width,currentTo-currentFrom)}}