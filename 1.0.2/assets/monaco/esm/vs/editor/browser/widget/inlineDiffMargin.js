var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import*as nls from"../../../nls.js";import*as dom from"../../../base/browser/dom.js";import{Action}from"../../../base/common/actions.js";import{Disposable}from"../../../base/common/lifecycle.js";import{Range}from"../../common/core/range.js";import{Codicon}from"../../../base/common/codicons.js";export class InlineDiffMargin extends Disposable{constructor(_viewZoneId,_marginDomNode,editor,diff,_contextMenuService,_clipboardService){super(),this._viewZoneId=_viewZoneId,this._marginDomNode=_marginDomNode,this.editor=editor,this.diff=diff,this._contextMenuService=_contextMenuService,this._clipboardService=_clipboardService,this._visibility=!1,this._marginDomNode.style.zIndex="10",this._diffActions=document.createElement("div"),this._diffActions.className=Codicon.lightBulb.classNames+" lightbulb-glyph",this._diffActions.style.position="absolute";const lineHeight=editor.getOption(61),lineFeed=editor.getModel().getEOL();this._diffActions.style.right="0px",this._diffActions.style.visibility="hidden",this._diffActions.style.height=`${lineHeight}px`,this._diffActions.style.lineHeight=`${lineHeight}px`,this._marginDomNode.appendChild(this._diffActions);const actions=[],isDeletion=0===diff.modifiedEndLineNumber;actions.push(new Action("diff.clipboard.copyDeletedContent",isDeletion?diff.originalEndLineNumber>diff.modifiedStartLineNumber?nls.localize("diff.clipboard.copyDeletedLinesContent.label","Copy deleted lines"):nls.localize("diff.clipboard.copyDeletedLinesContent.single.label","Copy deleted line"):diff.originalEndLineNumber>diff.modifiedStartLineNumber?nls.localize("diff.clipboard.copyChangedLinesContent.label","Copy changed lines"):nls.localize("diff.clipboard.copyChangedLinesContent.single.label","Copy changed line"),void 0,!0,(()=>__awaiter(this,void 0,void 0,(function*(){const range=new Range(diff.originalStartLineNumber,1,diff.originalEndLineNumber+1,1),deletedText=diff.originalModel.getValueInRange(range);yield this._clipboardService.writeText(deletedText)})))));let copyLineAction,currentLineNumberOffset=0;diff.originalEndLineNumber>diff.modifiedStartLineNumber&&(copyLineAction=new Action("diff.clipboard.copyDeletedLineContent",isDeletion?nls.localize("diff.clipboard.copyDeletedLineContent.label","Copy deleted line ({0})",diff.originalStartLineNumber):nls.localize("diff.clipboard.copyChangedLineContent.label","Copy changed line ({0})",diff.originalStartLineNumber),void 0,!0,(()=>__awaiter(this,void 0,void 0,(function*(){const lineContent=diff.originalModel.getLineContent(diff.originalStartLineNumber+currentLineNumberOffset);if(""===lineContent){const eof=diff.originalModel.getEndOfLineSequence();yield this._clipboardService.writeText(0===eof?"\n":"\r\n")}else yield this._clipboardService.writeText(lineContent)})))),actions.push(copyLineAction));editor.getOption(83)||actions.push(new Action("diff.inline.revertChange",nls.localize("diff.inline.revertChange.label","Revert this change"),void 0,!0,(()=>__awaiter(this,void 0,void 0,(function*(){const range=new Range(diff.originalStartLineNumber,1,diff.originalEndLineNumber,diff.originalModel.getLineMaxColumn(diff.originalEndLineNumber)),deletedText=diff.originalModel.getValueInRange(range);if(0===diff.modifiedEndLineNumber){const column=editor.getModel().getLineMaxColumn(diff.modifiedStartLineNumber);editor.executeEdits("diffEditor",[{range:new Range(diff.modifiedStartLineNumber,column,diff.modifiedStartLineNumber,column),text:lineFeed+deletedText}])}else{const column=editor.getModel().getLineMaxColumn(diff.modifiedEndLineNumber);editor.executeEdits("diffEditor",[{range:new Range(diff.modifiedStartLineNumber,1,diff.modifiedEndLineNumber,column),text:deletedText}])}})))));const showContextMenu=(x,y)=>{this._contextMenuService.showContextMenu({getAnchor:()=>({x,y}),getActions:()=>(copyLineAction&&(copyLineAction.label=isDeletion?nls.localize("diff.clipboard.copyDeletedLineContent.label","Copy deleted line ({0})",diff.originalStartLineNumber+currentLineNumberOffset):nls.localize("diff.clipboard.copyChangedLineContent.label","Copy changed line ({0})",diff.originalStartLineNumber+currentLineNumberOffset)),actions),autoSelectFirstItem:!0})};this._register(dom.addStandardDisposableListener(this._diffActions,"mousedown",(e=>{const{top,height}=dom.getDomNodePagePosition(this._diffActions),pad=Math.floor(lineHeight/3);e.preventDefault(),showContextMenu(e.posx,top+height+pad)}))),this._register(editor.onMouseMove((e=>{if(8===e.target.type||5===e.target.type){e.target.detail.viewZoneId===this._viewZoneId?(this.visibility=!0,currentLineNumberOffset=this._updateLightBulbPosition(this._marginDomNode,e.event.browserEvent.y,lineHeight)):this.visibility=!1}else this.visibility=!1}))),this._register(editor.onMouseDown((e=>{if(e.event.rightButton&&(8===e.target.type||5===e.target.type)){e.target.detail.viewZoneId===this._viewZoneId&&(e.event.preventDefault(),currentLineNumberOffset=this._updateLightBulbPosition(this._marginDomNode,e.event.browserEvent.y,lineHeight),showContextMenu(e.event.posx,e.event.posy+lineHeight))}})))}get visibility(){return this._visibility}set visibility(_visibility){this._visibility!==_visibility&&(this._visibility=_visibility,this._diffActions.style.visibility=_visibility?"visible":"hidden")}_updateLightBulbPosition(marginDomNode,y,lineHeight){const{top}=dom.getDomNodePagePosition(marginDomNode),offset=y-top,lineNumberOffset=Math.floor(offset/lineHeight),newTop=lineNumberOffset*lineHeight;if(this._diffActions.style.top=`${newTop}px`,this.diff.viewLineCounts){let acc=0;for(let i=0;i<this.diff.viewLineCounts.length;i++)if(acc+=this.diff.viewLineCounts[i],lineNumberOffset<acc)return i}return lineNumberOffset}}