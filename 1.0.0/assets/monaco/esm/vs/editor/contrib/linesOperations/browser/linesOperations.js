import{KeyChord}from"../../../../base/common/keyCodes.js";import{CoreEditingCommands}from"../../../browser/coreCommands.js";import{EditorAction,registerEditorAction}from"../../../browser/editorExtensions.js";import{ReplaceCommand,ReplaceCommandThatPreservesSelection,ReplaceCommandThatSelectsText}from"../../../common/commands/replaceCommand.js";import{TrimTrailingWhitespaceCommand}from"../../../common/commands/trimTrailingWhitespaceCommand.js";import{TypeOperations}from"../../../common/cursor/cursorTypeOperations.js";import{EditOperation}from"../../../common/core/editOperation.js";import{Position}from"../../../common/core/position.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import{CopyLinesCommand}from"./copyLinesCommand.js";import{MoveLinesCommand}from"./moveLinesCommand.js";import{SortLinesCommand}from"./sortLinesCommand.js";import*as nls from"../../../../nls.js";import{MenuId}from"../../../../platform/actions/common/actions.js";import{ILanguageConfigurationService}from"../../../common/languages/languageConfigurationRegistry.js";class AbstractCopyLinesAction extends EditorAction{constructor(down,opts){super(opts),this.down=down}run(_accessor,editor){if(!editor.hasModel())return;const selections=editor.getSelections().map(((selection,index)=>({selection,index,ignore:!1})));selections.sort(((a,b)=>Range.compareRangesUsingStarts(a.selection,b.selection)));let prev=selections[0];for(let i=1;i<selections.length;i++){const curr=selections[i];prev.selection.endLineNumber===curr.selection.startLineNumber&&(prev.index<curr.index?curr.ignore=!0:(prev.ignore=!0,prev=curr))}const commands=[];for(const selection of selections)commands.push(new CopyLinesCommand(selection.selection,this.down,selection.ignore));editor.pushUndoStop(),editor.executeCommands(this.id,commands),editor.pushUndoStop()}}class CopyLinesUpAction extends AbstractCopyLinesAction{constructor(){super(!1,{id:"editor.action.copyLinesUpAction",label:nls.localize("lines.copyUp","Copy Line Up"),alias:"Copy Line Up",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:1552,linux:{primary:3600},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miCopyLinesUp",comment:["&& denotes a mnemonic"]},"&&Copy Line Up"),order:1}})}}class CopyLinesDownAction extends AbstractCopyLinesAction{constructor(){super(!0,{id:"editor.action.copyLinesDownAction",label:nls.localize("lines.copyDown","Copy Line Down"),alias:"Copy Line Down",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:1554,linux:{primary:3602},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miCopyLinesDown",comment:["&& denotes a mnemonic"]},"Co&&py Line Down"),order:2}})}}export class DuplicateSelectionAction extends EditorAction{constructor(){super({id:"editor.action.duplicateSelection",label:nls.localize("duplicateSelection","Duplicate Selection"),alias:"Duplicate Selection",precondition:EditorContextKeys.writable,menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miDuplicateSelection",comment:["&& denotes a mnemonic"]},"&&Duplicate Selection"),order:5}})}run(accessor,editor,args){if(!editor.hasModel())return;const commands=[],selections=editor.getSelections(),model=editor.getModel();for(const selection of selections)if(selection.isEmpty())commands.push(new CopyLinesCommand(selection,!0));else{const insertSelection=new Selection(selection.endLineNumber,selection.endColumn,selection.endLineNumber,selection.endColumn);commands.push(new ReplaceCommandThatSelectsText(insertSelection,model.getValueInRange(selection)))}editor.pushUndoStop(),editor.executeCommands(this.id,commands),editor.pushUndoStop()}}class AbstractMoveLinesAction extends EditorAction{constructor(down,opts){super(opts),this.down=down}run(accessor,editor){const languageConfigurationService=accessor.get(ILanguageConfigurationService),commands=[],selections=editor.getSelections()||[],autoIndent=editor.getOption(9);for(const selection of selections)commands.push(new MoveLinesCommand(selection,this.down,autoIndent,languageConfigurationService));editor.pushUndoStop(),editor.executeCommands(this.id,commands),editor.pushUndoStop()}}class MoveLinesUpAction extends AbstractMoveLinesAction{constructor(){super(!1,{id:"editor.action.moveLinesUpAction",label:nls.localize("lines.moveUp","Move Line Up"),alias:"Move Line Up",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:528,linux:{primary:528},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miMoveLinesUp",comment:["&& denotes a mnemonic"]},"Mo&&ve Line Up"),order:3}})}}class MoveLinesDownAction extends AbstractMoveLinesAction{constructor(){super(!0,{id:"editor.action.moveLinesDownAction",label:nls.localize("lines.moveDown","Move Line Down"),alias:"Move Line Down",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:530,linux:{primary:530},weight:100},menuOpts:{menuId:MenuId.MenubarSelectionMenu,group:"2_line",title:nls.localize({key:"miMoveLinesDown",comment:["&& denotes a mnemonic"]},"Move &&Line Down"),order:4}})}}export class AbstractSortLinesAction extends EditorAction{constructor(descending,opts){super(opts),this.descending=descending}run(_accessor,editor){const selections=editor.getSelections()||[];for(const selection of selections)if(!SortLinesCommand.canRun(editor.getModel(),selection,this.descending))return;const commands=[];for(let i=0,len=selections.length;i<len;i++)commands[i]=new SortLinesCommand(selections[i],this.descending);editor.pushUndoStop(),editor.executeCommands(this.id,commands),editor.pushUndoStop()}}export class SortLinesAscendingAction extends AbstractSortLinesAction{constructor(){super(!1,{id:"editor.action.sortLinesAscending",label:nls.localize("lines.sortAscending","Sort Lines Ascending"),alias:"Sort Lines Ascending",precondition:EditorContextKeys.writable})}}export class SortLinesDescendingAction extends AbstractSortLinesAction{constructor(){super(!0,{id:"editor.action.sortLinesDescending",label:nls.localize("lines.sortDescending","Sort Lines Descending"),alias:"Sort Lines Descending",precondition:EditorContextKeys.writable})}}export class DeleteDuplicateLinesAction extends EditorAction{constructor(){super({id:"editor.action.removeDuplicateLines",label:nls.localize("lines.deleteDuplicates","Delete Duplicate Lines"),alias:"Delete Duplicate Lines",precondition:EditorContextKeys.writable})}run(_accessor,editor){if(!editor.hasModel())return;const model=editor.getModel();if(1===model.getLineCount()&&1===model.getLineMaxColumn(1))return;const edits=[],endCursorState=[];let linesDeleted=0;for(const selection of editor.getSelections()){const uniqueLines=new Set,lines=[];for(let i=selection.startLineNumber;i<=selection.endLineNumber;i++){const line=model.getLineContent(i);uniqueLines.has(line)||(lines.push(line),uniqueLines.add(line))}const selectionToReplace=new Selection(selection.startLineNumber,1,selection.endLineNumber,model.getLineMaxColumn(selection.endLineNumber)),adjustedSelectionStart=selection.startLineNumber-linesDeleted,finalSelection=new Selection(adjustedSelectionStart,1,adjustedSelectionStart+lines.length-1,lines[lines.length-1].length);edits.push(EditOperation.replace(selectionToReplace,lines.join("\n"))),endCursorState.push(finalSelection),linesDeleted+=selection.endLineNumber-selection.startLineNumber+1-lines.length}editor.pushUndoStop(),editor.executeEdits(this.id,edits,endCursorState),editor.pushUndoStop()}}export class TrimTrailingWhitespaceAction extends EditorAction{constructor(){super({id:TrimTrailingWhitespaceAction.ID,label:nls.localize("lines.trimTrailingWhitespace","Trim Trailing Whitespace"),alias:"Trim Trailing Whitespace",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:KeyChord(2089,2102),weight:100}})}run(_accessor,editor,args){let cursors=[];"auto-save"===args.reason&&(cursors=(editor.getSelections()||[]).map((s=>new Position(s.positionLineNumber,s.positionColumn))));const selection=editor.getSelection();if(null===selection)return;const command=new TrimTrailingWhitespaceCommand(selection,cursors);editor.pushUndoStop(),editor.executeCommands(this.id,[command]),editor.pushUndoStop()}}TrimTrailingWhitespaceAction.ID="editor.action.trimTrailingWhitespace";export class DeleteLinesAction extends EditorAction{constructor(){super({id:"editor.action.deleteLines",label:nls.localize("lines.delete","Delete Line"),alias:"Delete Line",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:3113,weight:100}})}run(_accessor,editor){if(!editor.hasModel())return;const ops=this._getLinesToRemove(editor),model=editor.getModel();if(1===model.getLineCount()&&1===model.getLineMaxColumn(1))return;let linesDeleted=0;const edits=[],cursorState=[];for(let i=0,len=ops.length;i<len;i++){const op=ops[i];let startLineNumber=op.startLineNumber,endLineNumber=op.endLineNumber,startColumn=1,endColumn=model.getLineMaxColumn(endLineNumber);endLineNumber<model.getLineCount()?(endLineNumber+=1,endColumn=1):startLineNumber>1&&(startLineNumber-=1,startColumn=model.getLineMaxColumn(startLineNumber)),edits.push(EditOperation.replace(new Selection(startLineNumber,startColumn,endLineNumber,endColumn),"")),cursorState.push(new Selection(startLineNumber-linesDeleted,op.positionColumn,startLineNumber-linesDeleted,op.positionColumn)),linesDeleted+=op.endLineNumber-op.startLineNumber+1}editor.pushUndoStop(),editor.executeEdits(this.id,edits,cursorState),editor.pushUndoStop()}_getLinesToRemove(editor){const operations=editor.getSelections().map((s=>{let endLineNumber=s.endLineNumber;return s.startLineNumber<s.endLineNumber&&1===s.endColumn&&(endLineNumber-=1),{startLineNumber:s.startLineNumber,selectionStartColumn:s.selectionStartColumn,endLineNumber,positionColumn:s.positionColumn}}));operations.sort(((a,b)=>a.startLineNumber===b.startLineNumber?a.endLineNumber-b.endLineNumber:a.startLineNumber-b.startLineNumber));const mergedOperations=[];let previousOperation=operations[0];for(let i=1;i<operations.length;i++)previousOperation.endLineNumber+1>=operations[i].startLineNumber?previousOperation.endLineNumber=operations[i].endLineNumber:(mergedOperations.push(previousOperation),previousOperation=operations[i]);return mergedOperations.push(previousOperation),mergedOperations}}export class IndentLinesAction extends EditorAction{constructor(){super({id:"editor.action.indentLines",label:nls.localize("lines.indent","Indent Line"),alias:"Indent Line",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2137,weight:100}})}run(_accessor,editor){const viewModel=editor._getViewModel();viewModel&&(editor.pushUndoStop(),editor.executeCommands(this.id,TypeOperations.indent(viewModel.cursorConfig,editor.getModel(),editor.getSelections())),editor.pushUndoStop())}}class OutdentLinesAction extends EditorAction{constructor(){super({id:"editor.action.outdentLines",label:nls.localize("lines.outdent","Outdent Line"),alias:"Outdent Line",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2135,weight:100}})}run(_accessor,editor){CoreEditingCommands.Outdent.runEditorCommand(_accessor,editor,null)}}export class InsertLineBeforeAction extends EditorAction{constructor(){super({id:"editor.action.insertLineBefore",label:nls.localize("lines.insertBefore","Insert Line Above"),alias:"Insert Line Above",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:3075,weight:100}})}run(_accessor,editor){const viewModel=editor._getViewModel();viewModel&&(editor.pushUndoStop(),editor.executeCommands(this.id,TypeOperations.lineInsertBefore(viewModel.cursorConfig,editor.getModel(),editor.getSelections())))}}export class InsertLineAfterAction extends EditorAction{constructor(){super({id:"editor.action.insertLineAfter",label:nls.localize("lines.insertAfter","Insert Line Below"),alias:"Insert Line Below",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:2051,weight:100}})}run(_accessor,editor){const viewModel=editor._getViewModel();viewModel&&(editor.pushUndoStop(),editor.executeCommands(this.id,TypeOperations.lineInsertAfter(viewModel.cursorConfig,editor.getModel(),editor.getSelections())))}}export class AbstractDeleteAllToBoundaryAction extends EditorAction{run(_accessor,editor){if(!editor.hasModel())return;const primaryCursor=editor.getSelection(),rangesToDelete=this._getRangesToDelete(editor),effectiveRanges=[];for(let i=0,count=rangesToDelete.length-1;i<count;i++){const range=rangesToDelete[i],nextRange=rangesToDelete[i+1];null===Range.intersectRanges(range,nextRange)?effectiveRanges.push(range):rangesToDelete[i+1]=Range.plusRange(range,nextRange)}effectiveRanges.push(rangesToDelete[rangesToDelete.length-1]);const endCursorState=this._getEndCursorState(primaryCursor,effectiveRanges),edits=effectiveRanges.map((range=>EditOperation.replace(range,"")));editor.pushUndoStop(),editor.executeEdits(this.id,edits,endCursorState),editor.pushUndoStop()}}export class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction{constructor(){super({id:"deleteAllLeft",label:nls.localize("lines.deleteAllLeft","Delete All Left"),alias:"Delete All Left",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:0,mac:{primary:2049},weight:100}})}_getEndCursorState(primaryCursor,rangesToDelete){let endPrimaryCursor=null;const endCursorState=[];let deletedLines=0;return rangesToDelete.forEach((range=>{let endCursor;if(1===range.endColumn&&deletedLines>0){const newStartLine=range.startLineNumber-deletedLines;endCursor=new Selection(newStartLine,range.startColumn,newStartLine,range.startColumn)}else endCursor=new Selection(range.startLineNumber,range.startColumn,range.startLineNumber,range.startColumn);deletedLines+=range.endLineNumber-range.startLineNumber,range.intersectRanges(primaryCursor)?endPrimaryCursor=endCursor:endCursorState.push(endCursor)})),endPrimaryCursor&&endCursorState.unshift(endPrimaryCursor),endCursorState}_getRangesToDelete(editor){const selections=editor.getSelections();if(null===selections)return[];let rangesToDelete=selections;const model=editor.getModel();return null===model?[]:(rangesToDelete.sort(Range.compareRangesUsingStarts),rangesToDelete=rangesToDelete.map((selection=>{if(selection.isEmpty()){if(1===selection.startColumn){const deleteFromLine=Math.max(1,selection.startLineNumber-1),deleteFromColumn=1===selection.startLineNumber?1:model.getLineContent(deleteFromLine).length+1;return new Range(deleteFromLine,deleteFromColumn,selection.startLineNumber,1)}return new Range(selection.startLineNumber,1,selection.startLineNumber,selection.startColumn)}return new Range(selection.startLineNumber,1,selection.endLineNumber,selection.endColumn)})),rangesToDelete)}}export class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction{constructor(){super({id:"deleteAllRight",label:nls.localize("lines.deleteAllRight","Delete All Right"),alias:"Delete All Right",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:0,mac:{primary:297,secondary:[2068]},weight:100}})}_getEndCursorState(primaryCursor,rangesToDelete){let endPrimaryCursor=null;const endCursorState=[];for(let i=0,len=rangesToDelete.length,offset=0;i<len;i++){const range=rangesToDelete[i],endCursor=new Selection(range.startLineNumber-offset,range.startColumn,range.startLineNumber-offset,range.startColumn);range.intersectRanges(primaryCursor)?endPrimaryCursor=endCursor:endCursorState.push(endCursor)}return endPrimaryCursor&&endCursorState.unshift(endPrimaryCursor),endCursorState}_getRangesToDelete(editor){const model=editor.getModel();if(null===model)return[];const selections=editor.getSelections();if(null===selections)return[];const rangesToDelete=selections.map((sel=>{if(sel.isEmpty()){const maxColumn=model.getLineMaxColumn(sel.startLineNumber);return sel.startColumn===maxColumn?new Range(sel.startLineNumber,sel.startColumn,sel.startLineNumber+1,1):new Range(sel.startLineNumber,sel.startColumn,sel.startLineNumber,maxColumn)}return sel}));return rangesToDelete.sort(Range.compareRangesUsingStarts),rangesToDelete}}export class JoinLinesAction extends EditorAction{constructor(){super({id:"editor.action.joinLines",label:nls.localize("lines.joinLines","Join Lines"),alias:"Join Lines",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.editorTextFocus,primary:0,mac:{primary:296},weight:100}})}run(_accessor,editor){const selections=editor.getSelections();if(null===selections)return;let primaryCursor=editor.getSelection();if(null===primaryCursor)return;selections.sort(Range.compareRangesUsingStarts);const reducedSelections=[],lastSelection=selections.reduce(((previousValue,currentValue)=>previousValue.isEmpty()?previousValue.endLineNumber===currentValue.startLineNumber?(primaryCursor.equalsSelection(previousValue)&&(primaryCursor=currentValue),currentValue):currentValue.startLineNumber>previousValue.endLineNumber+1?(reducedSelections.push(previousValue),currentValue):new Selection(previousValue.startLineNumber,previousValue.startColumn,currentValue.endLineNumber,currentValue.endColumn):currentValue.startLineNumber>previousValue.endLineNumber?(reducedSelections.push(previousValue),currentValue):new Selection(previousValue.startLineNumber,previousValue.startColumn,currentValue.endLineNumber,currentValue.endColumn)));reducedSelections.push(lastSelection);const model=editor.getModel();if(null===model)return;const edits=[],endCursorState=[];let endPrimaryCursor=primaryCursor,lineOffset=0;for(let i=0,len=reducedSelections.length;i<len;i++){const selection=reducedSelections[i],startLineNumber=selection.startLineNumber,startColumn=1;let endLineNumber,endColumn,columnDeltaOffset=0;const selectionEndPositionOffset=model.getLineContent(selection.endLineNumber).length-selection.endColumn;if(selection.isEmpty()||selection.startLineNumber===selection.endLineNumber){const position=selection.getStartPosition();position.lineNumber<model.getLineCount()?(endLineNumber=startLineNumber+1,endColumn=model.getLineMaxColumn(endLineNumber)):(endLineNumber=position.lineNumber,endColumn=model.getLineMaxColumn(position.lineNumber))}else endLineNumber=selection.endLineNumber,endColumn=model.getLineMaxColumn(endLineNumber);let trimmedLinesContent=model.getLineContent(startLineNumber);for(let i=startLineNumber+1;i<=endLineNumber;i++){const lineText=model.getLineContent(i),firstNonWhitespaceIdx=model.getLineFirstNonWhitespaceColumn(i);if(firstNonWhitespaceIdx>=1){let insertSpace=!0;""===trimmedLinesContent&&(insertSpace=!1),!insertSpace||" "!==trimmedLinesContent.charAt(trimmedLinesContent.length-1)&&"\t"!==trimmedLinesContent.charAt(trimmedLinesContent.length-1)||(insertSpace=!1,trimmedLinesContent=trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g," "));const lineTextWithoutIndent=lineText.substr(firstNonWhitespaceIdx-1);trimmedLinesContent+=(insertSpace?" ":"")+lineTextWithoutIndent,columnDeltaOffset=insertSpace?lineTextWithoutIndent.length+1:lineTextWithoutIndent.length}else columnDeltaOffset=0}const deleteSelection=new Range(startLineNumber,startColumn,endLineNumber,endColumn);if(!deleteSelection.isEmpty()){let resultSelection;selection.isEmpty()?(edits.push(EditOperation.replace(deleteSelection,trimmedLinesContent)),resultSelection=new Selection(deleteSelection.startLineNumber-lineOffset,trimmedLinesContent.length-columnDeltaOffset+1,startLineNumber-lineOffset,trimmedLinesContent.length-columnDeltaOffset+1)):selection.startLineNumber===selection.endLineNumber?(edits.push(EditOperation.replace(deleteSelection,trimmedLinesContent)),resultSelection=new Selection(selection.startLineNumber-lineOffset,selection.startColumn,selection.endLineNumber-lineOffset,selection.endColumn)):(edits.push(EditOperation.replace(deleteSelection,trimmedLinesContent)),resultSelection=new Selection(selection.startLineNumber-lineOffset,selection.startColumn,selection.startLineNumber-lineOffset,trimmedLinesContent.length-selectionEndPositionOffset)),null!==Range.intersectRanges(deleteSelection,primaryCursor)?endPrimaryCursor=resultSelection:endCursorState.push(resultSelection)}lineOffset+=deleteSelection.endLineNumber-deleteSelection.startLineNumber}endCursorState.unshift(endPrimaryCursor),editor.pushUndoStop(),editor.executeEdits(this.id,edits,endCursorState),editor.pushUndoStop()}}export class TransposeAction extends EditorAction{constructor(){super({id:"editor.action.transpose",label:nls.localize("editor.transpose","Transpose characters around the cursor"),alias:"Transpose characters around the cursor",precondition:EditorContextKeys.writable})}run(_accessor,editor){const selections=editor.getSelections();if(null===selections)return;const model=editor.getModel();if(null===model)return;const commands=[];for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];if(!selection.isEmpty())continue;const cursor=selection.getStartPosition(),maxColumn=model.getLineMaxColumn(cursor.lineNumber);if(cursor.column>=maxColumn){if(cursor.lineNumber===model.getLineCount())continue;const deleteSelection=new Range(cursor.lineNumber,Math.max(1,cursor.column-1),cursor.lineNumber+1,1),chars=model.getValueInRange(deleteSelection).split("").reverse().join("");commands.push(new ReplaceCommand(new Selection(cursor.lineNumber,Math.max(1,cursor.column-1),cursor.lineNumber+1,1),chars))}else{const deleteSelection=new Range(cursor.lineNumber,Math.max(1,cursor.column-1),cursor.lineNumber,cursor.column+1),chars=model.getValueInRange(deleteSelection).split("").reverse().join("");commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection,chars,new Selection(cursor.lineNumber,cursor.column+1,cursor.lineNumber,cursor.column+1)))}}editor.pushUndoStop(),editor.executeCommands(this.id,commands),editor.pushUndoStop()}}export class AbstractCaseAction extends EditorAction{run(_accessor,editor){const selections=editor.getSelections();if(null===selections)return;const model=editor.getModel();if(null===model)return;const wordSeparators=editor.getOption(119),textEdits=[];for(const selection of selections)if(selection.isEmpty()){const cursor=selection.getStartPosition(),word=editor.getConfiguredWordAtPosition(cursor);if(!word)continue;const wordRange=new Range(cursor.lineNumber,word.startColumn,cursor.lineNumber,word.endColumn),text=model.getValueInRange(wordRange);textEdits.push(EditOperation.replace(wordRange,this._modifyText(text,wordSeparators)))}else{const text=model.getValueInRange(selection);textEdits.push(EditOperation.replace(selection,this._modifyText(text,wordSeparators)))}editor.pushUndoStop(),editor.executeEdits(this.id,textEdits),editor.pushUndoStop()}}export class UpperCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToUppercase",label:nls.localize("editor.transformToUppercase","Transform to Uppercase"),alias:"Transform to Uppercase",precondition:EditorContextKeys.writable})}_modifyText(text,wordSeparators){return text.toLocaleUpperCase()}}export class LowerCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToLowercase",label:nls.localize("editor.transformToLowercase","Transform to Lowercase"),alias:"Transform to Lowercase",precondition:EditorContextKeys.writable})}_modifyText(text,wordSeparators){return text.toLocaleLowerCase()}}class BackwardsCompatibleRegExp{constructor(_pattern,_flags){this._pattern=_pattern,this._flags=_flags,this._actual=null,this._evaluated=!1}get(){if(!this._evaluated){this._evaluated=!0;try{this._actual=new RegExp(this._pattern,this._flags)}catch(err){}}return this._actual}isSupported(){return null!==this.get()}}export class TitleCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToTitlecase",label:nls.localize("editor.transformToTitlecase","Transform to Title Case"),alias:"Transform to Title Case",precondition:EditorContextKeys.writable})}_modifyText(text,wordSeparators){const titleBoundary=TitleCaseAction.titleBoundary.get();return titleBoundary?text.toLocaleLowerCase().replace(titleBoundary,(b=>b.toLocaleUpperCase())):text}}TitleCaseAction.titleBoundary=new BackwardsCompatibleRegExp("(^|[^\\p{L}\\p{N}']|((^|\\P{L})'))\\p{L}","gmu");export class SnakeCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToSnakecase",label:nls.localize("editor.transformToSnakecase","Transform to Snake Case"),alias:"Transform to Snake Case",precondition:EditorContextKeys.writable})}_modifyText(text,wordSeparators){const caseBoundary=SnakeCaseAction.caseBoundary.get(),singleLetters=SnakeCaseAction.singleLetters.get();return caseBoundary&&singleLetters?text.replace(caseBoundary,"$1_$2").replace(singleLetters,"$1_$2$3").toLocaleLowerCase():text}}SnakeCaseAction.caseBoundary=new BackwardsCompatibleRegExp("(\\p{Ll})(\\p{Lu})","gmu"),SnakeCaseAction.singleLetters=new BackwardsCompatibleRegExp("(\\p{Lu}|\\p{N})(\\p{Lu})(\\p{Ll})","gmu");export class KebabCaseAction extends AbstractCaseAction{constructor(){super({id:"editor.action.transformToKebabcase",label:nls.localize("editor.transformToKebabcase","Transform to Kebab Case"),alias:"Transform to Kebab Case",precondition:EditorContextKeys.writable})}static isSupported(){return[this.caseBoundary,this.singleLetters,this.underscoreBoundary].every((regexp=>regexp.isSupported()))}_modifyText(text,_){const caseBoundary=KebabCaseAction.caseBoundary.get(),singleLetters=KebabCaseAction.singleLetters.get(),underscoreBoundary=KebabCaseAction.underscoreBoundary.get();return caseBoundary&&singleLetters&&underscoreBoundary?text.replace(underscoreBoundary,"$1-$3").replace(caseBoundary,"$1-$2").replace(singleLetters,"$1-$2").toLocaleLowerCase():text}}KebabCaseAction.caseBoundary=new BackwardsCompatibleRegExp("(\\p{Ll})(\\p{Lu})","gmu"),KebabCaseAction.singleLetters=new BackwardsCompatibleRegExp("(\\p{Lu}|\\p{N})(\\p{Lu}\\p{Ll})","gmu"),KebabCaseAction.underscoreBoundary=new BackwardsCompatibleRegExp("(\\S)(_)(\\S)","gm"),registerEditorAction(CopyLinesUpAction),registerEditorAction(CopyLinesDownAction),registerEditorAction(DuplicateSelectionAction),registerEditorAction(MoveLinesUpAction),registerEditorAction(MoveLinesDownAction),registerEditorAction(SortLinesAscendingAction),registerEditorAction(SortLinesDescendingAction),registerEditorAction(DeleteDuplicateLinesAction),registerEditorAction(TrimTrailingWhitespaceAction),registerEditorAction(DeleteLinesAction),registerEditorAction(IndentLinesAction),registerEditorAction(OutdentLinesAction),registerEditorAction(InsertLineBeforeAction),registerEditorAction(InsertLineAfterAction),registerEditorAction(DeleteAllLeftAction),registerEditorAction(DeleteAllRightAction),registerEditorAction(JoinLinesAction),registerEditorAction(TransposeAction),registerEditorAction(UpperCaseAction),registerEditorAction(LowerCaseAction),SnakeCaseAction.caseBoundary.isSupported()&&SnakeCaseAction.singleLetters.isSupported()&&registerEditorAction(SnakeCaseAction),TitleCaseAction.titleBoundary.isSupported()&&registerEditorAction(TitleCaseAction),KebabCaseAction.isSupported()&&registerEditorAction(KebabCaseAction);