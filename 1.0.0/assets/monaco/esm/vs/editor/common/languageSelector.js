import{match as matchGlobPattern}from"../../base/common/glob.js";import{normalize}from"../../base/common/path.js";export function score(selector,candidateUri,candidateLanguage,candidateIsSynchronized,candidateNotebookUri,candidateNotebookType){if(Array.isArray(selector)){let ret=0;for(const filter of selector){const value=score(filter,candidateUri,candidateLanguage,candidateIsSynchronized,candidateNotebookUri,candidateNotebookType);if(10===value)return value;value>ret&&(ret=value)}return ret}if("string"==typeof selector)return candidateIsSynchronized?"*"===selector?5:selector===candidateLanguage?10:0:0;if(selector){const{language,pattern,scheme,hasAccessToAllModels,notebookType}=selector;if(!candidateIsSynchronized&&!hasAccessToAllModels)return 0;notebookType&&candidateNotebookUri&&(candidateUri=candidateNotebookUri);let ret=0;if(scheme)if(scheme===candidateUri.scheme)ret=10;else{if("*"!==scheme)return 0;ret=5}if(language)if(language===candidateLanguage)ret=10;else{if("*"!==language)return 0;ret=Math.max(ret,5)}if(notebookType)if(notebookType===candidateNotebookType)ret=10;else{if("*"!==notebookType||void 0===candidateNotebookType)return 0;ret=Math.max(ret,5)}if(pattern){let normalizedPattern;if(normalizedPattern="string"==typeof pattern?pattern:Object.assign(Object.assign({},pattern),{base:normalize(pattern.base)}),normalizedPattern!==candidateUri.fsPath&&!matchGlobPattern(normalizedPattern,candidateUri.fsPath))return 0;ret=10}return ret}return 0}