import{splitLines}from"../../../../../base/common/strings.js";import{Range}from"../../../core/range.js";export class LengthObj{constructor(lineCount,columnCount){this.lineCount=lineCount,this.columnCount=columnCount}toString(){return`${this.lineCount},${this.columnCount}`}}LengthObj.zero=new LengthObj(0,0);export function lengthDiff(startLineCount,startColumnCount,endLineCount,endColumnCount){return startLineCount!==endLineCount?toLength(endLineCount-startLineCount,endColumnCount):toLength(0,endColumnCount-startColumnCount)}export const lengthZero=0;export function lengthIsZero(length){return 0===length}const factor=Math.pow(2,26);export function toLength(lineCount,columnCount){return lineCount*factor+columnCount}export function lengthToObj(length){const l=length,lineCount=Math.floor(l/factor);return new LengthObj(lineCount,l-lineCount*factor)}export function lengthGetLineCount(length){return Math.floor(length/factor)}export function lengthGetColumnCountIfZeroLineCount(length){return length}export function lengthAdd(l1,l2){return l2<factor?l1+l2:l1-l1%factor+l2}export function lengthDiffNonNegative(length1,length2){const l1=length1,l2=length2;if(l2-l1<=0)return 0;const lineCount1=Math.floor(l1/factor),lineCount2=Math.floor(l2/factor),colCount2=l2-lineCount2*factor;if(lineCount1===lineCount2){return toLength(0,colCount2-(l1-lineCount1*factor))}return toLength(lineCount2-lineCount1,colCount2)}export function lengthLessThan(length1,length2){return length1<length2}export function lengthLessThanEqual(length1,length2){return length1<=length2}export function lengthGreaterThanEqual(length1,length2){return length1>=length2}export function positionToLength(position){return toLength(position.lineNumber-1,position.column-1)}export function lengthsToRange(lengthStart,lengthEnd){const l=lengthStart,lineCount=Math.floor(l/factor),colCount=l-lineCount*factor,l2=lengthEnd,lineCount2=Math.floor(l2/factor);return new Range(lineCount+1,colCount+1,lineCount2+1,l2-lineCount2*factor+1)}export function lengthOfString(str){const lines=splitLines(str);return toLength(lines.length-1,lines[lines.length-1].length)}