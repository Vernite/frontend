export class ModelRawFlush{constructor(){this.changeType=1}}export class LineInjectedText{constructor(ownerId,lineNumber,column,options,order){this.ownerId=ownerId,this.lineNumber=lineNumber,this.column=column,this.options=options,this.order=order}static applyInjectedText(lineText,injectedTexts){if(!injectedTexts||0===injectedTexts.length)return lineText;let result="",lastOriginalOffset=0;for(const injectedText of injectedTexts)result+=lineText.substring(lastOriginalOffset,injectedText.column-1),lastOriginalOffset=injectedText.column-1,result+=injectedText.options.content;return result+=lineText.substring(lastOriginalOffset),result}static fromDecorations(decorations){const result=[];for(const decoration of decorations)decoration.options.before&&decoration.options.before.content.length>0&&result.push(new LineInjectedText(decoration.ownerId,decoration.range.startLineNumber,decoration.range.startColumn,decoration.options.before,0)),decoration.options.after&&decoration.options.after.content.length>0&&result.push(new LineInjectedText(decoration.ownerId,decoration.range.endLineNumber,decoration.range.endColumn,decoration.options.after,1));return result.sort(((a,b)=>a.lineNumber===b.lineNumber?a.column===b.column?a.order-b.order:a.column-b.column:a.lineNumber-b.lineNumber)),result}}export class ModelRawLineChanged{constructor(lineNumber,detail,injectedText){this.changeType=2,this.lineNumber=lineNumber,this.detail=detail,this.injectedText=injectedText}}export class ModelRawLinesDeleted{constructor(fromLineNumber,toLineNumber){this.changeType=3,this.fromLineNumber=fromLineNumber,this.toLineNumber=toLineNumber}}export class ModelRawLinesInserted{constructor(fromLineNumber,toLineNumber,detail,injectedTexts){this.changeType=4,this.injectedTexts=injectedTexts,this.fromLineNumber=fromLineNumber,this.toLineNumber=toLineNumber,this.detail=detail}}export class ModelRawEOLChanged{constructor(){this.changeType=5}}export class ModelRawContentChangedEvent{constructor(changes,versionId,isUndoing,isRedoing){this.changes=changes,this.versionId=versionId,this.isUndoing=isUndoing,this.isRedoing=isRedoing,this.resultingSelection=null}containsEvent(type){for(let i=0,len=this.changes.length;i<len;i++){if(this.changes[i].changeType===type)return!0}return!1}static merge(a,b){const changes=[].concat(a.changes).concat(b.changes),versionId=b.versionId,isUndoing=a.isUndoing||b.isUndoing,isRedoing=a.isRedoing||b.isRedoing;return new ModelRawContentChangedEvent(changes,versionId,isUndoing,isRedoing)}}export class ModelInjectedTextChangedEvent{constructor(changes){this.changes=changes}}export class InternalModelContentChangeEvent{constructor(rawContentChangedEvent,contentChangedEvent){this.rawContentChangedEvent=rawContentChangedEvent,this.contentChangedEvent=contentChangedEvent}merge(other){const rawContentChangedEvent=ModelRawContentChangedEvent.merge(this.rawContentChangedEvent,other.rawContentChangedEvent),contentChangedEvent=InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent,other.contentChangedEvent);return new InternalModelContentChangeEvent(rawContentChangedEvent,contentChangedEvent)}static _mergeChangeEvents(a,b){return{changes:[].concat(a.changes).concat(b.changes),eol:b.eol,versionId:b.versionId,isUndoing:a.isUndoing||b.isUndoing,isRedoing:a.isRedoing||b.isRedoing,isFlush:a.isFlush||b.isFlush}}}