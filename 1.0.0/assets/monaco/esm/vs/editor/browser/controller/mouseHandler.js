import*as dom from"../../../base/browser/dom.js";import{StandardWheelEvent}from"../../../base/browser/mouseEvent.js";import{TimeoutTimer}from"../../../base/common/async.js";import{Disposable}from"../../../base/common/lifecycle.js";import*as platform from"../../../base/common/platform.js";import{HitTestContext,MouseTarget,MouseTargetFactory}from"./mouseTarget.js";import{ClientCoordinates,EditorMouseEvent,EditorMouseEventFactory,GlobalEditorPointerMoveMonitor,createEditorPagePosition,createCoordinatesRelativeToEditor}from"../editorDom.js";import{EditorZoom}from"../../common/config/editorZoom.js";import{Position}from"../../common/core/position.js";import{Selection}from"../../common/core/selection.js";import{ViewEventHandler}from"../../common/viewEventHandler.js";export class MouseHandler extends ViewEventHandler{constructor(context,viewController,viewHelper){super(),this._mouseLeaveMonitor=null,this._context=context,this.viewController=viewController,this.viewHelper=viewHelper,this.mouseTargetFactory=new MouseTargetFactory(this._context,viewHelper),this._mouseDownOperation=this._register(new MouseDownOperation(this._context,this.viewController,this.viewHelper,((e,testEventTarget)=>this._createMouseTarget(e,testEventTarget)),(e=>this._getMouseColumn(e)))),this.lastMouseLeaveTime=-1,this._height=this._context.configuration.options.get(133).height;const mouseEvents=new EditorMouseEventFactory(this.viewHelper.viewDomNode);this._register(mouseEvents.onContextMenu(this.viewHelper.viewDomNode,(e=>this._onContextMenu(e,!0)))),this._register(mouseEvents.onMouseMove(this.viewHelper.viewDomNode,(e=>{this._onMouseMove(e),this._mouseLeaveMonitor||(this._mouseLeaveMonitor=dom.addDisposableListener(document,"mousemove",(e=>{this.viewHelper.viewDomNode.contains(e.target)||this._onMouseLeave(new EditorMouseEvent(e,!1,this.viewHelper.viewDomNode))})))}))),this._register(mouseEvents.onMouseUp(this.viewHelper.viewDomNode,(e=>this._onMouseUp(e)))),this._register(mouseEvents.onMouseLeave(this.viewHelper.viewDomNode,(e=>this._onMouseLeave(e))));let capturePointerId=0;this._register(mouseEvents.onPointerDown(this.viewHelper.viewDomNode,((e,pointerId)=>{capturePointerId=pointerId}))),this._register(dom.addDisposableListener(this.viewHelper.viewDomNode,dom.EventType.POINTER_UP,(e=>{this._mouseDownOperation.onPointerUp()}))),this._register(mouseEvents.onMouseDown(this.viewHelper.viewDomNode,(e=>this._onMouseDown(e,capturePointerId))));this._register(dom.addDisposableListener(this.viewHelper.viewDomNode,dom.EventType.MOUSE_WHEEL,(browserEvent=>{if(this.viewController.emitMouseWheel(browserEvent),!this._context.configuration.options.get(70))return;const e=new StandardWheelEvent(browserEvent);if(platform.isMacintosh?(browserEvent.metaKey||browserEvent.ctrlKey)&&!browserEvent.shiftKey&&!browserEvent.altKey:browserEvent.ctrlKey&&!browserEvent.metaKey&&!browserEvent.shiftKey&&!browserEvent.altKey){const zoomLevel=EditorZoom.getZoomLevel(),delta=e.deltaY>0?1:-1;EditorZoom.setZoomLevel(zoomLevel+delta),e.preventDefault(),e.stopPropagation()}}),{capture:!0,passive:!1})),this._context.addEventHandler(this)}dispose(){this._context.removeEventHandler(this),this._mouseLeaveMonitor&&(this._mouseLeaveMonitor.dispose(),this._mouseLeaveMonitor=null),super.dispose()}onConfigurationChanged(e){if(e.hasChanged(133)){const height=this._context.configuration.options.get(133).height;this._height!==height&&(this._height=height,this._mouseDownOperation.onHeightChanged())}return!1}onCursorStateChanged(e){return this._mouseDownOperation.onCursorStateChanged(e),!1}onFocusChanged(e){return!1}onScrollChanged(e){return this._mouseDownOperation.onScrollChanged(),!1}getTargetAtClientPoint(clientX,clientY){const pos=new ClientCoordinates(clientX,clientY).toPageCoordinates(),editorPos=createEditorPagePosition(this.viewHelper.viewDomNode);if(pos.y<editorPos.y||pos.y>editorPos.y+editorPos.height||pos.x<editorPos.x||pos.x>editorPos.x+editorPos.width)return null;const relativePos=createCoordinatesRelativeToEditor(this.viewHelper.viewDomNode,editorPos,pos);return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(),editorPos,pos,relativePos,null)}_createMouseTarget(e,testEventTarget){let target=e.target;if(!this.viewHelper.viewDomNode.contains(target)){const shadowRoot=dom.getShadowRoot(this.viewHelper.viewDomNode);shadowRoot&&(target=shadowRoot.elementsFromPoint(e.posx,e.posy).find((el=>this.viewHelper.viewDomNode.contains(el))))}return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(),e.editorPos,e.pos,e.relativePos,testEventTarget?target:null)}_getMouseColumn(e){return this.mouseTargetFactory.getMouseColumn(e.relativePos)}_onContextMenu(e,testEventTarget){this.viewController.emitContextMenu({event:e,target:this._createMouseTarget(e,testEventTarget)})}_onMouseMove(e){if(this.mouseTargetFactory.mouseTargetIsWidget(e)||e.preventDefault(),this._mouseDownOperation.isActive())return;e.timestamp<this.lastMouseLeaveTime||this.viewController.emitMouseMove({event:e,target:this._createMouseTarget(e,!0)})}_onMouseLeave(e){this._mouseLeaveMonitor&&(this._mouseLeaveMonitor.dispose(),this._mouseLeaveMonitor=null),this.lastMouseLeaveTime=(new Date).getTime(),this.viewController.emitMouseLeave({event:e,target:null})}_onMouseUp(e){this.viewController.emitMouseUp({event:e,target:this._createMouseTarget(e,!0)})}_onMouseDown(e,pointerId){const t=this._createMouseTarget(e,!0),targetIsContent=6===t.type||7===t.type,targetIsGutter=2===t.type||3===t.type||4===t.type,targetIsLineNumbers=3===t.type,selectOnLineNumbers=this._context.configuration.options.get(100),targetIsViewZone=8===t.type||5===t.type,targetIsWidget=9===t.type;let shouldHandle=e.leftButton||e.middleButton;platform.isMacintosh&&e.leftButton&&e.ctrlKey&&(shouldHandle=!1);const focus=()=>{e.preventDefault(),this.viewHelper.focusTextArea()};if(shouldHandle&&(targetIsContent||targetIsLineNumbers&&selectOnLineNumbers))focus(),this._mouseDownOperation.start(t.type,e,pointerId);else if(targetIsGutter)e.preventDefault();else if(targetIsViewZone){const viewZoneData=t.detail;shouldHandle&&this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)&&(focus(),this._mouseDownOperation.start(t.type,e,pointerId),e.preventDefault())}else targetIsWidget&&this.viewHelper.shouldSuppressMouseDownOnWidget(t.detail)&&(focus(),e.preventDefault());this.viewController.emitMouseDown({event:e,target:t})}}class MouseDownOperation extends Disposable{constructor(context,viewController,viewHelper,createMouseTarget,getMouseColumn){super(),this._context=context,this._viewController=viewController,this._viewHelper=viewHelper,this._createMouseTarget=createMouseTarget,this._getMouseColumn=getMouseColumn,this._mouseMoveMonitor=this._register(new GlobalEditorPointerMoveMonitor(this._viewHelper.viewDomNode)),this._onScrollTimeout=this._register(new TimeoutTimer),this._mouseState=new MouseDownState,this._currentSelection=new Selection(1,1,1,1),this._isActive=!1,this._lastMouseEvent=null}dispose(){super.dispose()}isActive(){return this._isActive}_onMouseDownThenMove(e){this._lastMouseEvent=e,this._mouseState.setModifiers(e);const position=this._findMousePosition(e,!1);position&&(this._mouseState.isDragAndDrop?this._viewController.emitMouseDrag({event:e,target:position}):this._dispatchMouse(position,!0))}start(targetType,e,pointerId){this._lastMouseEvent=e,this._mouseState.setStartedOnLineNumbers(3===targetType),this._mouseState.setStartButtons(e),this._mouseState.setModifiers(e);const position=this._findMousePosition(e,!0);if(!position||!position.position)return;this._mouseState.trySetCount(e.detail,position.position),e.detail=this._mouseState.count;const options=this._context.configuration.options;if(!options.get(83)&&options.get(31)&&!options.get(18)&&!this._mouseState.altKey&&e.detail<2&&!this._isActive&&!this._currentSelection.isEmpty()&&6===position.type&&position.position&&this._currentSelection.containsPosition(position.position))return this._mouseState.isDragAndDrop=!0,this._isActive=!0,void this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode,pointerId,e.buttons,(e=>this._onMouseDownThenMove(e)),(browserEvent=>{const position=this._findMousePosition(this._lastMouseEvent,!1);browserEvent&&browserEvent instanceof KeyboardEvent?this._viewController.emitMouseDropCanceled():this._viewController.emitMouseDrop({event:this._lastMouseEvent,target:position?this._createMouseTarget(this._lastMouseEvent,!0):null}),this._stop()}));this._mouseState.isDragAndDrop=!1,this._dispatchMouse(position,e.shiftKey),this._isActive||(this._isActive=!0,this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode,pointerId,e.buttons,(e=>this._onMouseDownThenMove(e)),(()=>this._stop())))}_stop(){this._isActive=!1,this._onScrollTimeout.cancel()}onHeightChanged(){this._mouseMoveMonitor.stopMonitoring()}onPointerUp(){this._mouseMoveMonitor.stopMonitoring()}onScrollChanged(){this._isActive&&this._onScrollTimeout.setIfNotSet((()=>{if(!this._lastMouseEvent)return;const position=this._findMousePosition(this._lastMouseEvent,!1);position&&(this._mouseState.isDragAndDrop||this._dispatchMouse(position,!0))}),10)}onCursorStateChanged(e){this._currentSelection=e.selections[0]}_getPositionOutsideEditor(e){const editorContent=e.editorPos,model=this._context.viewModel,viewLayout=this._context.viewLayout,mouseColumn=this._getMouseColumn(e);if(e.posy<editorContent.y){const verticalOffset=Math.max(viewLayout.getCurrentScrollTop()-(editorContent.y-e.posy),0),viewZoneData=HitTestContext.getZoneAtCoord(this._context,verticalOffset);if(viewZoneData){const newPosition=this._helpPositionJumpOverViewZone(viewZoneData);if(newPosition)return MouseTarget.createOutsideEditor(mouseColumn,newPosition)}const aboveLineNumber=viewLayout.getLineNumberAtVerticalOffset(verticalOffset);return MouseTarget.createOutsideEditor(mouseColumn,new Position(aboveLineNumber,1))}if(e.posy>editorContent.y+editorContent.height){const verticalOffset=viewLayout.getCurrentScrollTop()+e.relativePos.y,viewZoneData=HitTestContext.getZoneAtCoord(this._context,verticalOffset);if(viewZoneData){const newPosition=this._helpPositionJumpOverViewZone(viewZoneData);if(newPosition)return MouseTarget.createOutsideEditor(mouseColumn,newPosition)}const belowLineNumber=viewLayout.getLineNumberAtVerticalOffset(verticalOffset);return MouseTarget.createOutsideEditor(mouseColumn,new Position(belowLineNumber,model.getLineMaxColumn(belowLineNumber)))}const possibleLineNumber=viewLayout.getLineNumberAtVerticalOffset(viewLayout.getCurrentScrollTop()+e.relativePos.y);return e.posx<editorContent.x?MouseTarget.createOutsideEditor(mouseColumn,new Position(possibleLineNumber,1)):e.posx>editorContent.x+editorContent.width?MouseTarget.createOutsideEditor(mouseColumn,new Position(possibleLineNumber,model.getLineMaxColumn(possibleLineNumber))):null}_findMousePosition(e,testEventTarget){const positionOutsideEditor=this._getPositionOutsideEditor(e);if(positionOutsideEditor)return positionOutsideEditor;const t=this._createMouseTarget(e,testEventTarget);if(!t.position)return null;if(8===t.type||5===t.type){const newPosition=this._helpPositionJumpOverViewZone(t.detail);if(newPosition)return MouseTarget.createViewZone(t.type,t.element,t.mouseColumn,newPosition,t.detail)}return t}_helpPositionJumpOverViewZone(viewZoneData){const selectionStart=new Position(this._currentSelection.selectionStartLineNumber,this._currentSelection.selectionStartColumn),positionBefore=viewZoneData.positionBefore,positionAfter=viewZoneData.positionAfter;return positionBefore&&positionAfter?positionBefore.isBefore(selectionStart)?positionBefore:positionAfter:null}_dispatchMouse(position,inSelectionMode){position.position&&this._viewController.dispatchMouse({position:position.position,mouseColumn:position.mouseColumn,startedOnLineNumbers:this._mouseState.startedOnLineNumbers,inSelectionMode,mouseDownCount:this._mouseState.count,altKey:this._mouseState.altKey,ctrlKey:this._mouseState.ctrlKey,metaKey:this._mouseState.metaKey,shiftKey:this._mouseState.shiftKey,leftButton:this._mouseState.leftButton,middleButton:this._mouseState.middleButton,onInjectedText:6===position.type&&null!==position.detail.injectedText})}}class MouseDownState{constructor(){this._altKey=!1,this._ctrlKey=!1,this._metaKey=!1,this._shiftKey=!1,this._leftButton=!1,this._middleButton=!1,this._startedOnLineNumbers=!1,this._lastMouseDownPosition=null,this._lastMouseDownPositionEqualCount=0,this._lastMouseDownCount=0,this._lastSetMouseDownCountTime=0,this.isDragAndDrop=!1}get altKey(){return this._altKey}get ctrlKey(){return this._ctrlKey}get metaKey(){return this._metaKey}get shiftKey(){return this._shiftKey}get leftButton(){return this._leftButton}get middleButton(){return this._middleButton}get startedOnLineNumbers(){return this._startedOnLineNumbers}get count(){return this._lastMouseDownCount}setModifiers(source){this._altKey=source.altKey,this._ctrlKey=source.ctrlKey,this._metaKey=source.metaKey,this._shiftKey=source.shiftKey}setStartButtons(source){this._leftButton=source.leftButton,this._middleButton=source.middleButton}setStartedOnLineNumbers(startedOnLineNumbers){this._startedOnLineNumbers=startedOnLineNumbers}trySetCount(setMouseDownCount,newMouseDownPosition){const currentTime=(new Date).getTime();currentTime-this._lastSetMouseDownCountTime>MouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME&&(setMouseDownCount=1),this._lastSetMouseDownCountTime=currentTime,setMouseDownCount>this._lastMouseDownCount+1&&(setMouseDownCount=this._lastMouseDownCount+1),this._lastMouseDownPosition&&this._lastMouseDownPosition.equals(newMouseDownPosition)?this._lastMouseDownPositionEqualCount++:this._lastMouseDownPositionEqualCount=1,this._lastMouseDownPosition=newMouseDownPosition,this._lastMouseDownCount=Math.min(setMouseDownCount,this._lastMouseDownPositionEqualCount)}}MouseDownState.CLEAR_MOUSE_DOWN_COUNT_TIME=400;