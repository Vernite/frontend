var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r};import*as DomUtils from"./dom.js";import*as arrays from"../common/arrays.js";import{memoize}from"../common/decorators.js";import{Disposable}from"../common/lifecycle.js";export var EventType;!function(EventType){EventType.Tap="-monaco-gesturetap",EventType.Change="-monaco-gesturechange",EventType.Start="-monaco-gesturestart",EventType.End="-monaco-gesturesend",EventType.Contextmenu="-monaco-gesturecontextmenu"}(EventType||(EventType={}));export class Gesture extends Disposable{constructor(){super(),this.dispatched=!1,this.activeTouches={},this.handle=null,this.targets=[],this.ignoreTargets=[],this._lastSetTapCountTime=0,this._register(DomUtils.addDisposableListener(document,"touchstart",(e=>this.onTouchStart(e)),{passive:!1})),this._register(DomUtils.addDisposableListener(document,"touchend",(e=>this.onTouchEnd(e)))),this._register(DomUtils.addDisposableListener(document,"touchmove",(e=>this.onTouchMove(e)),{passive:!1}))}static addTarget(element){return Gesture.isTouchDevice()?(Gesture.INSTANCE||(Gesture.INSTANCE=new Gesture),Gesture.INSTANCE.targets.push(element),{dispose:()=>{Gesture.INSTANCE.targets=Gesture.INSTANCE.targets.filter((t=>t!==element))}}):Disposable.None}static ignoreTarget(element){return Gesture.isTouchDevice()?(Gesture.INSTANCE||(Gesture.INSTANCE=new Gesture),Gesture.INSTANCE.ignoreTargets.push(element),{dispose:()=>{Gesture.INSTANCE.ignoreTargets=Gesture.INSTANCE.ignoreTargets.filter((t=>t!==element))}}):Disposable.None}static isTouchDevice(){return"ontouchstart"in window||navigator.maxTouchPoints>0}dispose(){this.handle&&(this.handle.dispose(),this.handle=null),super.dispose()}onTouchStart(e){const timestamp=Date.now();this.handle&&(this.handle.dispose(),this.handle=null);for(let i=0,len=e.targetTouches.length;i<len;i++){const touch=e.targetTouches.item(i);this.activeTouches[touch.identifier]={id:touch.identifier,initialTarget:touch.target,initialTimeStamp:timestamp,initialPageX:touch.pageX,initialPageY:touch.pageY,rollingTimestamps:[timestamp],rollingPageX:[touch.pageX],rollingPageY:[touch.pageY]};const evt=this.newGestureEvent(EventType.Start,touch.target);evt.pageX=touch.pageX,evt.pageY=touch.pageY,this.dispatchEvent(evt)}this.dispatched&&(e.preventDefault(),e.stopPropagation(),this.dispatched=!1)}onTouchEnd(e){const timestamp=Date.now(),activeTouchCount=Object.keys(this.activeTouches).length;for(let i=0,len=e.changedTouches.length;i<len;i++){const touch=e.changedTouches.item(i);if(!this.activeTouches.hasOwnProperty(String(touch.identifier))){console.warn("move of an UNKNOWN touch",touch);continue}const data=this.activeTouches[touch.identifier],holdTime=Date.now()-data.initialTimeStamp;if(holdTime<Gesture.HOLD_DELAY&&Math.abs(data.initialPageX-arrays.tail(data.rollingPageX))<30&&Math.abs(data.initialPageY-arrays.tail(data.rollingPageY))<30){const evt=this.newGestureEvent(EventType.Tap,data.initialTarget);evt.pageX=arrays.tail(data.rollingPageX),evt.pageY=arrays.tail(data.rollingPageY),this.dispatchEvent(evt)}else if(holdTime>=Gesture.HOLD_DELAY&&Math.abs(data.initialPageX-arrays.tail(data.rollingPageX))<30&&Math.abs(data.initialPageY-arrays.tail(data.rollingPageY))<30){const evt=this.newGestureEvent(EventType.Contextmenu,data.initialTarget);evt.pageX=arrays.tail(data.rollingPageX),evt.pageY=arrays.tail(data.rollingPageY),this.dispatchEvent(evt)}else if(1===activeTouchCount){const finalX=arrays.tail(data.rollingPageX),finalY=arrays.tail(data.rollingPageY),deltaT=arrays.tail(data.rollingTimestamps)-data.rollingTimestamps[0],deltaX=finalX-data.rollingPageX[0],deltaY=finalY-data.rollingPageY[0],dispatchTo=this.targets.filter((t=>data.initialTarget instanceof Node&&t.contains(data.initialTarget)));this.inertia(dispatchTo,timestamp,Math.abs(deltaX)/deltaT,deltaX>0?1:-1,finalX,Math.abs(deltaY)/deltaT,deltaY>0?1:-1,finalY)}this.dispatchEvent(this.newGestureEvent(EventType.End,data.initialTarget)),delete this.activeTouches[touch.identifier]}this.dispatched&&(e.preventDefault(),e.stopPropagation(),this.dispatched=!1)}newGestureEvent(type,initialTarget){const event=document.createEvent("CustomEvent");return event.initEvent(type,!1,!0),event.initialTarget=initialTarget,event.tapCount=0,event}dispatchEvent(event){if(event.type===EventType.Tap){const currentTime=(new Date).getTime();let setTapCount=0;setTapCount=currentTime-this._lastSetTapCountTime>Gesture.CLEAR_TAP_COUNT_TIME?1:2,this._lastSetTapCountTime=currentTime,event.tapCount=setTapCount}else event.type!==EventType.Change&&event.type!==EventType.Contextmenu||(this._lastSetTapCountTime=0);for(let i=0;i<this.ignoreTargets.length;i++)if(event.initialTarget instanceof Node&&this.ignoreTargets[i].contains(event.initialTarget))return;this.targets.forEach((target=>{event.initialTarget instanceof Node&&target.contains(event.initialTarget)&&(target.dispatchEvent(event),this.dispatched=!0)}))}inertia(dispatchTo,t1,vX,dirX,x,vY,dirY,y){this.handle=DomUtils.scheduleAtNextAnimationFrame((()=>{const now=Date.now(),deltaT=now-t1;let delta_pos_x=0,delta_pos_y=0,stopped=!0;vX+=Gesture.SCROLL_FRICTION*deltaT,vY+=Gesture.SCROLL_FRICTION*deltaT,vX>0&&(stopped=!1,delta_pos_x=dirX*vX*deltaT),vY>0&&(stopped=!1,delta_pos_y=dirY*vY*deltaT);const evt=this.newGestureEvent(EventType.Change);evt.translationX=delta_pos_x,evt.translationY=delta_pos_y,dispatchTo.forEach((d=>d.dispatchEvent(evt))),stopped||this.inertia(dispatchTo,now,vX,dirX,x+delta_pos_x,vY,dirY,y+delta_pos_y)}))}onTouchMove(e){const timestamp=Date.now();for(let i=0,len=e.changedTouches.length;i<len;i++){const touch=e.changedTouches.item(i);if(!this.activeTouches.hasOwnProperty(String(touch.identifier))){console.warn("end of an UNKNOWN touch",touch);continue}const data=this.activeTouches[touch.identifier],evt=this.newGestureEvent(EventType.Change,data.initialTarget);evt.translationX=touch.pageX-arrays.tail(data.rollingPageX),evt.translationY=touch.pageY-arrays.tail(data.rollingPageY),evt.pageX=touch.pageX,evt.pageY=touch.pageY,this.dispatchEvent(evt),data.rollingPageX.length>3&&(data.rollingPageX.shift(),data.rollingPageY.shift(),data.rollingTimestamps.shift()),data.rollingPageX.push(touch.pageX),data.rollingPageY.push(touch.pageY),data.rollingTimestamps.push(timestamp)}this.dispatched&&(e.preventDefault(),e.stopPropagation(),this.dispatched=!1)}}Gesture.SCROLL_FRICTION=-.005,Gesture.HOLD_DELAY=700,Gesture.CLEAR_TAP_COUNT_TIME=400,__decorate([memoize],Gesture,"isTouchDevice",null);