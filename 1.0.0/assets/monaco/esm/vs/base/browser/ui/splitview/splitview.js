import{$,addDisposableListener,append,scheduleAtNextAnimationFrame}from"../../dom.js";import{Sash}from"../sash/sash.js";import{SmoothScrollableElement}from"../scrollbar/scrollableElement.js";import{pushToEnd,pushToStart,range}from"../../../common/arrays.js";import{Color}from"../../../common/color.js";import{Emitter,Event}from"../../../common/event.js";import{combinedDisposable,Disposable,dispose,toDisposable}from"../../../common/lifecycle.js";import{clamp}from"../../../common/numbers.js";import{Scrollable}from"../../../common/scrollable.js";import*as types from"../../../common/types.js";import"./splitview.css";const defaultStyles={separatorBorder:Color.transparent};class ViewItem{constructor(container,view,size,disposable){this.container=container,this.view=view,this.disposable=disposable,this._cachedVisibleSize=void 0,"number"==typeof size?(this._size=size,this._cachedVisibleSize=void 0,container.classList.add("visible")):(this._size=0,this._cachedVisibleSize=size.cachedVisibleSize)}set size(size){this._size=size}get size(){return this._size}get visible(){return void 0===this._cachedVisibleSize}setVisible(visible,size){var _a,_b;visible!==this.visible&&(visible?(this.size=clamp(this._cachedVisibleSize,this.viewMinimumSize,this.viewMaximumSize),this._cachedVisibleSize=void 0):(this._cachedVisibleSize="number"==typeof size?size:this.size,this.size=0),this.container.classList.toggle("visible",visible),null===(_b=(_a=this.view).setVisible)||void 0===_b||_b.call(_a,visible))}get minimumSize(){return this.visible?this.view.minimumSize:0}get viewMinimumSize(){return this.view.minimumSize}get maximumSize(){return this.visible?this.view.maximumSize:0}get viewMaximumSize(){return this.view.maximumSize}get priority(){return this.view.priority}get snap(){return!!this.view.snap}set enabled(enabled){this.container.style.pointerEvents=enabled?"":"none"}layout(offset,layoutContext){this.layoutContainer(offset),this.view.layout(this.size,offset,layoutContext)}dispose(){return this.disposable.dispose(),this.view}}class VerticalViewItem extends ViewItem{layoutContainer(offset){this.container.style.top=`${offset}px`,this.container.style.height=`${this.size}px`}}class HorizontalViewItem extends ViewItem{layoutContainer(offset){this.container.style.left=`${offset}px`,this.container.style.width=`${this.size}px`}}var State;!function(State){State[State.Idle=0]="Idle",State[State.Busy=1]="Busy"}(State||(State={}));export var Sizing;!function(Sizing){Sizing.Distribute={type:"distribute"},Sizing.Split=function Split(index){return{type:"split",index}},Sizing.Invisible=function Invisible(cachedVisibleSize){return{type:"invisible",cachedVisibleSize}}}(Sizing||(Sizing={}));export class SplitView extends Disposable{constructor(container,options={}){var _a,_b,_c,_d,_e;super(),this.size=0,this.contentSize=0,this.proportions=void 0,this.viewItems=[],this.sashItems=[],this.state=State.Idle,this._onDidSashChange=this._register(new Emitter),this._onDidSashReset=this._register(new Emitter),this._startSnappingEnabled=!0,this._endSnappingEnabled=!0,this.onDidSashChange=this._onDidSashChange.event,this.onDidSashReset=this._onDidSashReset.event,this.orientation=null!==(_a=options.orientation)&&void 0!==_a?_a:0,this.inverseAltBehavior=null!==(_b=options.inverseAltBehavior)&&void 0!==_b&&_b,this.proportionalLayout=null===(_c=options.proportionalLayout)||void 0===_c||_c,this.getSashOrthogonalSize=options.getSashOrthogonalSize,this.el=document.createElement("div"),this.el.classList.add("monaco-split-view2"),this.el.classList.add(0===this.orientation?"vertical":"horizontal"),container.appendChild(this.el),this.sashContainer=append(this.el,$(".sash-container")),this.viewContainer=$(".split-view-container"),this.scrollable=new Scrollable({forceIntegerValues:!0,smoothScrollDuration:125,scheduleAtNextAnimationFrame}),this.scrollableElement=this._register(new SmoothScrollableElement(this.viewContainer,{vertical:0===this.orientation?null!==(_d=options.scrollbarVisibility)&&void 0!==_d?_d:1:2,horizontal:1===this.orientation?null!==(_e=options.scrollbarVisibility)&&void 0!==_e?_e:1:2},this.scrollable)),this.onDidScroll=this.scrollableElement.onScroll,this._register(this.onDidScroll((e=>{this.viewContainer.scrollTop=e.scrollTop,this.viewContainer.scrollLeft=e.scrollLeft}))),append(this.el,this.scrollableElement.getDomNode()),this.style(options.styles||defaultStyles),options.descriptor&&(this.size=options.descriptor.size,options.descriptor.views.forEach(((viewDescriptor,index)=>{const sizing=types.isUndefined(viewDescriptor.visible)||viewDescriptor.visible?viewDescriptor.size:{type:"invisible",cachedVisibleSize:viewDescriptor.size},view=viewDescriptor.view;this.doAddView(view,sizing,index,!0)})),this.contentSize=this.viewItems.reduce(((r,i)=>r+i.size),0),this.saveProportions())}get orthogonalStartSash(){return this._orthogonalStartSash}get orthogonalEndSash(){return this._orthogonalEndSash}get startSnappingEnabled(){return this._startSnappingEnabled}get endSnappingEnabled(){return this._endSnappingEnabled}set orthogonalStartSash(sash){for(const sashItem of this.sashItems)sashItem.sash.orthogonalStartSash=sash;this._orthogonalStartSash=sash}set orthogonalEndSash(sash){for(const sashItem of this.sashItems)sashItem.sash.orthogonalEndSash=sash;this._orthogonalEndSash=sash}set startSnappingEnabled(startSnappingEnabled){this._startSnappingEnabled!==startSnappingEnabled&&(this._startSnappingEnabled=startSnappingEnabled,this.updateSashEnablement())}set endSnappingEnabled(endSnappingEnabled){this._endSnappingEnabled!==endSnappingEnabled&&(this._endSnappingEnabled=endSnappingEnabled,this.updateSashEnablement())}style(styles){styles.separatorBorder.isTransparent()?(this.el.classList.remove("separator-border"),this.el.style.removeProperty("--separator-border")):(this.el.classList.add("separator-border"),this.el.style.setProperty("--separator-border",styles.separatorBorder.toString()))}addView(view,size,index=this.viewItems.length,skipLayout){this.doAddView(view,size,index,skipLayout)}layout(size,layoutContext){const previousSize=Math.max(this.size,this.contentSize);if(this.size=size,this.layoutContext=layoutContext,this.proportions)for(let i=0;i<this.viewItems.length;i++){const item=this.viewItems[i];item.size=clamp(Math.round(this.proportions[i]*size),item.minimumSize,item.maximumSize)}else{const indexes=range(this.viewItems.length),lowPriorityIndexes=indexes.filter((i=>1===this.viewItems[i].priority)),highPriorityIndexes=indexes.filter((i=>2===this.viewItems[i].priority));this.resize(this.viewItems.length-1,size-previousSize,void 0,lowPriorityIndexes,highPriorityIndexes)}this.distributeEmptySpace(),this.layoutViews()}saveProportions(){this.proportionalLayout&&this.contentSize>0&&(this.proportions=this.viewItems.map((i=>i.size/this.contentSize)))}onSashStart({sash,start,alt}){for(const item of this.viewItems)item.enabled=!1;const index=this.sashItems.findIndex((item=>item.sash===sash)),disposable=combinedDisposable(addDisposableListener(document.body,"keydown",(e=>resetSashDragState(this.sashDragState.current,e.altKey))),addDisposableListener(document.body,"keyup",(()=>resetSashDragState(this.sashDragState.current,!1)))),resetSashDragState=(start,alt)=>{const sizes=this.viewItems.map((i=>i.size));let snapBefore,snapAfter,minDelta=Number.NEGATIVE_INFINITY,maxDelta=Number.POSITIVE_INFINITY;if(this.inverseAltBehavior&&(alt=!alt),alt){if(index===this.sashItems.length-1){const viewItem=this.viewItems[index];minDelta=(viewItem.minimumSize-viewItem.size)/2,maxDelta=(viewItem.maximumSize-viewItem.size)/2}else{const viewItem=this.viewItems[index+1];minDelta=(viewItem.size-viewItem.maximumSize)/2,maxDelta=(viewItem.size-viewItem.minimumSize)/2}}if(!alt){const upIndexes=range(index,-1),downIndexes=range(index+1,this.viewItems.length),minDeltaUp=upIndexes.reduce(((r,i)=>r+(this.viewItems[i].minimumSize-sizes[i])),0),maxDeltaUp=upIndexes.reduce(((r,i)=>r+(this.viewItems[i].viewMaximumSize-sizes[i])),0),maxDeltaDown=0===downIndexes.length?Number.POSITIVE_INFINITY:downIndexes.reduce(((r,i)=>r+(sizes[i]-this.viewItems[i].minimumSize)),0),minDeltaDown=0===downIndexes.length?Number.NEGATIVE_INFINITY:downIndexes.reduce(((r,i)=>r+(sizes[i]-this.viewItems[i].viewMaximumSize)),0),minDelta=Math.max(minDeltaUp,minDeltaDown),maxDelta=Math.min(maxDeltaDown,maxDeltaUp),snapBeforeIndex=this.findFirstSnapIndex(upIndexes),snapAfterIndex=this.findFirstSnapIndex(downIndexes);if("number"==typeof snapBeforeIndex){const viewItem=this.viewItems[snapBeforeIndex],halfSize=Math.floor(viewItem.viewMinimumSize/2);snapBefore={index:snapBeforeIndex,limitDelta:viewItem.visible?minDelta-halfSize:minDelta+halfSize,size:viewItem.size}}if("number"==typeof snapAfterIndex){const viewItem=this.viewItems[snapAfterIndex],halfSize=Math.floor(viewItem.viewMinimumSize/2);snapAfter={index:snapAfterIndex,limitDelta:viewItem.visible?maxDelta+halfSize:maxDelta-halfSize,size:viewItem.size}}}this.sashDragState={start,current:start,index,sizes,minDelta,maxDelta,alt,snapBefore,snapAfter,disposable}};resetSashDragState(start,alt)}onSashChange({current}){const{index,start,sizes,alt,minDelta,maxDelta,snapBefore,snapAfter}=this.sashDragState;this.sashDragState.current=current;const delta=current-start,newDelta=this.resize(index,delta,sizes,void 0,void 0,minDelta,maxDelta,snapBefore,snapAfter);if(alt){const isLastSash=index===this.sashItems.length-1,newSizes=this.viewItems.map((i=>i.size)),viewItemIndex=isLastSash?index:index+1,viewItem=this.viewItems[viewItemIndex],newMinDelta=viewItem.size-viewItem.maximumSize,newMaxDelta=viewItem.size-viewItem.minimumSize,resizeIndex=isLastSash?index-1:index+1;this.resize(resizeIndex,-newDelta,newSizes,void 0,void 0,newMinDelta,newMaxDelta)}this.distributeEmptySpace(),this.layoutViews()}onSashEnd(index){this._onDidSashChange.fire(index),this.sashDragState.disposable.dispose(),this.saveProportions();for(const item of this.viewItems)item.enabled=!0}onViewChange(item,size){const index=this.viewItems.indexOf(item);index<0||index>=this.viewItems.length||(size="number"==typeof size?size:item.size,size=clamp(size,item.minimumSize,item.maximumSize),this.inverseAltBehavior&&index>0?(this.resize(index-1,Math.floor((item.size-size)/2)),this.distributeEmptySpace(),this.layoutViews()):(item.size=size,this.relayout([index],void 0)))}resizeView(index,size){if(this.state!==State.Idle)throw new Error("Cant modify splitview");if(this.state=State.Busy,index<0||index>=this.viewItems.length)return;const indexes=range(this.viewItems.length).filter((i=>i!==index)),lowPriorityIndexes=[...indexes.filter((i=>1===this.viewItems[i].priority)),index],highPriorityIndexes=indexes.filter((i=>2===this.viewItems[i].priority)),item=this.viewItems[index];size=Math.round(size),size=clamp(size,item.minimumSize,Math.min(item.maximumSize,this.size)),item.size=size,this.relayout(lowPriorityIndexes,highPriorityIndexes),this.state=State.Idle}distributeViewSizes(){const flexibleViewItems=[];let flexibleSize=0;for(const item of this.viewItems)item.maximumSize-item.minimumSize>0&&(flexibleViewItems.push(item),flexibleSize+=item.size);const size=Math.floor(flexibleSize/flexibleViewItems.length);for(const item of flexibleViewItems)item.size=clamp(size,item.minimumSize,item.maximumSize);const indexes=range(this.viewItems.length),lowPriorityIndexes=indexes.filter((i=>1===this.viewItems[i].priority)),highPriorityIndexes=indexes.filter((i=>2===this.viewItems[i].priority));this.relayout(lowPriorityIndexes,highPriorityIndexes)}getViewSize(index){return index<0||index>=this.viewItems.length?-1:this.viewItems[index].size}doAddView(view,size,index=this.viewItems.length,skipLayout){if(this.state!==State.Idle)throw new Error("Cant modify splitview");this.state=State.Busy;const container=$(".split-view-view");index===this.viewItems.length?this.viewContainer.appendChild(container):this.viewContainer.insertBefore(container,this.viewContainer.children.item(index));const onChangeDisposable=view.onDidChange((size=>this.onViewChange(item,size))),containerDisposable=toDisposable((()=>this.viewContainer.removeChild(container))),disposable=combinedDisposable(onChangeDisposable,containerDisposable);let viewSize;viewSize="number"==typeof size?size:"split"===size.type?this.getViewSize(size.index)/2:"invisible"===size.type?{cachedVisibleSize:size.cachedVisibleSize}:view.minimumSize;const item=0===this.orientation?new VerticalViewItem(container,view,viewSize,disposable):new HorizontalViewItem(container,view,viewSize,disposable);if(this.viewItems.splice(index,0,item),this.viewItems.length>1){const opts={orthogonalStartSash:this.orthogonalStartSash,orthogonalEndSash:this.orthogonalEndSash},sash=0===this.orientation?new Sash(this.sashContainer,{getHorizontalSashTop:s=>this.getSashPosition(s),getHorizontalSashWidth:this.getSashOrthogonalSize},Object.assign(Object.assign({},opts),{orientation:1})):new Sash(this.sashContainer,{getVerticalSashLeft:s=>this.getSashPosition(s),getVerticalSashHeight:this.getSashOrthogonalSize},Object.assign(Object.assign({},opts),{orientation:0})),sashEventMapper=0===this.orientation?e=>({sash,start:e.startY,current:e.currentY,alt:e.altKey}):e=>({sash,start:e.startX,current:e.currentX,alt:e.altKey}),onStartDisposable=Event.map(sash.onDidStart,sashEventMapper)(this.onSashStart,this),onChangeDisposable=Event.map(sash.onDidChange,sashEventMapper)(this.onSashChange,this),onEnd=Event.map(sash.onDidEnd,(()=>this.sashItems.findIndex((item=>item.sash===sash)))),onEndDisposable=onEnd(this.onSashEnd,this),onDidResetDisposable=sash.onDidReset((()=>{const index=this.sashItems.findIndex((item=>item.sash===sash)),upIndexes=range(index,-1),downIndexes=range(index+1,this.viewItems.length),snapBeforeIndex=this.findFirstSnapIndex(upIndexes),snapAfterIndex=this.findFirstSnapIndex(downIndexes);("number"!=typeof snapBeforeIndex||this.viewItems[snapBeforeIndex].visible)&&("number"!=typeof snapAfterIndex||this.viewItems[snapAfterIndex].visible)&&this._onDidSashReset.fire(index)})),disposable=combinedDisposable(onStartDisposable,onChangeDisposable,onEndDisposable,onDidResetDisposable,sash),sashItem={sash,disposable};this.sashItems.splice(index-1,0,sashItem)}let highPriorityIndexes;container.appendChild(view.element),"number"!=typeof size&&"split"===size.type&&(highPriorityIndexes=[size.index]),skipLayout||this.relayout([index],highPriorityIndexes),this.state=State.Idle,skipLayout||"number"==typeof size||"distribute"!==size.type||this.distributeViewSizes()}relayout(lowPriorityIndexes,highPriorityIndexes){const contentSize=this.viewItems.reduce(((r,i)=>r+i.size),0);this.resize(this.viewItems.length-1,this.size-contentSize,void 0,lowPriorityIndexes,highPriorityIndexes),this.distributeEmptySpace(),this.layoutViews(),this.saveProportions()}resize(index,delta,sizes=this.viewItems.map((i=>i.size)),lowPriorityIndexes,highPriorityIndexes,overloadMinDelta=Number.NEGATIVE_INFINITY,overloadMaxDelta=Number.POSITIVE_INFINITY,snapBefore,snapAfter){if(index<0||index>=this.viewItems.length)return 0;const upIndexes=range(index,-1),downIndexes=range(index+1,this.viewItems.length);if(highPriorityIndexes)for(const index of highPriorityIndexes)pushToStart(upIndexes,index),pushToStart(downIndexes,index);if(lowPriorityIndexes)for(const index of lowPriorityIndexes)pushToEnd(upIndexes,index),pushToEnd(downIndexes,index);const upItems=upIndexes.map((i=>this.viewItems[i])),upSizes=upIndexes.map((i=>sizes[i])),downItems=downIndexes.map((i=>this.viewItems[i])),downSizes=downIndexes.map((i=>sizes[i])),minDeltaUp=upIndexes.reduce(((r,i)=>r+(this.viewItems[i].minimumSize-sizes[i])),0),maxDeltaUp=upIndexes.reduce(((r,i)=>r+(this.viewItems[i].maximumSize-sizes[i])),0),maxDeltaDown=0===downIndexes.length?Number.POSITIVE_INFINITY:downIndexes.reduce(((r,i)=>r+(sizes[i]-this.viewItems[i].minimumSize)),0),minDeltaDown=0===downIndexes.length?Number.NEGATIVE_INFINITY:downIndexes.reduce(((r,i)=>r+(sizes[i]-this.viewItems[i].maximumSize)),0),minDelta=Math.max(minDeltaUp,minDeltaDown,overloadMinDelta),maxDelta=Math.min(maxDeltaDown,maxDeltaUp,overloadMaxDelta);let snapped=!1;if(snapBefore){const snapView=this.viewItems[snapBefore.index],visible=delta>=snapBefore.limitDelta;snapped=visible!==snapView.visible,snapView.setVisible(visible,snapBefore.size)}if(!snapped&&snapAfter){const snapView=this.viewItems[snapAfter.index],visible=delta<snapAfter.limitDelta;snapped=visible!==snapView.visible,snapView.setVisible(visible,snapAfter.size)}if(snapped)return this.resize(index,delta,sizes,lowPriorityIndexes,highPriorityIndexes,overloadMinDelta,overloadMaxDelta);for(let i=0,deltaUp=delta=clamp(delta,minDelta,maxDelta);i<upItems.length;i++){const item=upItems[i],size=clamp(upSizes[i]+deltaUp,item.minimumSize,item.maximumSize);deltaUp-=size-upSizes[i],item.size=size}for(let i=0,deltaDown=delta;i<downItems.length;i++){const item=downItems[i],size=clamp(downSizes[i]-deltaDown,item.minimumSize,item.maximumSize);deltaDown+=size-downSizes[i],item.size=size}return delta}distributeEmptySpace(lowPriorityIndex){const contentSize=this.viewItems.reduce(((r,i)=>r+i.size),0);let emptyDelta=this.size-contentSize;const indexes=range(this.viewItems.length-1,-1),lowPriorityIndexes=indexes.filter((i=>1===this.viewItems[i].priority)),highPriorityIndexes=indexes.filter((i=>2===this.viewItems[i].priority));for(const index of highPriorityIndexes)pushToStart(indexes,index);for(const index of lowPriorityIndexes)pushToEnd(indexes,index);"number"==typeof lowPriorityIndex&&pushToEnd(indexes,lowPriorityIndex);for(let i=0;0!==emptyDelta&&i<indexes.length;i++){const item=this.viewItems[indexes[i]],size=clamp(item.size+emptyDelta,item.minimumSize,item.maximumSize);emptyDelta-=size-item.size,item.size=size}}layoutViews(){this.contentSize=this.viewItems.reduce(((r,i)=>r+i.size),0);let offset=0;for(const viewItem of this.viewItems)viewItem.layout(offset,this.layoutContext),offset+=viewItem.size;this.sashItems.forEach((item=>item.sash.layout())),this.updateSashEnablement(),this.updateScrollableElement()}updateScrollableElement(){0===this.orientation?this.scrollableElement.setScrollDimensions({height:this.size,scrollHeight:this.contentSize}):this.scrollableElement.setScrollDimensions({width:this.size,scrollWidth:this.contentSize})}updateSashEnablement(){let previous=!1;const collapsesDown=this.viewItems.map((i=>previous=i.size-i.minimumSize>0||previous));previous=!1;const expandsDown=this.viewItems.map((i=>previous=i.maximumSize-i.size>0||previous)),reverseViews=[...this.viewItems].reverse();previous=!1;const collapsesUp=reverseViews.map((i=>previous=i.size-i.minimumSize>0||previous)).reverse();previous=!1;const expandsUp=reverseViews.map((i=>previous=i.maximumSize-i.size>0||previous)).reverse();let position=0;for(let index=0;index<this.sashItems.length;index++){const{sash}=this.sashItems[index];position+=this.viewItems[index].size;const min=!(collapsesDown[index]&&expandsUp[index+1]),max=!(expandsDown[index]&&collapsesUp[index+1]);if(min&&max){const upIndexes=range(index,-1),downIndexes=range(index+1,this.viewItems.length),snapBeforeIndex=this.findFirstSnapIndex(upIndexes),snapAfterIndex=this.findFirstSnapIndex(downIndexes),snappedBefore="number"==typeof snapBeforeIndex&&!this.viewItems[snapBeforeIndex].visible,snappedAfter="number"==typeof snapAfterIndex&&!this.viewItems[snapAfterIndex].visible;snappedBefore&&collapsesUp[index]&&(position>0||this.startSnappingEnabled)?sash.state=1:snappedAfter&&collapsesDown[index]&&(position<this.contentSize||this.endSnappingEnabled)?sash.state=2:sash.state=0}else sash.state=min&&!max?1:!min&&max?2:3}}getSashPosition(sash){let position=0;for(let i=0;i<this.sashItems.length;i++)if(position+=this.viewItems[i].size,this.sashItems[i].sash===sash)return position;return 0}findFirstSnapIndex(indexes){for(const index of indexes){const viewItem=this.viewItems[index];if(viewItem.visible&&viewItem.snap)return index}for(const index of indexes){const viewItem=this.viewItems[index];if(viewItem.visible&&viewItem.maximumSize-viewItem.minimumSize>0)return;if(!viewItem.visible&&viewItem.snap)return index}}dispose(){super.dispose(),dispose(this.viewItems),this.viewItems=[],this.sashItems.forEach((i=>i.disposable.dispose())),this.sashItems=[]}}