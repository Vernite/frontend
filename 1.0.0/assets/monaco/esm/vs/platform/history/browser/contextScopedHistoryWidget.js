var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}};import{FindInput}from"../../../base/browser/ui/findinput/findInput.js";import{ReplaceInput}from"../../../base/browser/ui/findinput/replaceInput.js";import{ContextKeyExpr,IContextKeyService,RawContextKey}from"../../contextkey/common/contextkey.js";import{KeybindingsRegistry}from"../../keybinding/common/keybindingsRegistry.js";import{localize}from"../../../nls.js";import{DisposableStore,toDisposable}from"../../../base/common/lifecycle.js";export const historyNavigationVisible=new RawContextKey("suggestWidgetVisible",!1,localize("suggestWidgetVisible","Whether suggestion are visible"));const HistoryNavigationWidgetFocusContext="historyNavigationWidgetFocus",HistoryNavigationForwardsEnablementContext="historyNavigationForwardsEnabled",HistoryNavigationBackwardsEnablementContext="historyNavigationBackwardsEnabled";let lastFocusedWidget;const widgets=[];export function registerAndCreateHistoryNavigationContext(contextKeyService,widget){if(widgets.includes(widget))throw new Error("Cannot register the same widget multiple times");widgets.push(widget);const disposableStore=new DisposableStore,scopedContextKeyService=disposableStore.add(contextKeyService.createScoped(widget.element)),historyNavigationWidgetFocus=new RawContextKey("historyNavigationWidgetFocus",!1).bindTo(scopedContextKeyService),historyNavigationForwardsEnablement=new RawContextKey("historyNavigationForwardsEnabled",!0).bindTo(scopedContextKeyService),historyNavigationBackwardsEnablement=new RawContextKey("historyNavigationBackwardsEnabled",!0).bindTo(scopedContextKeyService),onDidFocus=()=>{historyNavigationWidgetFocus.set(!0),lastFocusedWidget=widget},onDidBlur=()=>{historyNavigationWidgetFocus.set(!1),lastFocusedWidget===widget&&(lastFocusedWidget=void 0)};return widget.element===document.activeElement&&onDidFocus(),disposableStore.add(widget.onDidFocus((()=>onDidFocus()))),disposableStore.add(widget.onDidBlur((()=>onDidBlur()))),disposableStore.add(toDisposable((()=>{widgets.splice(widgets.indexOf(widget),1),onDidBlur()}))),{scopedContextKeyService,historyNavigationForwardsEnablement,historyNavigationBackwardsEnablement,dispose(){disposableStore.dispose()}}}let ContextScopedFindInput=class ContextScopedFindInput extends FindInput{constructor(container,contextViewProvider,options,contextKeyService,showFindOptions=!1){super(container,contextViewProvider,showFindOptions,options),this._register(registerAndCreateHistoryNavigationContext(contextKeyService,this.inputBox))}};ContextScopedFindInput=__decorate([__param(3,IContextKeyService)],ContextScopedFindInput);export{ContextScopedFindInput};let ContextScopedReplaceInput=class ContextScopedReplaceInput extends ReplaceInput{constructor(container,contextViewProvider,options,contextKeyService,showReplaceOptions=!1){super(container,contextViewProvider,showReplaceOptions,options),this._register(registerAndCreateHistoryNavigationContext(contextKeyService,this.inputBox))}};ContextScopedReplaceInput=__decorate([__param(3,IContextKeyService)],ContextScopedReplaceInput);export{ContextScopedReplaceInput};KeybindingsRegistry.registerCommandAndKeybindingRule({id:"history.showPrevious",weight:200,when:ContextKeyExpr.and(ContextKeyExpr.has("historyNavigationWidgetFocus"),ContextKeyExpr.equals("historyNavigationBackwardsEnabled",!0),historyNavigationVisible.isEqualTo(!1)),primary:16,secondary:[528],handler:accessor=>{lastFocusedWidget&&lastFocusedWidget.showPreviousValue()}}),KeybindingsRegistry.registerCommandAndKeybindingRule({id:"history.showNext",weight:200,when:ContextKeyExpr.and(ContextKeyExpr.has("historyNavigationWidgetFocus"),ContextKeyExpr.equals("historyNavigationForwardsEnabled",!0),historyNavigationVisible.isEqualTo(!1)),primary:18,secondary:[530],handler:accessor=>{lastFocusedWidget&&lastFocusedWidget.showNextValue()}});