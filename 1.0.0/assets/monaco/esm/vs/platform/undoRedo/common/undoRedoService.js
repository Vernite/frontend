var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{onUnexpectedError}from"../../../base/common/errors.js";import{Disposable,isDisposable}from"../../../base/common/lifecycle.js";import{Schemas}from"../../../base/common/network.js";import Severity from"../../../base/common/severity.js";import*as nls from"../../../nls.js";import{IDialogService}from"../../dialogs/common/dialogs.js";import{registerSingleton}from"../../instantiation/common/extensions.js";import{INotificationService}from"../../notification/common/notification.js";import{IUndoRedoService,ResourceEditStackSnapshot,UndoRedoGroup,UndoRedoSource}from"./undoRedo.js";const DEBUG=!1;function getResourceLabel(resource){return resource.scheme===Schemas.file?resource.fsPath:resource.path}let stackElementCounter=0;class ResourceStackElement{constructor(actual,resourceLabel,strResource,groupId,groupOrder,sourceId,sourceOrder){this.id=++stackElementCounter,this.type=0,this.actual=actual,this.label=actual.label,this.confirmBeforeUndo=actual.confirmBeforeUndo||!1,this.resourceLabel=resourceLabel,this.strResource=strResource,this.resourceLabels=[this.resourceLabel],this.strResources=[this.strResource],this.groupId=groupId,this.groupOrder=groupOrder,this.sourceId=sourceId,this.sourceOrder=sourceOrder,this.isValid=!0}setValid(isValid){this.isValid=isValid}toString(){return`[id:${this.id}] [group:${this.groupId}] [${this.isValid?"  VALID":"INVALID"}] ${this.actual.constructor.name} - ${this.actual}`}}class ResourceReasonPair{constructor(resourceLabel,reason){this.resourceLabel=resourceLabel,this.reason=reason}}class RemovedResources{constructor(){this.elements=new Map}createMessage(){const externalRemoval=[],noParallelUniverses=[];for(const[,element]of this.elements){(0===element.reason?externalRemoval:noParallelUniverses).push(element.resourceLabel)}const messages=[];return externalRemoval.length>0&&messages.push(nls.localize({key:"externalRemoval",comment:["{0} is a list of filenames"]},"The following files have been closed and modified on disk: {0}.",externalRemoval.join(", "))),noParallelUniverses.length>0&&messages.push(nls.localize({key:"noParallelUniverses",comment:["{0} is a list of filenames"]},"The following files have been modified in an incompatible way: {0}.",noParallelUniverses.join(", "))),messages.join("\n")}get size(){return this.elements.size}has(strResource){return this.elements.has(strResource)}set(strResource,value){this.elements.set(strResource,value)}delete(strResource){return this.elements.delete(strResource)}}class WorkspaceStackElement{constructor(actual,resourceLabels,strResources,groupId,groupOrder,sourceId,sourceOrder){this.id=++stackElementCounter,this.type=1,this.actual=actual,this.label=actual.label,this.confirmBeforeUndo=actual.confirmBeforeUndo||!1,this.resourceLabels=resourceLabels,this.strResources=strResources,this.groupId=groupId,this.groupOrder=groupOrder,this.sourceId=sourceId,this.sourceOrder=sourceOrder,this.removedResources=null,this.invalidatedResources=null}canSplit(){return"function"==typeof this.actual.split}removeResource(resourceLabel,strResource,reason){this.removedResources||(this.removedResources=new RemovedResources),this.removedResources.has(strResource)||this.removedResources.set(strResource,new ResourceReasonPair(resourceLabel,reason))}setValid(resourceLabel,strResource,isValid){isValid?this.invalidatedResources&&(this.invalidatedResources.delete(strResource),0===this.invalidatedResources.size&&(this.invalidatedResources=null)):(this.invalidatedResources||(this.invalidatedResources=new RemovedResources),this.invalidatedResources.has(strResource)||this.invalidatedResources.set(strResource,new ResourceReasonPair(resourceLabel,0)))}toString(){return`[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources?"INVALID":"  VALID"}] ${this.actual.constructor.name} - ${this.actual}`}}class ResourceEditStack{constructor(resourceLabel,strResource){this.resourceLabel=resourceLabel,this.strResource=strResource,this._past=[],this._future=[],this.locked=!1,this.versionId=1}dispose(){for(const element of this._past)1===element.type&&element.removeResource(this.resourceLabel,this.strResource,0);for(const element of this._future)1===element.type&&element.removeResource(this.resourceLabel,this.strResource,0);this.versionId++}toString(){const result=[];result.push(`* ${this.strResource}:`);for(let i=0;i<this._past.length;i++)result.push(`   * [UNDO] ${this._past[i]}`);for(let i=this._future.length-1;i>=0;i--)result.push(`   * [REDO] ${this._future[i]}`);return result.join("\n")}flushAllElements(){this._past=[],this._future=[],this.versionId++}_setElementValidFlag(element,isValid){1===element.type?element.setValid(this.resourceLabel,this.strResource,isValid):element.setValid(isValid)}setElementsValidFlag(isValid,filter){for(const element of this._past)filter(element.actual)&&this._setElementValidFlag(element,isValid);for(const element of this._future)filter(element.actual)&&this._setElementValidFlag(element,isValid)}pushElement(element){for(const futureElement of this._future)1===futureElement.type&&futureElement.removeResource(this.resourceLabel,this.strResource,1);this._future=[],this._past.push(element),this.versionId++}createSnapshot(resource){const elements=[];for(let i=0,len=this._past.length;i<len;i++)elements.push(this._past[i].id);for(let i=this._future.length-1;i>=0;i--)elements.push(this._future[i].id);return new ResourceEditStackSnapshot(resource,elements)}restoreSnapshot(snapshot){const snapshotLength=snapshot.elements.length;let isOK=!0,snapshotIndex=0,removePastAfter=-1;for(let i=0,len=this._past.length;i<len;i++,snapshotIndex++){const element=this._past[i];isOK&&(snapshotIndex>=snapshotLength||element.id!==snapshot.elements[snapshotIndex])&&(isOK=!1,removePastAfter=0),isOK||1!==element.type||element.removeResource(this.resourceLabel,this.strResource,0)}let removeFutureBefore=-1;for(let i=this._future.length-1;i>=0;i--,snapshotIndex++){const element=this._future[i];isOK&&(snapshotIndex>=snapshotLength||element.id!==snapshot.elements[snapshotIndex])&&(isOK=!1,removeFutureBefore=i),isOK||1!==element.type||element.removeResource(this.resourceLabel,this.strResource,0)}-1!==removePastAfter&&(this._past=this._past.slice(0,removePastAfter)),-1!==removeFutureBefore&&(this._future=this._future.slice(removeFutureBefore+1)),this.versionId++}getElements(){const past=[],future=[];for(const element of this._past)past.push(element.actual);for(const element of this._future)future.push(element.actual);return{past,future}}getClosestPastElement(){return 0===this._past.length?null:this._past[this._past.length-1]}getSecondClosestPastElement(){return this._past.length<2?null:this._past[this._past.length-2]}getClosestFutureElement(){return 0===this._future.length?null:this._future[this._future.length-1]}hasPastElements(){return this._past.length>0}hasFutureElements(){return this._future.length>0}splitPastWorkspaceElement(toRemove,individualMap){for(let j=this._past.length-1;j>=0;j--)if(this._past[j]===toRemove){individualMap.has(this.strResource)?this._past[j]=individualMap.get(this.strResource):this._past.splice(j,1);break}this.versionId++}splitFutureWorkspaceElement(toRemove,individualMap){for(let j=this._future.length-1;j>=0;j--)if(this._future[j]===toRemove){individualMap.has(this.strResource)?this._future[j]=individualMap.get(this.strResource):this._future.splice(j,1);break}this.versionId++}moveBackward(element){this._past.pop(),this._future.push(element),this.versionId++}moveForward(element){this._future.pop(),this._past.push(element),this.versionId++}}class EditStackSnapshot{constructor(editStacks){this.editStacks=editStacks,this._versionIds=[];for(let i=0,len=this.editStacks.length;i<len;i++)this._versionIds[i]=this.editStacks[i].versionId}isValid(){for(let i=0,len=this.editStacks.length;i<len;i++)if(this._versionIds[i]!==this.editStacks[i].versionId)return!1;return!0}}const missingEditStack=new ResourceEditStack("","");missingEditStack.locked=!0;let UndoRedoService=class UndoRedoService{constructor(_dialogService,_notificationService){this._dialogService=_dialogService,this._notificationService=_notificationService,this._editStacks=new Map,this._uriComparisonKeyComputers=[]}getUriComparisonKey(resource){for(const uriComparisonKeyComputer of this._uriComparisonKeyComputers)if(uriComparisonKeyComputer[0]===resource.scheme)return uriComparisonKeyComputer[1].getComparisonKey(resource);return resource.toString()}_print(label){console.log("------------------------------------"),console.log(`AFTER ${label}: `);const str=[];for(const element of this._editStacks)str.push(element[1].toString());console.log(str.join("\n"))}pushElement(element,group=UndoRedoGroup.None,source=UndoRedoSource.None){if(0===element.type){const resourceLabel=getResourceLabel(element.resource),strResource=this.getUriComparisonKey(element.resource);this._pushElement(new ResourceStackElement(element,resourceLabel,strResource,group.id,group.nextOrder(),source.id,source.nextOrder()))}else{const seen=new Set,resourceLabels=[],strResources=[];for(const resource of element.resources){const resourceLabel=getResourceLabel(resource),strResource=this.getUriComparisonKey(resource);seen.has(strResource)||(seen.add(strResource),resourceLabels.push(resourceLabel),strResources.push(strResource))}1===resourceLabels.length?this._pushElement(new ResourceStackElement(element,resourceLabels[0],strResources[0],group.id,group.nextOrder(),source.id,source.nextOrder())):this._pushElement(new WorkspaceStackElement(element,resourceLabels,strResources,group.id,group.nextOrder(),source.id,source.nextOrder()))}}_pushElement(element){for(let i=0,len=element.strResources.length;i<len;i++){const resourceLabel=element.resourceLabels[i],strResource=element.strResources[i];let editStack;this._editStacks.has(strResource)?editStack=this._editStacks.get(strResource):(editStack=new ResourceEditStack(resourceLabel,strResource),this._editStacks.set(strResource,editStack)),editStack.pushElement(element)}}getLastElement(resource){const strResource=this.getUriComparisonKey(resource);if(this._editStacks.has(strResource)){const editStack=this._editStacks.get(strResource);if(editStack.hasFutureElements())return null;const closestPastElement=editStack.getClosestPastElement();return closestPastElement?closestPastElement.actual:null}return null}_splitPastWorkspaceElement(toRemove,ignoreResources){const individualArr=toRemove.actual.split(),individualMap=new Map;for(const _element of individualArr){const resourceLabel=getResourceLabel(_element.resource),strResource=this.getUriComparisonKey(_element.resource),element=new ResourceStackElement(_element,resourceLabel,strResource,0,0,0,0);individualMap.set(element.strResource,element)}for(const strResource of toRemove.strResources){if(ignoreResources&&ignoreResources.has(strResource))continue;this._editStacks.get(strResource).splitPastWorkspaceElement(toRemove,individualMap)}}_splitFutureWorkspaceElement(toRemove,ignoreResources){const individualArr=toRemove.actual.split(),individualMap=new Map;for(const _element of individualArr){const resourceLabel=getResourceLabel(_element.resource),strResource=this.getUriComparisonKey(_element.resource),element=new ResourceStackElement(_element,resourceLabel,strResource,0,0,0,0);individualMap.set(element.strResource,element)}for(const strResource of toRemove.strResources){if(ignoreResources&&ignoreResources.has(strResource))continue;this._editStacks.get(strResource).splitFutureWorkspaceElement(toRemove,individualMap)}}removeElements(resource){const strResource="string"==typeof resource?resource:this.getUriComparisonKey(resource);if(this._editStacks.has(strResource)){this._editStacks.get(strResource).dispose(),this._editStacks.delete(strResource)}}setElementsValidFlag(resource,isValid,filter){const strResource=this.getUriComparisonKey(resource);if(this._editStacks.has(strResource)){this._editStacks.get(strResource).setElementsValidFlag(isValid,filter)}}createSnapshot(resource){const strResource=this.getUriComparisonKey(resource);if(this._editStacks.has(strResource)){return this._editStacks.get(strResource).createSnapshot(resource)}return new ResourceEditStackSnapshot(resource,[])}restoreSnapshot(snapshot){const strResource=this.getUriComparisonKey(snapshot.resource);if(this._editStacks.has(strResource)){const editStack=this._editStacks.get(strResource);editStack.restoreSnapshot(snapshot),editStack.hasPastElements()||editStack.hasFutureElements()||(editStack.dispose(),this._editStacks.delete(strResource))}}getElements(resource){const strResource=this.getUriComparisonKey(resource);if(this._editStacks.has(strResource)){return this._editStacks.get(strResource).getElements()}return{past:[],future:[]}}_findClosestUndoElementWithSource(sourceId){if(!sourceId)return[null,null];let matchedElement=null,matchedStrResource=null;for(const[strResource,editStack]of this._editStacks){const candidate=editStack.getClosestPastElement();candidate&&(candidate.sourceId===sourceId&&(!matchedElement||candidate.sourceOrder>matchedElement.sourceOrder)&&(matchedElement=candidate,matchedStrResource=strResource))}return[matchedElement,matchedStrResource]}canUndo(resourceOrSource){if(resourceOrSource instanceof UndoRedoSource){const[,matchedStrResource]=this._findClosestUndoElementWithSource(resourceOrSource.id);return!!matchedStrResource}const strResource=this.getUriComparisonKey(resourceOrSource);if(this._editStacks.has(strResource)){return this._editStacks.get(strResource).hasPastElements()}return!1}_onError(err,element){onUnexpectedError(err);for(const strResource of element.strResources)this.removeElements(strResource);this._notificationService.error(err)}_acquireLocks(editStackSnapshot){for(const editStack of editStackSnapshot.editStacks)if(editStack.locked)throw new Error("Cannot acquire edit stack lock");for(const editStack of editStackSnapshot.editStacks)editStack.locked=!0;return()=>{for(const editStack of editStackSnapshot.editStacks)editStack.locked=!1}}_safeInvokeWithLocks(element,invoke,editStackSnapshot,cleanup,continuation){const releaseLocks=this._acquireLocks(editStackSnapshot);let result;try{result=invoke()}catch(err){return releaseLocks(),cleanup.dispose(),this._onError(err,element)}return result?result.then((()=>(releaseLocks(),cleanup.dispose(),continuation())),(err=>(releaseLocks(),cleanup.dispose(),this._onError(err,element)))):(releaseLocks(),cleanup.dispose(),continuation())}_invokeWorkspacePrepare(element){return __awaiter(this,void 0,void 0,(function*(){if(void 0===element.actual.prepareUndoRedo)return Disposable.None;const result=element.actual.prepareUndoRedo();return void 0===result?Disposable.None:result}))}_invokeResourcePrepare(element,callback){if(1!==element.actual.type||void 0===element.actual.prepareUndoRedo)return callback(Disposable.None);const r=element.actual.prepareUndoRedo();return r?isDisposable(r)?callback(r):r.then((disposable=>callback(disposable))):callback(Disposable.None)}_getAffectedEditStacks(element){const affectedEditStacks=[];for(const strResource of element.strResources)affectedEditStacks.push(this._editStacks.get(strResource)||missingEditStack);return new EditStackSnapshot(affectedEditStacks)}_tryToSplitAndUndo(strResource,element,ignoreResources,message){if(element.canSplit())return this._splitPastWorkspaceElement(element,ignoreResources),this._notificationService.warn(message),new WorkspaceVerificationError(this._undo(strResource,0,!0));for(const strResource of element.strResources)this.removeElements(strResource);return this._notificationService.warn(message),new WorkspaceVerificationError}_checkWorkspaceUndo(strResource,element,editStackSnapshot,checkInvalidatedResources){if(element.removedResources)return this._tryToSplitAndUndo(strResource,element,element.removedResources,nls.localize({key:"cannotWorkspaceUndo",comment:["{0} is a label for an operation. {1} is another message."]},"Could not undo '{0}' across all files. {1}",element.label,element.removedResources.createMessage()));if(checkInvalidatedResources&&element.invalidatedResources)return this._tryToSplitAndUndo(strResource,element,element.invalidatedResources,nls.localize({key:"cannotWorkspaceUndo",comment:["{0} is a label for an operation. {1} is another message."]},"Could not undo '{0}' across all files. {1}",element.label,element.invalidatedResources.createMessage()));const cannotUndoDueToResources=[];for(const editStack of editStackSnapshot.editStacks)editStack.getClosestPastElement()!==element&&cannotUndoDueToResources.push(editStack.resourceLabel);if(cannotUndoDueToResources.length>0)return this._tryToSplitAndUndo(strResource,element,null,nls.localize({key:"cannotWorkspaceUndoDueToChanges",comment:["{0} is a label for an operation. {1} is a list of filenames."]},"Could not undo '{0}' across all files because changes were made to {1}",element.label,cannotUndoDueToResources.join(", ")));const cannotLockDueToResources=[];for(const editStack of editStackSnapshot.editStacks)editStack.locked&&cannotLockDueToResources.push(editStack.resourceLabel);return cannotLockDueToResources.length>0?this._tryToSplitAndUndo(strResource,element,null,nls.localize({key:"cannotWorkspaceUndoDueToInProgressUndoRedo",comment:["{0} is a label for an operation. {1} is a list of filenames."]},"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}",element.label,cannotLockDueToResources.join(", "))):editStackSnapshot.isValid()?null:this._tryToSplitAndUndo(strResource,element,null,nls.localize({key:"cannotWorkspaceUndoDueToInMeantimeUndoRedo",comment:["{0} is a label for an operation. {1} is a list of filenames."]},"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime",element.label))}_workspaceUndo(strResource,element,undoConfirmed){const affectedEditStacks=this._getAffectedEditStacks(element),verificationError=this._checkWorkspaceUndo(strResource,element,affectedEditStacks,!1);return verificationError?verificationError.returnValue:this._confirmAndExecuteWorkspaceUndo(strResource,element,affectedEditStacks,undoConfirmed)}_isPartOfUndoGroup(element){if(!element.groupId)return!1;for(const[,editStack]of this._editStacks){const pastElement=editStack.getClosestPastElement();if(pastElement){if(pastElement===element){const secondPastElement=editStack.getSecondClosestPastElement();if(secondPastElement&&secondPastElement.groupId===element.groupId)return!0}if(pastElement.groupId===element.groupId)return!0}}return!1}_confirmAndExecuteWorkspaceUndo(strResource,element,editStackSnapshot,undoConfirmed){return __awaiter(this,void 0,void 0,(function*(){if(element.canSplit()&&!this._isPartOfUndoGroup(element)){const result=yield this._dialogService.show(Severity.Info,nls.localize("confirmWorkspace","Would you like to undo '{0}' across all files?",element.label),[nls.localize({key:"ok",comment:["{0} denotes a number that is > 1"]},"Undo in {0} Files",editStackSnapshot.editStacks.length),nls.localize("nok","Undo this File"),nls.localize("cancel","Cancel")],{cancelId:2});if(2===result.choice)return;if(1===result.choice)return this._splitPastWorkspaceElement(element,null),this._undo(strResource,0,!0);const verificationError1=this._checkWorkspaceUndo(strResource,element,editStackSnapshot,!1);if(verificationError1)return verificationError1.returnValue;undoConfirmed=!0}let cleanup;try{cleanup=yield this._invokeWorkspacePrepare(element)}catch(err){return this._onError(err,element)}const verificationError2=this._checkWorkspaceUndo(strResource,element,editStackSnapshot,!0);if(verificationError2)return cleanup.dispose(),verificationError2.returnValue;for(const editStack of editStackSnapshot.editStacks)editStack.moveBackward(element);return this._safeInvokeWithLocks(element,(()=>element.actual.undo()),editStackSnapshot,cleanup,(()=>this._continueUndoInGroup(element.groupId,undoConfirmed)))}))}_resourceUndo(editStack,element,undoConfirmed){if(element.isValid){if(!editStack.locked)return this._invokeResourcePrepare(element,(cleanup=>(editStack.moveBackward(element),this._safeInvokeWithLocks(element,(()=>element.actual.undo()),new EditStackSnapshot([editStack]),cleanup,(()=>this._continueUndoInGroup(element.groupId,undoConfirmed))))));{const message=nls.localize({key:"cannotResourceUndoDueToInProgressUndoRedo",comment:["{0} is a label for an operation."]},"Could not undo '{0}' because there is already an undo or redo operation running.",element.label);this._notificationService.warn(message)}}else editStack.flushAllElements()}_findClosestUndoElementInGroup(groupId){if(!groupId)return[null,null];let matchedElement=null,matchedStrResource=null;for(const[strResource,editStack]of this._editStacks){const candidate=editStack.getClosestPastElement();candidate&&(candidate.groupId===groupId&&(!matchedElement||candidate.groupOrder>matchedElement.groupOrder)&&(matchedElement=candidate,matchedStrResource=strResource))}return[matchedElement,matchedStrResource]}_continueUndoInGroup(groupId,undoConfirmed){if(!groupId)return;const[,matchedStrResource]=this._findClosestUndoElementInGroup(groupId);return matchedStrResource?this._undo(matchedStrResource,0,undoConfirmed):void 0}undo(resourceOrSource){if(resourceOrSource instanceof UndoRedoSource){const[,matchedStrResource]=this._findClosestUndoElementWithSource(resourceOrSource.id);return matchedStrResource?this._undo(matchedStrResource,resourceOrSource.id,!1):void 0}return"string"==typeof resourceOrSource?this._undo(resourceOrSource,0,!1):this._undo(this.getUriComparisonKey(resourceOrSource),0,!1)}_undo(strResource,sourceId=0,undoConfirmed){if(!this._editStacks.has(strResource))return;const editStack=this._editStacks.get(strResource),element=editStack.getClosestPastElement();if(!element)return;if(element.groupId){const[matchedElement,matchedStrResource]=this._findClosestUndoElementInGroup(element.groupId);if(element!==matchedElement&&matchedStrResource)return this._undo(matchedStrResource,sourceId,undoConfirmed)}if((element.sourceId!==sourceId||element.confirmBeforeUndo)&&!undoConfirmed)return this._confirmAndContinueUndo(strResource,sourceId,element);try{return 1===element.type?this._workspaceUndo(strResource,element,undoConfirmed):this._resourceUndo(editStack,element,undoConfirmed)}finally{false}}_confirmAndContinueUndo(strResource,sourceId,element){return __awaiter(this,void 0,void 0,(function*(){if(1!==(yield this._dialogService.show(Severity.Info,nls.localize("confirmDifferentSource","Would you like to undo '{0}'?",element.label),[nls.localize("confirmDifferentSource.yes","Yes"),nls.localize("confirmDifferentSource.no","No")],{cancelId:1})).choice)return this._undo(strResource,sourceId,!0)}))}_findClosestRedoElementWithSource(sourceId){if(!sourceId)return[null,null];let matchedElement=null,matchedStrResource=null;for(const[strResource,editStack]of this._editStacks){const candidate=editStack.getClosestFutureElement();candidate&&(candidate.sourceId===sourceId&&(!matchedElement||candidate.sourceOrder<matchedElement.sourceOrder)&&(matchedElement=candidate,matchedStrResource=strResource))}return[matchedElement,matchedStrResource]}canRedo(resourceOrSource){if(resourceOrSource instanceof UndoRedoSource){const[,matchedStrResource]=this._findClosestRedoElementWithSource(resourceOrSource.id);return!!matchedStrResource}const strResource=this.getUriComparisonKey(resourceOrSource);if(this._editStacks.has(strResource)){return this._editStacks.get(strResource).hasFutureElements()}return!1}_tryToSplitAndRedo(strResource,element,ignoreResources,message){if(element.canSplit())return this._splitFutureWorkspaceElement(element,ignoreResources),this._notificationService.warn(message),new WorkspaceVerificationError(this._redo(strResource));for(const strResource of element.strResources)this.removeElements(strResource);return this._notificationService.warn(message),new WorkspaceVerificationError}_checkWorkspaceRedo(strResource,element,editStackSnapshot,checkInvalidatedResources){if(element.removedResources)return this._tryToSplitAndRedo(strResource,element,element.removedResources,nls.localize({key:"cannotWorkspaceRedo",comment:["{0} is a label for an operation. {1} is another message."]},"Could not redo '{0}' across all files. {1}",element.label,element.removedResources.createMessage()));if(checkInvalidatedResources&&element.invalidatedResources)return this._tryToSplitAndRedo(strResource,element,element.invalidatedResources,nls.localize({key:"cannotWorkspaceRedo",comment:["{0} is a label for an operation. {1} is another message."]},"Could not redo '{0}' across all files. {1}",element.label,element.invalidatedResources.createMessage()));const cannotRedoDueToResources=[];for(const editStack of editStackSnapshot.editStacks)editStack.getClosestFutureElement()!==element&&cannotRedoDueToResources.push(editStack.resourceLabel);if(cannotRedoDueToResources.length>0)return this._tryToSplitAndRedo(strResource,element,null,nls.localize({key:"cannotWorkspaceRedoDueToChanges",comment:["{0} is a label for an operation. {1} is a list of filenames."]},"Could not redo '{0}' across all files because changes were made to {1}",element.label,cannotRedoDueToResources.join(", ")));const cannotLockDueToResources=[];for(const editStack of editStackSnapshot.editStacks)editStack.locked&&cannotLockDueToResources.push(editStack.resourceLabel);return cannotLockDueToResources.length>0?this._tryToSplitAndRedo(strResource,element,null,nls.localize({key:"cannotWorkspaceRedoDueToInProgressUndoRedo",comment:["{0} is a label for an operation. {1} is a list of filenames."]},"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}",element.label,cannotLockDueToResources.join(", "))):editStackSnapshot.isValid()?null:this._tryToSplitAndRedo(strResource,element,null,nls.localize({key:"cannotWorkspaceRedoDueToInMeantimeUndoRedo",comment:["{0} is a label for an operation. {1} is a list of filenames."]},"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime",element.label))}_workspaceRedo(strResource,element){const affectedEditStacks=this._getAffectedEditStacks(element),verificationError=this._checkWorkspaceRedo(strResource,element,affectedEditStacks,!1);return verificationError?verificationError.returnValue:this._executeWorkspaceRedo(strResource,element,affectedEditStacks)}_executeWorkspaceRedo(strResource,element,editStackSnapshot){return __awaiter(this,void 0,void 0,(function*(){let cleanup;try{cleanup=yield this._invokeWorkspacePrepare(element)}catch(err){return this._onError(err,element)}const verificationError=this._checkWorkspaceRedo(strResource,element,editStackSnapshot,!0);if(verificationError)return cleanup.dispose(),verificationError.returnValue;for(const editStack of editStackSnapshot.editStacks)editStack.moveForward(element);return this._safeInvokeWithLocks(element,(()=>element.actual.redo()),editStackSnapshot,cleanup,(()=>this._continueRedoInGroup(element.groupId)))}))}_resourceRedo(editStack,element){if(element.isValid){if(!editStack.locked)return this._invokeResourcePrepare(element,(cleanup=>(editStack.moveForward(element),this._safeInvokeWithLocks(element,(()=>element.actual.redo()),new EditStackSnapshot([editStack]),cleanup,(()=>this._continueRedoInGroup(element.groupId))))));{const message=nls.localize({key:"cannotResourceRedoDueToInProgressUndoRedo",comment:["{0} is a label for an operation."]},"Could not redo '{0}' because there is already an undo or redo operation running.",element.label);this._notificationService.warn(message)}}else editStack.flushAllElements()}_findClosestRedoElementInGroup(groupId){if(!groupId)return[null,null];let matchedElement=null,matchedStrResource=null;for(const[strResource,editStack]of this._editStacks){const candidate=editStack.getClosestFutureElement();candidate&&(candidate.groupId===groupId&&(!matchedElement||candidate.groupOrder<matchedElement.groupOrder)&&(matchedElement=candidate,matchedStrResource=strResource))}return[matchedElement,matchedStrResource]}_continueRedoInGroup(groupId){if(!groupId)return;const[,matchedStrResource]=this._findClosestRedoElementInGroup(groupId);return matchedStrResource?this._redo(matchedStrResource):void 0}redo(resourceOrSource){if(resourceOrSource instanceof UndoRedoSource){const[,matchedStrResource]=this._findClosestRedoElementWithSource(resourceOrSource.id);return matchedStrResource?this._redo(matchedStrResource):void 0}return"string"==typeof resourceOrSource?this._redo(resourceOrSource):this._redo(this.getUriComparisonKey(resourceOrSource))}_redo(strResource){if(!this._editStacks.has(strResource))return;const editStack=this._editStacks.get(strResource),element=editStack.getClosestFutureElement();if(element){if(element.groupId){const[matchedElement,matchedStrResource]=this._findClosestRedoElementInGroup(element.groupId);if(element!==matchedElement&&matchedStrResource)return this._redo(matchedStrResource)}try{return 1===element.type?this._workspaceRedo(strResource,element):this._resourceRedo(editStack,element)}finally{false}}}};UndoRedoService=__decorate([__param(0,IDialogService),__param(1,INotificationService)],UndoRedoService);export{UndoRedoService};class WorkspaceVerificationError{constructor(returnValue){this.returnValue=returnValue}}registerSingleton(IUndoRedoService,UndoRedoService);