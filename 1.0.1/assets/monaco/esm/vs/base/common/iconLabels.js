import{CSSIcon}from"./codicons.js";import{matchesFuzzy}from"./filters.js";import{ltrim}from"./strings.js";export const iconStartMarker="$(";const iconsRegex=new RegExp(`\\$\\(${CSSIcon.iconNameExpression}(?:${CSSIcon.iconModifierExpression})?\\)`,"g"),iconNameCharacterRegexp=new RegExp(CSSIcon.iconNameCharacter),escapeIconsRegex=new RegExp(`(\\\\)?${iconsRegex.source}`,"g");export function escapeIcons(text){return text.replace(escapeIconsRegex,((match,escaped)=>escaped?match:`\\${match}`))}const markdownEscapedIconsRegex=new RegExp(`\\\\${iconsRegex.source}`,"g");export function markdownEscapeEscapedIcons(text){return text.replace(markdownEscapedIconsRegex,(match=>`\\${match}`))}const stripIconsRegex=new RegExp(`(\\s)?(\\\\)?${iconsRegex.source}(\\s)?`,"g");export function stripIcons(text){return-1===text.indexOf("$(")?text:text.replace(stripIconsRegex,((match,preWhitespace,escaped,postWhitespace)=>escaped?match:preWhitespace||postWhitespace||""))}export function parseLabelWithIcons(text){const firstIconIndex=text.indexOf("$(");return-1===firstIconIndex?{text}:doParseLabelWithIcons(text,firstIconIndex)}function doParseLabelWithIcons(text,firstIconIndex){const iconOffsets=[];let textWithoutIcons="";function appendChars(chars){if(chars){textWithoutIcons+=chars;for(const _ of chars)iconOffsets.push(iconsOffset)}}let char,nextChar,currentIconStart=-1,currentIconValue="",iconsOffset=0,offset=firstIconIndex;const length=text.length;for(appendChars(text.substr(0,firstIconIndex));offset<length;){if(char=text[offset],nextChar=text[offset+1],char==="$("[0]&&nextChar==="$("[1])currentIconStart=offset,appendChars(currentIconValue),currentIconValue="$(",offset++;else if(")"===char&&-1!==currentIconStart){iconsOffset+=offset-currentIconStart+1,currentIconStart=-1,currentIconValue=""}else-1!==currentIconStart?iconNameCharacterRegexp.test(char)?currentIconValue+=char:(appendChars(currentIconValue),currentIconStart=-1,currentIconValue=""):appendChars(char);offset++}return appendChars(currentIconValue),{text:textWithoutIcons,iconOffsets}}export function matchesFuzzyIconAware(query,target,enableSeparateSubstringMatching=!1){const{text,iconOffsets}=target;if(!iconOffsets||0===iconOffsets.length)return matchesFuzzy(query,text,enableSeparateSubstringMatching);const wordToMatchAgainstWithoutIconsTrimmed=ltrim(text," "),leadingWhitespaceOffset=text.length-wordToMatchAgainstWithoutIconsTrimmed.length,matches=matchesFuzzy(query,wordToMatchAgainstWithoutIconsTrimmed,enableSeparateSubstringMatching);if(matches)for(const match of matches){const iconOffset=iconOffsets[match.start+leadingWhitespaceOffset]+leadingWhitespaceOffset;match.start+=iconOffset,match.end+=iconOffset}return matches}