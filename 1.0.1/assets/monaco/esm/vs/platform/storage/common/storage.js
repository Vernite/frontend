import{Emitter,PauseableEmitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{isUndefinedOrNull}from"../../../base/common/types.js";import{InMemoryStorageDatabase,Storage}from"../../../base/parts/storage/common/storage.js";import{createDecorator}from"../../instantiation/common/instantiation.js";const TARGET_KEY="__$__targetStorageMarker";export const IStorageService=createDecorator("storageService");export var WillSaveStateReason;!function(WillSaveStateReason){WillSaveStateReason[WillSaveStateReason.NONE=0]="NONE",WillSaveStateReason[WillSaveStateReason.SHUTDOWN=1]="SHUTDOWN"}(WillSaveStateReason||(WillSaveStateReason={}));export class AbstractStorageService extends Disposable{constructor(options={flushInterval:AbstractStorageService.DEFAULT_FLUSH_INTERVAL}){super(),this.options=options,this._onDidChangeValue=this._register(new PauseableEmitter),this.onDidChangeValue=this._onDidChangeValue.event,this._onDidChangeTarget=this._register(new PauseableEmitter),this._onWillSaveState=this._register(new Emitter),this.onWillSaveState=this._onWillSaveState.event,this._workspaceKeyTargets=void 0,this._profileKeyTargets=void 0,this._applicationKeyTargets=void 0}emitDidChangeValue(scope,key){if(key===TARGET_KEY){switch(scope){case-1:this._applicationKeyTargets=void 0;break;case 0:this._profileKeyTargets=void 0;break;case 1:this._workspaceKeyTargets=void 0}this._onDidChangeTarget.fire({scope})}else this._onDidChangeValue.fire({scope,key,target:this.getKeyTargets(scope)[key]})}get(key,scope,fallbackValue){var _a;return null===(_a=this.getStorage(scope))||void 0===_a?void 0:_a.get(key,fallbackValue)}getBoolean(key,scope,fallbackValue){var _a;return null===(_a=this.getStorage(scope))||void 0===_a?void 0:_a.getBoolean(key,fallbackValue)}getNumber(key,scope,fallbackValue){var _a;return null===(_a=this.getStorage(scope))||void 0===_a?void 0:_a.getNumber(key,fallbackValue)}store(key,value,scope,target){isUndefinedOrNull(value)?this.remove(key,scope):this.withPausedEmitters((()=>{var _a;this.updateKeyTarget(key,scope,target),null===(_a=this.getStorage(scope))||void 0===_a||_a.set(key,value)}))}remove(key,scope){this.withPausedEmitters((()=>{var _a;this.updateKeyTarget(key,scope,void 0),null===(_a=this.getStorage(scope))||void 0===_a||_a.delete(key)}))}withPausedEmitters(fn){this._onDidChangeValue.pause(),this._onDidChangeTarget.pause();try{fn()}finally{this._onDidChangeValue.resume(),this._onDidChangeTarget.resume()}}updateKeyTarget(key,scope,target){var _a,_b;const keyTargets=this.getKeyTargets(scope);"number"==typeof target?keyTargets[key]!==target&&(keyTargets[key]=target,null===(_a=this.getStorage(scope))||void 0===_a||_a.set(TARGET_KEY,JSON.stringify(keyTargets))):"number"==typeof keyTargets[key]&&(delete keyTargets[key],null===(_b=this.getStorage(scope))||void 0===_b||_b.set(TARGET_KEY,JSON.stringify(keyTargets)))}get workspaceKeyTargets(){return this._workspaceKeyTargets||(this._workspaceKeyTargets=this.loadKeyTargets(1)),this._workspaceKeyTargets}get profileKeyTargets(){return this._profileKeyTargets||(this._profileKeyTargets=this.loadKeyTargets(0)),this._profileKeyTargets}get applicationKeyTargets(){return this._applicationKeyTargets||(this._applicationKeyTargets=this.loadKeyTargets(-1)),this._applicationKeyTargets}getKeyTargets(scope){switch(scope){case-1:return this.applicationKeyTargets;case 0:return this.profileKeyTargets;default:return this.workspaceKeyTargets}}loadKeyTargets(scope){const keysRaw=this.get(TARGET_KEY,scope);if(keysRaw)try{return JSON.parse(keysRaw)}catch(error){}return Object.create(null)}}AbstractStorageService.DEFAULT_FLUSH_INTERVAL=6e4;export class InMemoryStorageService extends AbstractStorageService{constructor(){super(),this.applicationStorage=this._register(new Storage(new InMemoryStorageDatabase)),this.profileStorage=this._register(new Storage(new InMemoryStorageDatabase)),this.workspaceStorage=this._register(new Storage(new InMemoryStorageDatabase)),this._register(this.workspaceStorage.onDidChangeStorage((key=>this.emitDidChangeValue(1,key)))),this._register(this.profileStorage.onDidChangeStorage((key=>this.emitDidChangeValue(0,key)))),this._register(this.applicationStorage.onDidChangeStorage((key=>this.emitDidChangeValue(-1,key))))}getStorage(scope){switch(scope){case-1:return this.applicationStorage;case 0:return this.profileStorage;default:return this.workspaceStorage}}}