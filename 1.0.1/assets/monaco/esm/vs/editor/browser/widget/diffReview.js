var _a,__decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import"./media/diffReview.css";import*as nls from"../../../nls.js";import*as dom from"../../../base/browser/dom.js";import{createFastDomNode}from"../../../base/browser/fastDomNode.js";import{ActionBar}from"../../../base/browser/ui/actionbar/actionbar.js";import{DomScrollableElement}from"../../../base/browser/ui/scrollbar/scrollableElement.js";import{Action}from"../../../base/common/actions.js";import{Disposable}from"../../../base/common/lifecycle.js";import{applyFontInfo}from"../config/domFontInfo.js";import{EditorAction,registerEditorAction}from"../editorExtensions.js";import{ICodeEditorService}from"../services/codeEditorService.js";import{EditorFontLigatures}from"../../common/config/editorOptions.js";import{LineTokens}from"../../common/tokens/lineTokens.js";import{Position}from"../../common/core/position.js";import{editorLineNumbers}from"../../common/core/editorColorRegistry.js";import{RenderLineInput,renderViewLine2 as renderViewLine}from"../../common/viewLayout/viewLineRenderer.js";import{ViewLineRenderingData}from"../../common/viewModel.js";import{ContextKeyExpr}from"../../../platform/contextkey/common/contextkey.js";import{scrollbarShadow}from"../../../platform/theme/common/colorRegistry.js";import{registerThemingParticipant,ThemeIcon}from"../../../platform/theme/common/themeService.js";import{Codicon}from"../../../base/common/codicons.js";import{registerIcon}from"../../../platform/theme/common/iconRegistry.js";import{ILanguageService}from"../../common/languages/language.js";const DIFF_LINES_PADDING=3;class DiffEntry{constructor(originalLineStart,originalLineEnd,modifiedLineStart,modifiedLineEnd){this.originalLineStart=originalLineStart,this.originalLineEnd=originalLineEnd,this.modifiedLineStart=modifiedLineStart,this.modifiedLineEnd=modifiedLineEnd}getType(){return 0===this.originalLineStart?1:0===this.modifiedLineStart?2:0}}class Diff{constructor(entries){this.entries=entries}}const diffReviewInsertIcon=registerIcon("diff-review-insert",Codicon.add,nls.localize("diffReviewInsertIcon","Icon for 'Insert' in diff review.")),diffReviewRemoveIcon=registerIcon("diff-review-remove",Codicon.remove,nls.localize("diffReviewRemoveIcon","Icon for 'Remove' in diff review.")),diffReviewCloseIcon=registerIcon("diff-review-close",Codicon.close,nls.localize("diffReviewCloseIcon","Icon for 'Close' in diff review."));let DiffReview=class DiffReview extends Disposable{constructor(diffEditor,_languageService){super(),this._languageService=_languageService,this._width=0,this._diffEditor=diffEditor,this._isVisible=!1,this.shadow=createFastDomNode(document.createElement("div")),this.shadow.setClassName("diff-review-shadow"),this.actionBarContainer=createFastDomNode(document.createElement("div")),this.actionBarContainer.setClassName("diff-review-actions"),this._actionBar=this._register(new ActionBar(this.actionBarContainer.domNode)),this._actionBar.push(new Action("diffreview.close",nls.localize("label.close","Close"),"close-diff-review "+ThemeIcon.asClassName(diffReviewCloseIcon),!0,(()=>__awaiter(this,void 0,void 0,(function*(){return this.hide()})))),{label:!1,icon:!0}),this.domNode=createFastDomNode(document.createElement("div")),this.domNode.setClassName("diff-review monaco-editor-background"),this._content=createFastDomNode(document.createElement("div")),this._content.setClassName("diff-review-content"),this._content.setAttribute("role","code"),this.scrollbar=this._register(new DomScrollableElement(this._content.domNode,{})),this.domNode.domNode.appendChild(this.scrollbar.getDomNode()),this._register(diffEditor.onDidUpdateDiff((()=>{this._isVisible&&(this._diffs=this._compute(),this._render())}))),this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition((()=>{this._isVisible&&this._render()}))),this._register(dom.addStandardDisposableListener(this.domNode.domNode,"click",(e=>{e.preventDefault();const row=dom.findParentWithClass(e.target,"diff-review-row");row&&this._goToRow(row)}))),this._register(dom.addStandardDisposableListener(this.domNode.domNode,"keydown",(e=>{(e.equals(18)||e.equals(2066)||e.equals(530))&&(e.preventDefault(),this._goToRow(this._getNextRow())),(e.equals(16)||e.equals(2064)||e.equals(528))&&(e.preventDefault(),this._goToRow(this._getPrevRow())),(e.equals(9)||e.equals(2057)||e.equals(521)||e.equals(1033))&&(e.preventDefault(),this.hide()),(e.equals(10)||e.equals(3))&&(e.preventDefault(),this.accept())}))),this._diffs=[],this._currentDiff=null}prev(){let index=0;if(this._isVisible||(this._diffs=this._compute()),this._isVisible){let currentIndex=-1;for(let i=0,len=this._diffs.length;i<len;i++)if(this._diffs[i]===this._currentDiff){currentIndex=i;break}index=this._diffs.length+currentIndex-1}else index=this._findDiffIndex(this._diffEditor.getPosition());if(0===this._diffs.length)return;index%=this._diffs.length;const entries=this._diffs[index].entries;this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart,1)),this._diffEditor.setSelection({startColumn:1,startLineNumber:entries[0].modifiedLineStart,endColumn:1073741824,endLineNumber:entries[entries.length-1].modifiedLineEnd}),this._isVisible=!0,this._diffEditor.doLayout(),this._render(),this._goToRow(this._getNextRow())}next(){let index=0;if(this._isVisible||(this._diffs=this._compute()),this._isVisible){let currentIndex=-1;for(let i=0,len=this._diffs.length;i<len;i++)if(this._diffs[i]===this._currentDiff){currentIndex=i;break}index=currentIndex+1}else index=this._findDiffIndex(this._diffEditor.getPosition());if(0===this._diffs.length)return;index%=this._diffs.length;const entries=this._diffs[index].entries;this._diffEditor.setPosition(new Position(entries[0].modifiedLineStart,1)),this._diffEditor.setSelection({startColumn:1,startLineNumber:entries[0].modifiedLineStart,endColumn:1073741824,endLineNumber:entries[entries.length-1].modifiedLineEnd}),this._isVisible=!0,this._diffEditor.doLayout(),this._render(),this._goToRow(this._getNextRow())}accept(){let jumpToLineNumber=-1;const current=this._getCurrentFocusedRow();if(current){const lineNumber=parseInt(current.getAttribute("data-line"),10);isNaN(lineNumber)||(jumpToLineNumber=lineNumber)}this.hide(),-1!==jumpToLineNumber&&(this._diffEditor.setPosition(new Position(jumpToLineNumber,1)),this._diffEditor.revealPosition(new Position(jumpToLineNumber,1),1))}hide(){this._isVisible=!1,this._diffEditor.updateOptions({readOnly:!1}),this._diffEditor.focus(),this._diffEditor.doLayout(),this._render()}_getPrevRow(){const current=this._getCurrentFocusedRow();return current?current.previousElementSibling?current.previousElementSibling:current:this._getFirstRow()}_getNextRow(){const current=this._getCurrentFocusedRow();return current?current.nextElementSibling?current.nextElementSibling:current:this._getFirstRow()}_getFirstRow(){return this.domNode.domNode.querySelector(".diff-review-row")}_getCurrentFocusedRow(){const result=document.activeElement;return result&&/diff-review-row/.test(result.className)?result:null}_goToRow(row){const prev=this._getCurrentFocusedRow();row.tabIndex=0,row.focus(),prev&&prev!==row&&(prev.tabIndex=-1),this.scrollbar.scanDomNode()}isVisible(){return this._isVisible}layout(top,width,height){this._width=width,this.shadow.setTop(top-6),this.shadow.setWidth(width),this.shadow.setHeight(this._isVisible?6:0),this.domNode.setTop(top),this.domNode.setWidth(width),this.domNode.setHeight(height),this._content.setHeight(height),this._content.setWidth(width),this._isVisible?(this.actionBarContainer.setAttribute("aria-hidden","false"),this.actionBarContainer.setDisplay("block")):(this.actionBarContainer.setAttribute("aria-hidden","true"),this.actionBarContainer.setDisplay("none"))}_compute(){const lineChanges=this._diffEditor.getLineChanges();if(!lineChanges||0===lineChanges.length)return[];const originalModel=this._diffEditor.getOriginalEditor().getModel(),modifiedModel=this._diffEditor.getModifiedEditor().getModel();return originalModel&&modifiedModel?DiffReview._mergeAdjacent(lineChanges,originalModel.getLineCount(),modifiedModel.getLineCount()):[]}static _mergeAdjacent(lineChanges,originalLineCount,modifiedLineCount){if(!lineChanges||0===lineChanges.length)return[];const diffs=[];let diffsLength=0;for(let i=0,len=lineChanges.length;i<len;i++){const lineChange=lineChanges[i],originalStart=lineChange.originalStartLineNumber,originalEnd=lineChange.originalEndLineNumber,modifiedStart=lineChange.modifiedStartLineNumber,modifiedEnd=lineChange.modifiedEndLineNumber,r=[];let rLength=0;{const originalEqualAbove=0===originalEnd?originalStart:originalStart-1,modifiedEqualAbove=0===modifiedEnd?modifiedStart:modifiedStart-1;let minOriginal=1,minModified=1;if(i>0){const prevLineChange=lineChanges[i-1];minOriginal=0===prevLineChange.originalEndLineNumber?prevLineChange.originalStartLineNumber+1:prevLineChange.originalEndLineNumber+1,minModified=0===prevLineChange.modifiedEndLineNumber?prevLineChange.modifiedStartLineNumber+1:prevLineChange.modifiedEndLineNumber+1}let fromOriginal=originalEqualAbove-3+1,fromModified=modifiedEqualAbove-3+1;if(fromOriginal<minOriginal){const delta=minOriginal-fromOriginal;fromOriginal+=delta,fromModified+=delta}if(fromModified<minModified){const delta=minModified-fromModified;fromOriginal+=delta,fromModified+=delta}r[rLength++]=new DiffEntry(fromOriginal,originalEqualAbove,fromModified,modifiedEqualAbove)}0!==originalEnd&&(r[rLength++]=new DiffEntry(originalStart,originalEnd,0,0)),0!==modifiedEnd&&(r[rLength++]=new DiffEntry(0,0,modifiedStart,modifiedEnd));{const originalEqualBelow=0===originalEnd?originalStart+1:originalEnd+1,modifiedEqualBelow=0===modifiedEnd?modifiedStart+1:modifiedEnd+1;let maxOriginal=originalLineCount,maxModified=modifiedLineCount;if(i+1<len){const nextLineChange=lineChanges[i+1];maxOriginal=0===nextLineChange.originalEndLineNumber?nextLineChange.originalStartLineNumber:nextLineChange.originalStartLineNumber-1,maxModified=0===nextLineChange.modifiedEndLineNumber?nextLineChange.modifiedStartLineNumber:nextLineChange.modifiedStartLineNumber-1}let toOriginal=originalEqualBelow+3-1,toModified=modifiedEqualBelow+3-1;if(toOriginal>maxOriginal){const delta=maxOriginal-toOriginal;toOriginal+=delta,toModified+=delta}if(toModified>maxModified){const delta=maxModified-toModified;toOriginal+=delta,toModified+=delta}r[rLength++]=new DiffEntry(originalEqualBelow,toOriginal,modifiedEqualBelow,toModified)}diffs[diffsLength++]=new Diff(r)}let curr=diffs[0].entries;const r=[];let rLength=0;for(let i=1,len=diffs.length;i<len;i++){const thisDiff=diffs[i].entries,currLast=curr[curr.length-1],thisFirst=thisDiff[0];0===currLast.getType()&&0===thisFirst.getType()&&thisFirst.originalLineStart<=currLast.originalLineEnd?(curr[curr.length-1]=new DiffEntry(currLast.originalLineStart,thisFirst.originalLineEnd,currLast.modifiedLineStart,thisFirst.modifiedLineEnd),curr=curr.concat(thisDiff.slice(1))):(r[rLength++]=new Diff(curr),curr=thisDiff)}return r[rLength++]=new Diff(curr),r}_findDiffIndex(pos){const lineNumber=pos.lineNumber;for(let i=0,len=this._diffs.length;i<len;i++){const diff=this._diffs[i].entries;if(lineNumber<=diff[diff.length-1].modifiedLineEnd)return i}return 0}_render(){const originalOptions=this._diffEditor.getOriginalEditor().getOptions(),modifiedOptions=this._diffEditor.getModifiedEditor().getOptions(),originalModel=this._diffEditor.getOriginalEditor().getModel(),modifiedModel=this._diffEditor.getModifiedEditor().getModel(),originalModelOpts=originalModel.getOptions(),modifiedModelOpts=modifiedModel.getOptions();if(!this._isVisible||!originalModel||!modifiedModel)return dom.clearNode(this._content.domNode),this._currentDiff=null,void this.scrollbar.scanDomNode();this._diffEditor.updateOptions({readOnly:!0});const diffIndex=this._findDiffIndex(this._diffEditor.getPosition());if(this._diffs[diffIndex]===this._currentDiff)return;this._currentDiff=this._diffs[diffIndex];const diffs=this._diffs[diffIndex].entries,container=document.createElement("div");container.className="diff-review-table",container.setAttribute("role","list"),container.setAttribute("aria-label",'Difference review. Use "Stage | Unstage | Revert Selected Ranges" commands'),applyFontInfo(container,modifiedOptions.get(46));let minOriginalLine=0,maxOriginalLine=0,minModifiedLine=0,maxModifiedLine=0;for(let i=0,len=diffs.length;i<len;i++){const diffEntry=diffs[i],originalLineStart=diffEntry.originalLineStart,originalLineEnd=diffEntry.originalLineEnd,modifiedLineStart=diffEntry.modifiedLineStart,modifiedLineEnd=diffEntry.modifiedLineEnd;0!==originalLineStart&&(0===minOriginalLine||originalLineStart<minOriginalLine)&&(minOriginalLine=originalLineStart),0!==originalLineEnd&&(0===maxOriginalLine||originalLineEnd>maxOriginalLine)&&(maxOriginalLine=originalLineEnd),0!==modifiedLineStart&&(0===minModifiedLine||modifiedLineStart<minModifiedLine)&&(minModifiedLine=modifiedLineStart),0!==modifiedLineEnd&&(0===maxModifiedLine||modifiedLineEnd>maxModifiedLine)&&(maxModifiedLine=modifiedLineEnd)}const header=document.createElement("div");header.className="diff-review-row";const cell=document.createElement("div");cell.className="diff-review-cell diff-review-summary";const originalChangedLinesCnt=maxOriginalLine-minOriginalLine+1,modifiedChangedLinesCnt=maxModifiedLine-minModifiedLine+1;cell.appendChild(document.createTextNode(`${diffIndex+1}/${this._diffs.length}: @@ -${minOriginalLine},${originalChangedLinesCnt} +${minModifiedLine},${modifiedChangedLinesCnt} @@`)),header.setAttribute("data-line",String(minModifiedLine));const getAriaLines=lines=>0===lines?nls.localize("no_lines_changed","no lines changed"):1===lines?nls.localize("one_line_changed","1 line changed"):nls.localize("more_lines_changed","{0} lines changed",lines),originalChangedLinesCntAria=getAriaLines(originalChangedLinesCnt),modifiedChangedLinesCntAria=getAriaLines(modifiedChangedLinesCnt);header.setAttribute("aria-label",nls.localize({key:"header",comment:["This is the ARIA label for a git diff header.","A git diff header looks like this: @@ -154,12 +159,39 @@.","That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.","Variables 0 and 1 refer to the diff index out of total number of diffs.","Variables 2 and 4 will be numbers (a line number).",'Variables 3 and 5 will be "no lines changed", "1 line changed" or "X lines changed", localized separately.']},"Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}",diffIndex+1,this._diffs.length,minOriginalLine,originalChangedLinesCntAria,minModifiedLine,modifiedChangedLinesCntAria)),header.appendChild(cell),header.setAttribute("role","listitem"),container.appendChild(header);const lineHeight=modifiedOptions.get(61);let modLine=minModifiedLine;for(let i=0,len=diffs.length;i<len;i++){const diffEntry=diffs[i];DiffReview._renderSection(container,diffEntry,modLine,lineHeight,this._width,originalOptions,originalModel,originalModelOpts,modifiedOptions,modifiedModel,modifiedModelOpts,this._languageService.languageIdCodec),0!==diffEntry.modifiedLineStart&&(modLine=diffEntry.modifiedLineEnd)}dom.clearNode(this._content.domNode),this._content.domNode.appendChild(container),this.scrollbar.scanDomNode()}static _renderSection(dest,diffEntry,modLine,lineHeight,width,originalOptions,originalModel,originalModelOpts,modifiedOptions,modifiedModel,modifiedModelOpts,languageIdCodec){const type=diffEntry.getType();let rowClassName="diff-review-row",lineNumbersExtraClassName="";let spacerIcon=null;switch(type){case 1:rowClassName="diff-review-row line-insert",lineNumbersExtraClassName=" char-insert",spacerIcon=diffReviewInsertIcon;break;case 2:rowClassName="diff-review-row line-delete",lineNumbersExtraClassName=" char-delete",spacerIcon=diffReviewRemoveIcon}const originalLineStart=diffEntry.originalLineStart,originalLineEnd=diffEntry.originalLineEnd,modifiedLineStart=diffEntry.modifiedLineStart,modifiedLineEnd=diffEntry.modifiedLineEnd,cnt=Math.max(modifiedLineEnd-modifiedLineStart,originalLineEnd-originalLineStart),originalLayoutInfo=originalOptions.get(133),originalLineNumbersWidth=originalLayoutInfo.glyphMarginWidth+originalLayoutInfo.lineNumbersWidth,modifiedLayoutInfo=modifiedOptions.get(133),modifiedLineNumbersWidth=10+modifiedLayoutInfo.glyphMarginWidth+modifiedLayoutInfo.lineNumbersWidth;for(let i=0;i<=cnt;i++){const originalLine=0===originalLineStart?0:originalLineStart+i,modifiedLine=0===modifiedLineStart?0:modifiedLineStart+i,row=document.createElement("div");row.style.minWidth=width+"px",row.className=rowClassName,row.setAttribute("role","listitem"),0!==modifiedLine&&(modLine=modifiedLine),row.setAttribute("data-line",String(modLine));const cell=document.createElement("div");cell.className="diff-review-cell",cell.style.height=`${lineHeight}px`,row.appendChild(cell);const originalLineNumber=document.createElement("span");originalLineNumber.style.width=originalLineNumbersWidth+"px",originalLineNumber.style.minWidth=originalLineNumbersWidth+"px",originalLineNumber.className="diff-review-line-number"+lineNumbersExtraClassName,0!==originalLine?originalLineNumber.appendChild(document.createTextNode(String(originalLine))):originalLineNumber.innerText=" ",cell.appendChild(originalLineNumber);const modifiedLineNumber=document.createElement("span");modifiedLineNumber.style.width=modifiedLineNumbersWidth+"px",modifiedLineNumber.style.minWidth=modifiedLineNumbersWidth+"px",modifiedLineNumber.style.paddingRight="10px",modifiedLineNumber.className="diff-review-line-number"+lineNumbersExtraClassName,0!==modifiedLine?modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine))):modifiedLineNumber.innerText=" ",cell.appendChild(modifiedLineNumber);const spacer=document.createElement("span");if(spacer.className="diff-review-spacer",spacerIcon){const spacerCodicon=document.createElement("span");spacerCodicon.className=ThemeIcon.asClassName(spacerIcon),spacerCodicon.innerText="  ",spacer.appendChild(spacerCodicon)}else spacer.innerText="  ";let lineContent;if(cell.appendChild(spacer),0!==modifiedLine){let html=this._renderLine(modifiedModel,modifiedOptions,modifiedModelOpts.tabSize,modifiedLine,languageIdCodec);DiffReview._ttPolicy&&(html=DiffReview._ttPolicy.createHTML(html)),cell.insertAdjacentHTML("beforeend",html),lineContent=modifiedModel.getLineContent(modifiedLine)}else{let html=this._renderLine(originalModel,originalOptions,originalModelOpts.tabSize,originalLine,languageIdCodec);DiffReview._ttPolicy&&(html=DiffReview._ttPolicy.createHTML(html)),cell.insertAdjacentHTML("beforeend",html),lineContent=originalModel.getLineContent(originalLine)}0===lineContent.length&&(lineContent=nls.localize("blankLine","blank"));let ariaLabel="";switch(type){case 0:ariaLabel=originalLine===modifiedLine?nls.localize({key:"unchangedLine",comment:["The placeholders are contents of the line and should not be translated."]},"{0} unchanged line {1}",lineContent,originalLine):nls.localize("equalLine","{0} original line {1} modified line {2}",lineContent,originalLine,modifiedLine);break;case 1:ariaLabel=nls.localize("insertLine","+ {0} modified line {1}",lineContent,modifiedLine);break;case 2:ariaLabel=nls.localize("deleteLine","- {0} original line {1}",lineContent,originalLine)}row.setAttribute("aria-label",ariaLabel),dest.appendChild(row)}}static _renderLine(model,options,tabSize,lineNumber,languageIdCodec){const lineContent=model.getLineContent(lineNumber),fontInfo=options.get(46),lineTokens=LineTokens.createEmpty(lineContent,languageIdCodec),isBasicASCII=ViewLineRenderingData.isBasicASCII(lineContent,model.mightContainNonBasicASCII()),containsRTL=ViewLineRenderingData.containsRTL(lineContent,isBasicASCII,model.mightContainRTL());return renderViewLine(new RenderLineInput(fontInfo.isMonospace&&!options.get(29),fontInfo.canUseHalfwidthRightwardsArrow,lineContent,!1,isBasicASCII,containsRTL,0,lineTokens,[],tabSize,0,fontInfo.spaceWidth,fontInfo.middotWidth,fontInfo.wsmiddotWidth,options.get(107),options.get(90),options.get(85),options.get(47)!==EditorFontLigatures.OFF,null)).html}};DiffReview._ttPolicy=null===(_a=window.trustedTypes)||void 0===_a?void 0:_a.createPolicy("diffReview",{createHTML:value=>value}),DiffReview=__decorate([__param(1,ILanguageService)],DiffReview);export{DiffReview};registerThemingParticipant(((theme,collector)=>{const lineNumbers=theme.getColor(editorLineNumbers);lineNumbers&&collector.addRule(`.monaco-diff-editor .diff-review-line-number { color: ${lineNumbers}; }`);const shadow=theme.getColor(scrollbarShadow);shadow&&collector.addRule(`.monaco-diff-editor .diff-review-shadow { box-shadow: ${shadow} 0 -6px 6px -6px inset; }`)}));class DiffReviewNext extends EditorAction{constructor(){super({id:"editor.action.diffReview.next",label:nls.localize("editor.action.diffReview.next","Go to Next Difference"),alias:"Go to Next Difference",precondition:ContextKeyExpr.has("isInDiffEditor"),kbOpts:{kbExpr:null,primary:65,weight:100}})}run(accessor,editor){const diffEditor=findFocusedDiffEditor(accessor);diffEditor&&diffEditor.diffReviewNext()}}class DiffReviewPrev extends EditorAction{constructor(){super({id:"editor.action.diffReview.prev",label:nls.localize("editor.action.diffReview.prev","Go to Previous Difference"),alias:"Go to Previous Difference",precondition:ContextKeyExpr.has("isInDiffEditor"),kbOpts:{kbExpr:null,primary:1089,weight:100}})}run(accessor,editor){const diffEditor=findFocusedDiffEditor(accessor);diffEditor&&diffEditor.diffReviewPrev()}}function findFocusedDiffEditor(accessor){const codeEditorService=accessor.get(ICodeEditorService),diffEditors=codeEditorService.listDiffEditors(),activeCodeEditor=codeEditorService.getActiveCodeEditor();if(!activeCodeEditor)return null;for(let i=0,len=diffEditors.length;i<len;i++){const diffEditor=diffEditors[i];if(diffEditor.getModifiedEditor().getId()===activeCodeEditor.getId()||diffEditor.getOriginalEditor().getId()===activeCodeEditor.getId())return diffEditor}return null}registerEditorAction(DiffReviewNext),registerEditorAction(DiffReviewPrev);