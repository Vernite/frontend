import"./glyphMargin.css";import{DynamicViewOverlay}from"../../view/dynamicViewOverlay.js";export class DecorationToRender{constructor(startLineNumber,endLineNumber,className){this._decorationToRenderBrand=void 0,this.startLineNumber=+startLineNumber,this.endLineNumber=+endLineNumber,this.className=String(className)}}export class DedupOverlay extends DynamicViewOverlay{_render(visibleStartLineNumber,visibleEndLineNumber,decorations){const output=[];for(let lineNumber=visibleStartLineNumber;lineNumber<=visibleEndLineNumber;lineNumber++){output[lineNumber-visibleStartLineNumber]=[]}if(0===decorations.length)return output;decorations.sort(((a,b)=>a.className===b.className?a.startLineNumber===b.startLineNumber?a.endLineNumber-b.endLineNumber:a.startLineNumber-b.startLineNumber:a.className<b.className?-1:1));let prevClassName=null,prevEndLineIndex=0;for(let i=0,len=decorations.length;i<len;i++){const d=decorations[i],className=d.className;let startLineIndex=Math.max(d.startLineNumber,visibleStartLineNumber)-visibleStartLineNumber;const endLineIndex=Math.min(d.endLineNumber,visibleEndLineNumber)-visibleStartLineNumber;prevClassName===className?(startLineIndex=Math.max(prevEndLineIndex+1,startLineIndex),prevEndLineIndex=Math.max(prevEndLineIndex,endLineIndex)):(prevClassName=className,prevEndLineIndex=endLineIndex);for(let i=startLineIndex;i<=prevEndLineIndex;i++)output[i].push(prevClassName)}return output}}export class GlyphMarginOverlay extends DedupOverlay{constructor(context){super(),this._context=context;const options=this._context.configuration.options,layoutInfo=options.get(133);this._lineHeight=options.get(61),this._glyphMargin=options.get(52),this._glyphMarginLeft=layoutInfo.glyphMarginLeft,this._glyphMarginWidth=layoutInfo.glyphMarginWidth,this._renderResult=null,this._context.addEventHandler(this)}dispose(){this._context.removeEventHandler(this),this._renderResult=null,super.dispose()}onConfigurationChanged(e){const options=this._context.configuration.options,layoutInfo=options.get(133);return this._lineHeight=options.get(61),this._glyphMargin=options.get(52),this._glyphMarginLeft=layoutInfo.glyphMarginLeft,this._glyphMarginWidth=layoutInfo.glyphMarginWidth,!0}onDecorationsChanged(e){return!0}onFlushed(e){return!0}onLinesChanged(e){return!0}onLinesDeleted(e){return!0}onLinesInserted(e){return!0}onScrollChanged(e){return e.scrollTopChanged}onZonesChanged(e){return!0}_getDecorations(ctx){const decorations=ctx.getDecorationsInViewport(),r=[];let rLen=0;for(let i=0,len=decorations.length;i<len;i++){const d=decorations[i],glyphMarginClassName=d.options.glyphMarginClassName;glyphMarginClassName&&(r[rLen++]=new DecorationToRender(d.range.startLineNumber,d.range.endLineNumber,glyphMarginClassName))}return r}prepareRender(ctx){if(!this._glyphMargin)return void(this._renderResult=null);const visibleStartLineNumber=ctx.visibleRange.startLineNumber,visibleEndLineNumber=ctx.visibleRange.endLineNumber,toRender=this._render(visibleStartLineNumber,visibleEndLineNumber,this._getDecorations(ctx)),lineHeight=this._lineHeight.toString(),common='" style="left:'+this._glyphMarginLeft.toString()+"px;width:"+this._glyphMarginWidth.toString()+"px;height:"+lineHeight+'px;"></div>',output=[];for(let lineNumber=visibleStartLineNumber;lineNumber<=visibleEndLineNumber;lineNumber++){const lineIndex=lineNumber-visibleStartLineNumber,classNames=toRender[lineIndex];0===classNames.length?output[lineIndex]="":output[lineIndex]='<div class="cgmr codicon '+classNames.join(" ")+common}this._renderResult=output}render(startLineNumber,lineNumber){if(!this._renderResult)return"";const lineIndex=lineNumber-startLineNumber;return lineIndex<0||lineIndex>=this._renderResult.length?"":this._renderResult[lineIndex]}}