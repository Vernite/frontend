import{EditOperation}from"../../../common/core/editOperation.js";import{Range}from"../../../common/core/range.js";export class SortLinesCommand{constructor(selection,descending){this.selection=selection,this.descending=descending,this.selectionId=null}static getCollator(){return SortLinesCommand._COLLATOR||(SortLinesCommand._COLLATOR=new Intl.Collator),SortLinesCommand._COLLATOR}getEditOperations(model,builder){const op=sortLines(model,this.selection,this.descending);op&&builder.addEditOperation(op.range,op.text),this.selectionId=builder.trackSelection(this.selection)}computeCursorState(model,helper){return helper.getTrackedSelection(this.selectionId)}static canRun(model,selection,descending){if(null===model)return!1;const data=getSortData(model,selection,descending);if(!data)return!1;for(let i=0,len=data.before.length;i<len;i++)if(data.before[i]!==data.after[i])return!0;return!1}}function getSortData(model,selection,descending){const startLineNumber=selection.startLineNumber;let endLineNumber=selection.endLineNumber;if(1===selection.endColumn&&endLineNumber--,startLineNumber>=endLineNumber)return null;const linesToSort=[];for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++)linesToSort.push(model.getLineContent(lineNumber));let sorted=linesToSort.slice(0);return sorted.sort(SortLinesCommand.getCollator().compare),!0===descending&&(sorted=sorted.reverse()),{startLineNumber,endLineNumber,before:linesToSort,after:sorted}}function sortLines(model,selection,descending){const data=getSortData(model,selection,descending);return data?EditOperation.replace(new Range(data.startLineNumber,1,data.endLineNumber,model.getLineMaxColumn(data.endLineNumber)),data.after.join("\n")):null}SortLinesCommand._COLLATOR=null;