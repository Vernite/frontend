import{once}from"../../../../base/common/functional.js";import{DisposableStore,MutableDisposable,toDisposable}from"../../../../base/common/lifecycle.js";import{withNullAsUndefined}from"../../../../base/common/types.js";import{getCodeEditor,isDiffEditor}from"../../../browser/editorBrowser.js";import{OverviewRulerLane}from"../../../common/model.js";import{overviewRulerRangeHighlight}from"../../../common/core/editorColorRegistry.js";import{themeColorFromId}from"../../../../platform/theme/common/themeService.js";export class AbstractEditorNavigationQuickAccessProvider{constructor(options){this.options=options,this.rangeHighlightDecorationId=void 0}provide(picker,token){var _a;const disposables=new DisposableStore;picker.canAcceptInBackground=!!(null===(_a=this.options)||void 0===_a?void 0:_a.canAcceptInBackground),picker.matchOnLabel=picker.matchOnDescription=picker.matchOnDetail=picker.sortByLabel=!1;const pickerDisposable=disposables.add(new MutableDisposable);return pickerDisposable.value=this.doProvide(picker,token),disposables.add(this.onDidActiveTextEditorControlChange((()=>{pickerDisposable.value=void 0,pickerDisposable.value=this.doProvide(picker,token)}))),disposables}doProvide(picker,token){const disposables=new DisposableStore,editor=this.activeTextEditorControl;if(editor&&this.canProvideWithTextEditor(editor)){const context={editor},codeEditor=getCodeEditor(editor);if(codeEditor){let lastKnownEditorViewState=withNullAsUndefined(editor.saveViewState());disposables.add(codeEditor.onDidChangeCursorPosition((()=>{lastKnownEditorViewState=withNullAsUndefined(editor.saveViewState())}))),context.restoreViewState=()=>{lastKnownEditorViewState&&editor===this.activeTextEditorControl&&editor.restoreViewState(lastKnownEditorViewState)},disposables.add(once(token.onCancellationRequested)((()=>{var _a;return null===(_a=context.restoreViewState)||void 0===_a?void 0:_a.call(context)})))}disposables.add(toDisposable((()=>this.clearDecorations(editor)))),disposables.add(this.provideWithTextEditor(context,picker,token))}else disposables.add(this.provideWithoutTextEditor(picker,token));return disposables}canProvideWithTextEditor(editor){return!0}gotoLocation({editor},options){editor.setSelection(options.range),editor.revealRangeInCenter(options.range,0),options.preserveFocus||editor.focus()}getModel(editor){var _a;return isDiffEditor(editor)?null===(_a=editor.getModel())||void 0===_a?void 0:_a.modified:editor.getModel()}addDecorations(editor,range){editor.changeDecorations((changeAccessor=>{const deleteDecorations=[];this.rangeHighlightDecorationId&&(deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId),deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId),this.rangeHighlightDecorationId=void 0);const newDecorations=[{range,options:{description:"quick-access-range-highlight",className:"rangeHighlight",isWholeLine:!0}},{range,options:{description:"quick-access-range-highlight-overview",overviewRuler:{color:themeColorFromId(overviewRulerRangeHighlight),position:OverviewRulerLane.Full}}}],[rangeHighlightId,overviewRulerDecorationId]=changeAccessor.deltaDecorations(deleteDecorations,newDecorations);this.rangeHighlightDecorationId={rangeHighlightId,overviewRulerDecorationId}}))}clearDecorations(editor){const rangeHighlightDecorationId=this.rangeHighlightDecorationId;rangeHighlightDecorationId&&(editor.changeDecorations((changeAccessor=>{changeAccessor.deltaDecorations([rangeHighlightDecorationId.overviewRulerDecorationId,rangeHighlightDecorationId.rangeHighlightId],[])})),this.rangeHighlightDecorationId=void 0)}}