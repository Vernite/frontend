import{CursorColumns}from"../../../core/cursorColumns.js";import{lengthAdd,lengthGetLineCount,lengthToObj,lengthZero}from"./length.js";import{SmallImmutableSet}from"./smallImmutableSet.js";class BaseAstNode{constructor(length){this._length=length}get length(){return this._length}}export class PairAstNode extends BaseAstNode{constructor(length,openingBracket,child,closingBracket,missingOpeningBracketIds){super(length),this.openingBracket=openingBracket,this.child=child,this.closingBracket=closingBracket,this.missingOpeningBracketIds=missingOpeningBracketIds}static create(openingBracket,child,closingBracket){let length=openingBracket.length;return child&&(length=lengthAdd(length,child.length)),closingBracket&&(length=lengthAdd(length,closingBracket.length)),new PairAstNode(length,openingBracket,child,closingBracket,child?child.missingOpeningBracketIds:SmallImmutableSet.getEmpty())}get kind(){return 2}get listHeight(){return 0}get childrenLength(){return 3}getChild(idx){switch(idx){case 0:return this.openingBracket;case 1:return this.child;case 2:return this.closingBracket}throw new Error("Invalid child index")}get children(){const result=new Array;return result.push(this.openingBracket),this.child&&result.push(this.child),this.closingBracket&&result.push(this.closingBracket),result}canBeReused(openBracketIds){return null!==this.closingBracket&&!openBracketIds.intersects(this.missingOpeningBracketIds)}deepClone(){return new PairAstNode(this.length,this.openingBracket.deepClone(),this.child&&this.child.deepClone(),this.closingBracket&&this.closingBracket.deepClone(),this.missingOpeningBracketIds)}computeMinIndentation(offset,textModel){return this.child?this.child.computeMinIndentation(lengthAdd(offset,this.openingBracket.length),textModel):Number.MAX_SAFE_INTEGER}}export class ListAstNode extends BaseAstNode{constructor(length,listHeight,_missingOpeningBracketIds){super(length),this.listHeight=listHeight,this._missingOpeningBracketIds=_missingOpeningBracketIds,this.cachedMinIndentation=-1}static create23(item1,item2,item3,immutable=!1){let length=item1.length,missingBracketIds=item1.missingOpeningBracketIds;if(item1.listHeight!==item2.listHeight)throw new Error("Invalid list heights");if(length=lengthAdd(length,item2.length),missingBracketIds=missingBracketIds.merge(item2.missingOpeningBracketIds),item3){if(item1.listHeight!==item3.listHeight)throw new Error("Invalid list heights");length=lengthAdd(length,item3.length),missingBracketIds=missingBracketIds.merge(item3.missingOpeningBracketIds)}return immutable?new Immutable23ListAstNode(length,item1.listHeight+1,item1,item2,item3,missingBracketIds):new TwoThreeListAstNode(length,item1.listHeight+1,item1,item2,item3,missingBracketIds)}static getEmpty(){return new ImmutableArrayListAstNode(lengthZero,0,[],SmallImmutableSet.getEmpty())}get kind(){return 4}get missingOpeningBracketIds(){return this._missingOpeningBracketIds}throwIfImmutable(){}makeLastElementMutable(){this.throwIfImmutable();const childCount=this.childrenLength;if(0===childCount)return;const lastChild=this.getChild(childCount-1),mutable=4===lastChild.kind?lastChild.toMutable():lastChild;return lastChild!==mutable&&this.setChild(childCount-1,mutable),mutable}makeFirstElementMutable(){this.throwIfImmutable();if(0===this.childrenLength)return;const firstChild=this.getChild(0),mutable=4===firstChild.kind?firstChild.toMutable():firstChild;return firstChild!==mutable&&this.setChild(0,mutable),mutable}canBeReused(openBracketIds){if(openBracketIds.intersects(this.missingOpeningBracketIds))return!1;let lastLength,lastChild=this;for(;4===lastChild.kind&&(lastLength=lastChild.childrenLength)>0;)lastChild=lastChild.getChild(lastLength-1);return lastChild.canBeReused(openBracketIds)}handleChildrenChanged(){this.throwIfImmutable();const count=this.childrenLength;let length=this.getChild(0).length,unopenedBrackets=this.getChild(0).missingOpeningBracketIds;for(let i=1;i<count;i++){const child=this.getChild(i);length=lengthAdd(length,child.length),unopenedBrackets=unopenedBrackets.merge(child.missingOpeningBracketIds)}this._length=length,this._missingOpeningBracketIds=unopenedBrackets,this.cachedMinIndentation=-1}computeMinIndentation(offset,textModel){if(-1!==this.cachedMinIndentation)return this.cachedMinIndentation;let minIndentation=Number.MAX_SAFE_INTEGER,childOffset=offset;for(let i=0;i<this.childrenLength;i++){const child=this.getChild(i);child&&(minIndentation=Math.min(minIndentation,child.computeMinIndentation(childOffset,textModel)),childOffset=lengthAdd(childOffset,child.length))}return this.cachedMinIndentation=minIndentation,minIndentation}}class TwoThreeListAstNode extends ListAstNode{constructor(length,listHeight,_item1,_item2,_item3,missingOpeningBracketIds){super(length,listHeight,missingOpeningBracketIds),this._item1=_item1,this._item2=_item2,this._item3=_item3}get childrenLength(){return null!==this._item3?3:2}getChild(idx){switch(idx){case 0:return this._item1;case 1:return this._item2;case 2:return this._item3}throw new Error("Invalid child index")}setChild(idx,node){switch(idx){case 0:return void(this._item1=node);case 1:return void(this._item2=node);case 2:return void(this._item3=node)}throw new Error("Invalid child index")}get children(){return this._item3?[this._item1,this._item2,this._item3]:[this._item1,this._item2]}get item1(){return this._item1}get item2(){return this._item2}get item3(){return this._item3}deepClone(){return new TwoThreeListAstNode(this.length,this.listHeight,this._item1.deepClone(),this._item2.deepClone(),this._item3?this._item3.deepClone():null,this.missingOpeningBracketIds)}appendChildOfSameHeight(node){if(this._item3)throw new Error("Cannot append to a full (2,3) tree node");this.throwIfImmutable(),this._item3=node,this.handleChildrenChanged()}unappendChild(){if(!this._item3)throw new Error("Cannot remove from a non-full (2,3) tree node");this.throwIfImmutable();const result=this._item3;return this._item3=null,this.handleChildrenChanged(),result}prependChildOfSameHeight(node){if(this._item3)throw new Error("Cannot prepend to a full (2,3) tree node");this.throwIfImmutable(),this._item3=this._item2,this._item2=this._item1,this._item1=node,this.handleChildrenChanged()}unprependChild(){if(!this._item3)throw new Error("Cannot remove from a non-full (2,3) tree node");this.throwIfImmutable();const result=this._item1;return this._item1=this._item2,this._item2=this._item3,this._item3=null,this.handleChildrenChanged(),result}toMutable(){return this}}class Immutable23ListAstNode extends TwoThreeListAstNode{toMutable(){return new TwoThreeListAstNode(this.length,this.listHeight,this.item1,this.item2,this.item3,this.missingOpeningBracketIds)}throwIfImmutable(){throw new Error("this instance is immutable")}}class ArrayListAstNode extends ListAstNode{constructor(length,listHeight,_children,missingOpeningBracketIds){super(length,listHeight,missingOpeningBracketIds),this._children=_children}get childrenLength(){return this._children.length}getChild(idx){return this._children[idx]}setChild(idx,child){this._children[idx]=child}get children(){return this._children}deepClone(){const children=new Array(this._children.length);for(let i=0;i<this._children.length;i++)children[i]=this._children[i].deepClone();return new ArrayListAstNode(this.length,this.listHeight,children,this.missingOpeningBracketIds)}appendChildOfSameHeight(node){this.throwIfImmutable(),this._children.push(node),this.handleChildrenChanged()}unappendChild(){this.throwIfImmutable();const item=this._children.pop();return this.handleChildrenChanged(),item}prependChildOfSameHeight(node){this.throwIfImmutable(),this._children.unshift(node),this.handleChildrenChanged()}unprependChild(){this.throwIfImmutable();const item=this._children.shift();return this.handleChildrenChanged(),item}toMutable(){return this}}class ImmutableArrayListAstNode extends ArrayListAstNode{toMutable(){return new ArrayListAstNode(this.length,this.listHeight,[...this.children],this.missingOpeningBracketIds)}throwIfImmutable(){throw new Error("this instance is immutable")}}const emptyArray=[];class ImmutableLeafAstNode extends BaseAstNode{get listHeight(){return 0}get childrenLength(){return 0}getChild(idx){return null}get children(){return emptyArray}deepClone(){return this}}export class TextAstNode extends ImmutableLeafAstNode{get kind(){return 0}get missingOpeningBracketIds(){return SmallImmutableSet.getEmpty()}canBeReused(_openedBracketIds){return!0}computeMinIndentation(offset,textModel){const start=lengthToObj(offset),startLineNumber=(0===start.columnCount?start.lineCount:start.lineCount+1)+1,endLineNumber=lengthGetLineCount(lengthAdd(offset,this.length))+1;let result=Number.MAX_SAFE_INTEGER;for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){const firstNonWsColumn=textModel.getLineFirstNonWhitespaceColumn(lineNumber),lineContent=textModel.getLineContent(lineNumber);if(0===firstNonWsColumn)continue;const visibleColumn=CursorColumns.visibleColumnFromColumn(lineContent,firstNonWsColumn,textModel.getOptions().tabSize);result=Math.min(result,visibleColumn)}return result}}export class BracketAstNode extends ImmutableLeafAstNode{constructor(length,bracketInfo,bracketIds){super(length),this.bracketInfo=bracketInfo,this.bracketIds=bracketIds}static create(length,bracketInfo,bracketIds){return new BracketAstNode(length,bracketInfo,bracketIds)}get kind(){return 1}get missingOpeningBracketIds(){return SmallImmutableSet.getEmpty()}get text(){return this.bracketInfo.bracketText}get languageId(){return this.bracketInfo.languageId}canBeReused(_openedBracketIds){return!1}computeMinIndentation(offset,textModel){return Number.MAX_SAFE_INTEGER}}export class InvalidBracketAstNode extends ImmutableLeafAstNode{constructor(closingBrackets,length){super(length),this.missingOpeningBracketIds=closingBrackets}get kind(){return 3}canBeReused(openedBracketIds){return!openedBracketIds.intersects(this.missingOpeningBracketIds)}computeMinIndentation(offset,textModel){return Number.MAX_SAFE_INTEGER}}