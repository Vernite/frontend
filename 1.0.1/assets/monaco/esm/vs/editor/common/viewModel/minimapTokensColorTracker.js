import{Emitter}from"../../../base/common/event.js";import{Disposable,markAsSingleton}from"../../../base/common/lifecycle.js";import{RGBA8}from"../core/rgba.js";import{TokenizationRegistry}from"../languages.js";export class MinimapTokensColorTracker extends Disposable{constructor(){super(),this._onDidChange=new Emitter,this.onDidChange=this._onDidChange.event,this._updateColorMap(),this._register(TokenizationRegistry.onDidChange((e=>{e.changedColorMap&&this._updateColorMap()})))}static getInstance(){return this._INSTANCE||(this._INSTANCE=markAsSingleton(new MinimapTokensColorTracker)),this._INSTANCE}_updateColorMap(){const colorMap=TokenizationRegistry.getColorMap();if(!colorMap)return this._colors=[RGBA8.Empty],void(this._backgroundIsLight=!0);this._colors=[RGBA8.Empty];for(let colorId=1;colorId<colorMap.length;colorId++){const source=colorMap[colorId].rgba;this._colors[colorId]=new RGBA8(source.r,source.g,source.b,Math.round(255*source.a))}const backgroundLuminosity=colorMap[2].getRelativeLuminance();this._backgroundIsLight=backgroundLuminosity>=.5,this._onDidChange.fire(void 0)}getColor(colorId){return(colorId<1||colorId>=this._colors.length)&&(colorId=2),this._colors[colorId]}backgroundIsLight(){return this._backgroundIsLight}}MinimapTokensColorTracker._INSTANCE=null;