import{onUnexpectedError}from"../../../../base/common/errors.js";import*as strings from"../../../../base/common/strings.js";import{IndentAction}from"../languageConfiguration.js";export class OnEnterSupport{constructor(opts){(opts=opts||{}).brackets=opts.brackets||[["(",")"],["{","}"],["[","]"]],this._brackets=[],opts.brackets.forEach((bracket=>{const openRegExp=OnEnterSupport._createOpenBracketRegExp(bracket[0]),closeRegExp=OnEnterSupport._createCloseBracketRegExp(bracket[1]);openRegExp&&closeRegExp&&this._brackets.push({open:bracket[0],openRegExp,close:bracket[1],closeRegExp})})),this._regExpRules=opts.onEnterRules||[]}onEnter(autoIndent,previousLineText,beforeEnterText,afterEnterText){if(autoIndent>=3)for(let i=0,len=this._regExpRules.length;i<len;i++){const rule=this._regExpRules[i];if([{reg:rule.beforeText,text:beforeEnterText},{reg:rule.afterText,text:afterEnterText},{reg:rule.previousLineText,text:previousLineText}].every((obj=>!obj.reg||(obj.reg.lastIndex=0,obj.reg.test(obj.text)))))return rule.action}if(autoIndent>=2&&beforeEnterText.length>0&&afterEnterText.length>0)for(let i=0,len=this._brackets.length;i<len;i++){const bracket=this._brackets[i];if(bracket.openRegExp.test(beforeEnterText)&&bracket.closeRegExp.test(afterEnterText))return{indentAction:IndentAction.IndentOutdent}}if(autoIndent>=2&&beforeEnterText.length>0)for(let i=0,len=this._brackets.length;i<len;i++){if(this._brackets[i].openRegExp.test(beforeEnterText))return{indentAction:IndentAction.Indent}}return null}static _createOpenBracketRegExp(bracket){let str=strings.escapeRegExpCharacters(bracket);return/\B/.test(str.charAt(0))||(str="\\b"+str),str+="\\s*$",OnEnterSupport._safeRegExp(str)}static _createCloseBracketRegExp(bracket){let str=strings.escapeRegExpCharacters(bracket);return/\B/.test(str.charAt(str.length-1))||(str+="\\b"),str="^\\s*"+str,OnEnterSupport._safeRegExp(str)}static _safeRegExp(def){try{return new RegExp(def)}catch(err){return onUnexpectedError(err),null}}}