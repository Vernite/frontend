/*! For license information please see monaco.contribution.js.LICENSE.txt */
import"../../editor/editor.api.js";var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__copyProps=(to,from,except,desc)=>{if(from&&"object"==typeof from||"function"==typeof from)for(let key of __getOwnPropNames(from))__hasOwnProp.call(to,key)||key===except||__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to},__reExport=(target,mod,secondTarget)=>(__copyProps(target,mod,"default"),secondTarget&&__copyProps(secondTarget,mod,"default")),monaco_editor_core_exports={};__reExport(monaco_editor_core_exports,monaco_editor_core_star);import*as monaco_editor_core_star from"../../editor/editor.api.js";var LanguageServiceDefaultsImpl=class{_onDidChange=new monaco_editor_core_exports.Emitter;_diagnosticsOptions;_modeConfiguration;_languageId;constructor(languageId,diagnosticsOptions,modeConfiguration){this._languageId=languageId,this.setDiagnosticsOptions(diagnosticsOptions),this.setModeConfiguration(modeConfiguration)}get onDidChange(){return this._onDidChange.event}get languageId(){return this._languageId}get modeConfiguration(){return this._modeConfiguration}get diagnosticsOptions(){return this._diagnosticsOptions}setDiagnosticsOptions(options){this._diagnosticsOptions=options||Object.create(null),this._onDidChange.fire(this)}setModeConfiguration(modeConfiguration){this._modeConfiguration=modeConfiguration||Object.create(null),this._onDidChange.fire(this)}},diagnosticDefault={validate:!0,allowComments:!0,schemas:[],enableSchemaRequest:!1,schemaRequest:"warning",schemaValidation:"warning",comments:"error",trailingCommas:"error"},modeConfigurationDefault={documentFormattingEdits:!0,documentRangeFormattingEdits:!0,completionItems:!0,hovers:!0,documentSymbols:!0,tokens:!0,colors:!0,foldingRanges:!0,diagnostics:!0,selectionRanges:!0},jsonDefaults=new LanguageServiceDefaultsImpl("json",diagnosticDefault,modeConfigurationDefault);function getMode(){return import("./jsonMode.js")}monaco_editor_core_exports.languages.json={jsonDefaults},monaco_editor_core_exports.languages.register({id:"json",extensions:[".json",".bowerrc",".jshintrc",".jscsrc",".eslintrc",".babelrc",".har"],aliases:["JSON","json"],mimetypes:["application/json"]}),monaco_editor_core_exports.languages.onLanguage("json",(()=>{getMode().then((mode=>mode.setupMode(jsonDefaults)))}));export{jsonDefaults};