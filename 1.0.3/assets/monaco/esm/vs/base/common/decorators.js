export function memoize(_target,key,descriptor){let fnKey=null,fn=null;if("function"==typeof descriptor.value?(fnKey="value",fn=descriptor.value,0!==fn.length&&console.warn("Memoize should only be used in functions with zero parameters")):"function"==typeof descriptor.get&&(fnKey="get",fn=descriptor.get),!fn)throw new Error("not supported");const memoizeKey=`$memoize$${key}`;descriptor[fnKey]=function(...args){return this.hasOwnProperty(memoizeKey)||Object.defineProperty(this,memoizeKey,{configurable:!1,enumerable:!1,writable:!1,value:fn.apply(this,args)}),this[memoizeKey]}}