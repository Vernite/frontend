import{KeyCodeUtils,IMMUTABLE_CODE_TO_KEY_CODE}from"../../../base/common/keyCodes.js";import{ChordKeybinding,SimpleKeybinding}from"../../../base/common/keybindings.js";import{BaseResolvedKeybinding}from"./baseResolvedKeybinding.js";import{removeElementsAfterNulls}from"./resolvedKeybindingItem.js";export class USLayoutResolvedKeybinding extends BaseResolvedKeybinding{constructor(actual,os){super(os,actual.parts)}_keyCodeToUILabel(keyCode){if(2===this._os)switch(keyCode){case 15:return"←";case 16:return"↑";case 17:return"→";case 18:return"↓"}return KeyCodeUtils.toString(keyCode)}_getLabel(keybinding){return keybinding.isDuplicateModifierCase()?"":this._keyCodeToUILabel(keybinding.keyCode)}_getAriaLabel(keybinding){return keybinding.isDuplicateModifierCase()?"":KeyCodeUtils.toString(keybinding.keyCode)}_getElectronAccelerator(keybinding){return KeyCodeUtils.toElectronAccelerator(keybinding.keyCode)}_getDispatchPart(keybinding){return USLayoutResolvedKeybinding.getDispatchStr(keybinding)}static getDispatchStr(keybinding){if(keybinding.isModifierKey())return null;let result="";return keybinding.ctrlKey&&(result+="ctrl+"),keybinding.shiftKey&&(result+="shift+"),keybinding.altKey&&(result+="alt+"),keybinding.metaKey&&(result+="meta+"),result+=KeyCodeUtils.toString(keybinding.keyCode),result}_getSingleModifierDispatchPart(keybinding){return 5!==keybinding.keyCode||keybinding.shiftKey||keybinding.altKey||keybinding.metaKey?4!==keybinding.keyCode||keybinding.ctrlKey||keybinding.altKey||keybinding.metaKey?6!==keybinding.keyCode||keybinding.ctrlKey||keybinding.shiftKey||keybinding.metaKey?57!==keybinding.keyCode||keybinding.ctrlKey||keybinding.shiftKey||keybinding.altKey?null:"meta":"alt":"shift":"ctrl"}static _scanCodeToKeyCode(scanCode){const immutableKeyCode=IMMUTABLE_CODE_TO_KEY_CODE[scanCode];if(-1!==immutableKeyCode)return immutableKeyCode;switch(scanCode){case 10:return 31;case 11:return 32;case 12:return 33;case 13:return 34;case 14:return 35;case 15:return 36;case 16:return 37;case 17:return 38;case 18:return 39;case 19:return 40;case 20:return 41;case 21:return 42;case 22:return 43;case 23:return 44;case 24:return 45;case 25:return 46;case 26:return 47;case 27:return 48;case 28:return 49;case 29:return 50;case 30:return 51;case 31:return 52;case 32:return 53;case 33:return 54;case 34:return 55;case 35:return 56;case 36:return 22;case 37:return 23;case 38:return 24;case 39:return 25;case 40:return 26;case 41:return 27;case 42:return 28;case 43:return 29;case 44:return 30;case 45:return 21;case 51:return 83;case 52:return 81;case 53:return 87;case 54:return 89;case 55:return 88;case 56:return 0;case 57:return 80;case 58:return 90;case 59:return 86;case 60:return 82;case 61:return 84;case 62:return 85;case 106:return 92}return 0}static _resolveSimpleUserBinding(binding){if(!binding)return null;if(binding instanceof SimpleKeybinding)return binding;const keyCode=this._scanCodeToKeyCode(binding.scanCode);return 0===keyCode?null:new SimpleKeybinding(binding.ctrlKey,binding.shiftKey,binding.altKey,binding.metaKey,keyCode)}static resolveUserBinding(input,os){const parts=removeElementsAfterNulls(input.map((keybinding=>this._resolveSimpleUserBinding(keybinding))));return parts.length>0?[new USLayoutResolvedKeybinding(new ChordKeybinding(parts),os)]:[]}}