var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{coalesce}from"../../../../base/common/arrays.js";import{CancellationToken}from"../../../../base/common/cancellation.js";import{onUnexpectedExternalError}from"../../../../base/common/errors.js";import{DisposableStore,isDisposable}from"../../../../base/common/lifecycle.js";import{assertType}from"../../../../base/common/types.js";import{URI}from"../../../../base/common/uri.js";import{Range}from"../../../common/core/range.js";import{IModelService}from"../../../common/services/model.js";import{CommandsRegistry}from"../../../../platform/commands/common/commands.js";import{ILanguageFeaturesService}from"../../../common/services/languageFeatures.js";export class Link{constructor(link,provider){this._link=link,this._provider=provider}toJSON(){return{range:this.range,url:this.url,tooltip:this.tooltip}}get range(){return this._link.range}get url(){return this._link.url}get tooltip(){return this._link.tooltip}resolve(token){return __awaiter(this,void 0,void 0,(function*(){return this._link.url?this._link.url:"function"==typeof this._provider.resolveLink?Promise.resolve(this._provider.resolveLink(this._link,token)).then((value=>(this._link=value||this._link,this._link.url?this.resolve(token):Promise.reject(new Error("missing"))))):Promise.reject(new Error("missing"))}))}}export class LinksList{constructor(tuples){this._disposables=new DisposableStore;let links=[];for(const[list,provider]of tuples){const newLinks=list.links.map((link=>new Link(link,provider)));links=LinksList._union(links,newLinks),isDisposable(list)&&this._disposables.add(list)}this.links=links}dispose(){this._disposables.dispose(),this.links.length=0}static _union(oldLinks,newLinks){const result=[];let oldIndex,oldLen,newIndex,newLen;for(oldIndex=0,newIndex=0,oldLen=oldLinks.length,newLen=newLinks.length;oldIndex<oldLen&&newIndex<newLen;){const oldLink=oldLinks[oldIndex],newLink=newLinks[newIndex];if(Range.areIntersectingOrTouching(oldLink.range,newLink.range)){oldIndex++;continue}Range.compareRangesUsingStarts(oldLink.range,newLink.range)<0?(result.push(oldLink),oldIndex++):(result.push(newLink),newIndex++)}for(;oldIndex<oldLen;oldIndex++)result.push(oldLinks[oldIndex]);for(;newIndex<newLen;newIndex++)result.push(newLinks[newIndex]);return result}}export function getLinks(providers,model,token){const lists=[],promises=providers.ordered(model).reverse().map(((provider,i)=>Promise.resolve(provider.provideLinks(model,token)).then((result=>{result&&(lists[i]=[result,provider])}),onUnexpectedExternalError)));return Promise.all(promises).then((()=>{const result=new LinksList(coalesce(lists));return token.isCancellationRequested?(result.dispose(),new LinksList([])):result}))}CommandsRegistry.registerCommand("_executeLinkProvider",((accessor,...args)=>__awaiter(void 0,void 0,void 0,(function*(){let[uri,resolveCount]=args;assertType(uri instanceof URI),"number"!=typeof resolveCount&&(resolveCount=0);const{linkProvider}=accessor.get(ILanguageFeaturesService),model=accessor.get(IModelService).getModel(uri);if(!model)return[];const list=yield getLinks(linkProvider,model,CancellationToken.None);if(!list)return[];for(let i=0;i<Math.min(resolveCount,list.links.length);i++)yield list.links[i].resolve(CancellationToken.None);const result=list.links.slice(0);return list.dispose(),result}))));