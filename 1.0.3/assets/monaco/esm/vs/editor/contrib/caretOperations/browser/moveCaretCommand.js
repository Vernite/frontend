import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";export class MoveCaretCommand{constructor(selection,isMovingLeft){this._selection=selection,this._isMovingLeft=isMovingLeft}getEditOperations(model,builder){if(this._selection.startLineNumber!==this._selection.endLineNumber||this._selection.isEmpty())return;const lineNumber=this._selection.startLineNumber,startColumn=this._selection.startColumn,endColumn=this._selection.endColumn;if((!this._isMovingLeft||1!==startColumn)&&(this._isMovingLeft||endColumn!==model.getLineMaxColumn(lineNumber)))if(this._isMovingLeft){const rangeBefore=new Range(lineNumber,startColumn-1,lineNumber,startColumn),charBefore=model.getValueInRange(rangeBefore);builder.addEditOperation(rangeBefore,null),builder.addEditOperation(new Range(lineNumber,endColumn,lineNumber,endColumn),charBefore)}else{const rangeAfter=new Range(lineNumber,endColumn,lineNumber,endColumn+1),charAfter=model.getValueInRange(rangeAfter);builder.addEditOperation(rangeAfter,null),builder.addEditOperation(new Range(lineNumber,startColumn,lineNumber,startColumn),charAfter)}}computeCursorState(model,helper){return this._isMovingLeft?new Selection(this._selection.startLineNumber,this._selection.startColumn-1,this._selection.endLineNumber,this._selection.endColumn-1):new Selection(this._selection.startLineNumber,this._selection.startColumn+1,this._selection.endLineNumber,this._selection.endColumn+1)}}