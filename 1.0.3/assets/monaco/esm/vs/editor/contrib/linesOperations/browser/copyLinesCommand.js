import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";export class CopyLinesCommand{constructor(selection,isCopyingDown,noop){this._selection=selection,this._isCopyingDown=isCopyingDown,this._noop=noop||!1,this._selectionDirection=0,this._selectionId=null,this._startLineNumberDelta=0,this._endLineNumberDelta=0}getEditOperations(model,builder){let s=this._selection;this._startLineNumberDelta=0,this._endLineNumberDelta=0,s.startLineNumber<s.endLineNumber&&1===s.endColumn&&(this._endLineNumberDelta=1,s=s.setEndPosition(s.endLineNumber-1,model.getLineMaxColumn(s.endLineNumber-1)));const sourceLines=[];for(let i=s.startLineNumber;i<=s.endLineNumber;i++)sourceLines.push(model.getLineContent(i));const sourceText=sourceLines.join("\n");""===sourceText&&this._isCopyingDown&&(this._startLineNumberDelta++,this._endLineNumberDelta++),this._noop?builder.addEditOperation(new Range(s.endLineNumber,model.getLineMaxColumn(s.endLineNumber),s.endLineNumber+1,1),s.endLineNumber===model.getLineCount()?"":"\n"):this._isCopyingDown?builder.addEditOperation(new Range(s.startLineNumber,1,s.startLineNumber,1),sourceText+"\n"):builder.addEditOperation(new Range(s.endLineNumber,model.getLineMaxColumn(s.endLineNumber),s.endLineNumber,model.getLineMaxColumn(s.endLineNumber)),"\n"+sourceText),this._selectionId=builder.trackSelection(s),this._selectionDirection=this._selection.getDirection()}computeCursorState(model,helper){let result=helper.getTrackedSelection(this._selectionId);if(0!==this._startLineNumberDelta||0!==this._endLineNumberDelta){let startLineNumber=result.startLineNumber,startColumn=result.startColumn,endLineNumber=result.endLineNumber,endColumn=result.endColumn;0!==this._startLineNumberDelta&&(startLineNumber+=this._startLineNumberDelta,startColumn=1),0!==this._endLineNumberDelta&&(endLineNumber+=this._endLineNumberDelta,endColumn=1),result=Selection.createWithDirection(startLineNumber,startColumn,endLineNumber,endColumn,this._selectionDirection)}return result}}