import{assertNever}from"../../base/common/types.js";import{Position}from"./core/position.js";import{InjectedTextCursorStops}from"./model.js";export class ModelLineProjectionData{constructor(injectionOffsets,injectionOptions,breakOffsets,breakOffsetsVisibleColumn,wrappedTextIndentLength){this.injectionOffsets=injectionOffsets,this.injectionOptions=injectionOptions,this.breakOffsets=breakOffsets,this.breakOffsetsVisibleColumn=breakOffsetsVisibleColumn,this.wrappedTextIndentLength=wrappedTextIndentLength}getOutputLineCount(){return this.breakOffsets.length}getMinOutputOffset(outputLineIndex){return outputLineIndex>0?this.wrappedTextIndentLength:0}getLineLength(outputLineIndex){const startOffset=outputLineIndex>0?this.breakOffsets[outputLineIndex-1]:0;let lineLength=this.breakOffsets[outputLineIndex]-startOffset;return outputLineIndex>0&&(lineLength+=this.wrappedTextIndentLength),lineLength}getMaxOutputOffset(outputLineIndex){return this.getLineLength(outputLineIndex)}translateToInputOffset(outputLineIndex,outputOffset){outputLineIndex>0&&(outputOffset=Math.max(0,outputOffset-this.wrappedTextIndentLength));let offsetInInput=0===outputLineIndex?outputOffset:this.breakOffsets[outputLineIndex-1]+outputOffset;if(null!==this.injectionOffsets)for(let i=0;i<this.injectionOffsets.length&&offsetInInput>this.injectionOffsets[i];i++)offsetInInput<this.injectionOffsets[i]+this.injectionOptions[i].content.length?offsetInInput=this.injectionOffsets[i]:offsetInInput-=this.injectionOptions[i].content.length;return offsetInInput}translateToOutputPosition(inputOffset,affinity=2){let inputOffsetInInputWithInjection=inputOffset;if(null!==this.injectionOffsets)for(let i=0;i<this.injectionOffsets.length&&!(inputOffset<this.injectionOffsets[i])&&(1===affinity||inputOffset!==this.injectionOffsets[i]);i++)inputOffsetInInputWithInjection+=this.injectionOptions[i].content.length;return this.offsetInInputWithInjectionsToOutputPosition(inputOffsetInInputWithInjection,affinity)}offsetInInputWithInjectionsToOutputPosition(offsetInInputWithInjections,affinity=2){let low=0,high=this.breakOffsets.length-1,mid=0,midStart=0;for(;low<=high;){mid=low+(high-low)/2|0;const midStop=this.breakOffsets[mid];if(midStart=mid>0?this.breakOffsets[mid-1]:0,0===affinity)if(offsetInInputWithInjections<=midStart)high=mid-1;else{if(!(offsetInInputWithInjections>midStop))break;low=mid+1}else if(offsetInInputWithInjections<midStart)high=mid-1;else{if(!(offsetInInputWithInjections>=midStop))break;low=mid+1}}let outputOffset=offsetInInputWithInjections-midStart;return mid>0&&(outputOffset+=this.wrappedTextIndentLength),new OutputPosition(mid,outputOffset)}normalizeOutputPosition(outputLineIndex,outputOffset,affinity){if(null!==this.injectionOffsets){const offsetInInputWithInjections=this.outputPositionToOffsetInInputWithInjections(outputLineIndex,outputOffset),normalizedOffsetInUnwrappedLine=this.normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections,affinity);if(normalizedOffsetInUnwrappedLine!==offsetInInputWithInjections)return this.offsetInInputWithInjectionsToOutputPosition(normalizedOffsetInUnwrappedLine,affinity)}if(0===affinity){if(outputLineIndex>0&&outputOffset===this.getMinOutputOffset(outputLineIndex))return new OutputPosition(outputLineIndex-1,this.getMaxOutputOffset(outputLineIndex-1))}else if(1===affinity){if(outputLineIndex<this.getOutputLineCount()-1&&outputOffset===this.getMaxOutputOffset(outputLineIndex))return new OutputPosition(outputLineIndex+1,this.getMinOutputOffset(outputLineIndex+1))}return new OutputPosition(outputLineIndex,outputOffset)}outputPositionToOffsetInInputWithInjections(outputLineIndex,outputOffset){outputLineIndex>0&&(outputOffset=Math.max(0,outputOffset-this.wrappedTextIndentLength));return(outputLineIndex>0?this.breakOffsets[outputLineIndex-1]:0)+outputOffset}normalizeOffsetInInputWithInjectionsAroundInjections(offsetInInputWithInjections,affinity){const injectedText=this.getInjectedTextAtOffset(offsetInInputWithInjections);if(!injectedText)return offsetInInputWithInjections;if(2===affinity){if(offsetInInputWithInjections===injectedText.offsetInInputWithInjections+injectedText.length&&hasRightCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops))return injectedText.offsetInInputWithInjections+injectedText.length;{let result=injectedText.offsetInInputWithInjections;if(hasLeftCursorStop(this.injectionOptions[injectedText.injectedTextIndex].cursorStops))return result;let index=injectedText.injectedTextIndex-1;for(;index>=0&&this.injectionOffsets[index]===this.injectionOffsets[injectedText.injectedTextIndex]&&!hasRightCursorStop(this.injectionOptions[index].cursorStops)&&(result-=this.injectionOptions[index].content.length,!hasLeftCursorStop(this.injectionOptions[index].cursorStops));)index--;return result}}if(1===affinity||4===affinity){let result=injectedText.offsetInInputWithInjections+injectedText.length,index=injectedText.injectedTextIndex;for(;index+1<this.injectionOffsets.length&&this.injectionOffsets[index+1]===this.injectionOffsets[index];)result+=this.injectionOptions[index+1].content.length,index++;return result}if(0===affinity||3===affinity){let result=injectedText.offsetInInputWithInjections,index=injectedText.injectedTextIndex;for(;index-1>=0&&this.injectionOffsets[index-1]===this.injectionOffsets[index];)result-=this.injectionOptions[index-1].content.length,index--;return result}assertNever(affinity)}getInjectedText(outputLineIndex,outputOffset){const offset=this.outputPositionToOffsetInInputWithInjections(outputLineIndex,outputOffset),injectedText=this.getInjectedTextAtOffset(offset);return injectedText?{options:this.injectionOptions[injectedText.injectedTextIndex]}:null}getInjectedTextAtOffset(offsetInInputWithInjections){const injectionOffsets=this.injectionOffsets,injectionOptions=this.injectionOptions;if(null!==injectionOffsets){let totalInjectedTextLengthBefore=0;for(let i=0;i<injectionOffsets.length;i++){const length=injectionOptions[i].content.length,injectedTextStartOffsetInInputWithInjections=injectionOffsets[i]+totalInjectedTextLengthBefore,injectedTextEndOffsetInInputWithInjections=injectionOffsets[i]+totalInjectedTextLengthBefore+length;if(injectedTextStartOffsetInInputWithInjections>offsetInInputWithInjections)break;if(offsetInInputWithInjections<=injectedTextEndOffsetInInputWithInjections)return{injectedTextIndex:i,offsetInInputWithInjections:injectedTextStartOffsetInInputWithInjections,length};totalInjectedTextLengthBefore+=length}}}}function hasRightCursorStop(cursorStop){return null==cursorStop||(cursorStop===InjectedTextCursorStops.Right||cursorStop===InjectedTextCursorStops.Both)}function hasLeftCursorStop(cursorStop){return null==cursorStop||(cursorStop===InjectedTextCursorStops.Left||cursorStop===InjectedTextCursorStops.Both)}export class InjectedText{constructor(options){this.options=options}}export class OutputPosition{constructor(outputLineIndex,outputOffset){this.outputLineIndex=outputLineIndex,this.outputOffset=outputOffset}toString(){return`${this.outputLineIndex}:${this.outputOffset}`}toPosition(baseLineNumber){return new Position(baseLineNumber+this.outputLineIndex,this.outputOffset+1)}}