import{Schemas}from"../../../base/common/network.js";import{DataUri}from"../../../base/common/resources.js";import{PLAINTEXT_LANGUAGE_ID}from"../languages/modesRegistry.js";import{FileKind}from"../../../platform/files/common/files.js";const fileIconDirectoryRegex=/(?:\/|^)(?:([^\/]+)\/)?([^\/]+)$/;export function getIconClasses(modelService,languageService,resource,fileKind){const classes=fileKind===FileKind.ROOT_FOLDER?["rootfolder-icon"]:fileKind===FileKind.FOLDER?["folder-icon"]:["file-icon"];if(resource){let name;if(resource.scheme===Schemas.data){name=DataUri.parseMetaData(resource).get(DataUri.META_DATA_LABEL)}else{const match=resource.path.match(fileIconDirectoryRegex);match?(name=cssEscape(match[2].toLowerCase()),match[1]&&classes.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`)):name=cssEscape(resource.authority.toLowerCase())}if(fileKind===FileKind.FOLDER)classes.push(`${name}-name-folder-icon`);else{if(name){if(classes.push(`${name}-name-file-icon`),classes.push("name-file-icon"),name.length<=255){const dotSegments=name.split(".");for(let i=1;i<dotSegments.length;i++)classes.push(`${dotSegments.slice(i).join(".")}-ext-file-icon`)}classes.push("ext-file-icon")}const detectedLanguageId=detectLanguageId(modelService,languageService,resource);detectedLanguageId&&classes.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`)}}return classes}function detectLanguageId(modelService,languageService,resource){if(!resource)return null;let languageId=null;if(resource.scheme===Schemas.data){const mime=DataUri.parseMetaData(resource).get(DataUri.META_DATA_MIME);mime&&(languageId=languageService.getLanguageIdByMimeType(mime))}else{const model=modelService.getModel(resource);model&&(languageId=model.getLanguageId())}return languageId&&languageId!==PLAINTEXT_LANGUAGE_ID?languageId:languageService.guessLanguageIdByFilepathOrFirstLine(resource)}export function cssEscape(str){return str.replace(/[\11\12\14\15\40]/g,"/")}