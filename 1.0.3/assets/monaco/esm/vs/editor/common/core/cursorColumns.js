import*as strings from"../../../base/common/strings.js";export class CursorColumns{static _nextVisibleColumn(codePoint,visibleColumn,tabSize){return 9===codePoint?CursorColumns.nextRenderTabStop(visibleColumn,tabSize):strings.isFullWidthCharacter(codePoint)||strings.isEmojiImprecise(codePoint)?visibleColumn+2:visibleColumn+1}static visibleColumnFromColumn(lineContent,column,tabSize){const textLen=Math.min(column-1,lineContent.length),text=lineContent.substring(0,textLen),iterator=new strings.GraphemeIterator(text);let result=0;for(;!iterator.eol();){const codePoint=strings.getNextCodePoint(text,textLen,iterator.offset);iterator.nextGraphemeLength(),result=this._nextVisibleColumn(codePoint,result,tabSize)}return result}static columnFromVisibleColumn(lineContent,visibleColumn,tabSize){if(visibleColumn<=0)return 1;const lineContentLength=lineContent.length,iterator=new strings.GraphemeIterator(lineContent);let beforeVisibleColumn=0,beforeColumn=1;for(;!iterator.eol();){const codePoint=strings.getNextCodePoint(lineContent,lineContentLength,iterator.offset);iterator.nextGraphemeLength();const afterVisibleColumn=this._nextVisibleColumn(codePoint,beforeVisibleColumn,tabSize),afterColumn=iterator.offset+1;if(afterVisibleColumn>=visibleColumn){return afterVisibleColumn-visibleColumn<visibleColumn-beforeVisibleColumn?afterColumn:beforeColumn}beforeVisibleColumn=afterVisibleColumn,beforeColumn=afterColumn}return lineContentLength+1}static nextRenderTabStop(visibleColumn,tabSize){return visibleColumn+tabSize-visibleColumn%tabSize}static nextIndentTabStop(visibleColumn,indentSize){return visibleColumn+indentSize-visibleColumn%indentSize}static prevRenderTabStop(column,tabSize){return Math.max(0,column-1-(column-1)%tabSize)}static prevIndentTabStop(column,indentSize){return Math.max(0,column-1-(column-1)%indentSize)}}