import{ArrayQueue}from"../../../base/common/arrays.js";import{RunOnceScheduler}from"../../../base/common/async.js";import{Color}from"../../../base/common/color.js";import{Disposable}from"../../../base/common/lifecycle.js";import*as platform from"../../../base/common/platform.js";import*as strings from"../../../base/common/strings.js";import{EDITOR_FONT_DEFAULTS,filterValidationDecorations}from"../config/editorOptions.js";import{CursorsController}from"../cursor/cursor.js";import{CursorConfiguration}from"../cursorCommon.js";import{Position}from"../core/position.js";import{Range}from"../core/range.js";import*as textModelEvents from"../textModelEvents.js";import{TokenizationRegistry}from"../languages.js";import{PLAINTEXT_LANGUAGE_ID}from"../languages/modesRegistry.js";import{tokenizeLineToHTML}from"../languages/textToHtmlTokenizer.js";import*as viewEvents from"../viewEvents.js";import{ViewLayout}from"../viewLayout/viewLayout.js";import{MinimapTokensColorTracker}from"./minimapTokensColorTracker.js";import{MinimapLinesRenderingData,OverviewRulerDecorationsGroup,ViewLineRenderingData}from"../viewModel.js";import{ViewModelDecorations}from"./viewModelDecorations.js";import{FocusChangedEvent,HiddenAreasChangedEvent,ModelContentChangedEvent,ModelDecorationsChangedEvent,ModelLanguageChangedEvent,ModelLanguageConfigurationChangedEvent,ModelOptionsChangedEvent,ModelTokensChangedEvent,ReadOnlyEditAttemptEvent,ScrollChangedEvent,ViewModelEventDispatcher,ViewZonesChangedEvent}from"../viewModelEventDispatcher.js";import{ViewModelLinesFromModelAsIs,ViewModelLinesFromProjectedModel}from"./viewModelLines.js";const USE_IDENTITY_LINES_COLLECTION=!0;export class ViewModel extends Disposable{constructor(editorId,configuration,model,domLineBreaksComputerFactory,monospaceLineBreaksComputerFactory,scheduleAtNextAnimationFrame,languageConfigurationService,_themeService){if(super(),this.languageConfigurationService=languageConfigurationService,this._themeService=_themeService,this._editorId=editorId,this._configuration=configuration,this.model=model,this._eventDispatcher=new ViewModelEventDispatcher,this.onEvent=this._eventDispatcher.onEvent,this.cursorConfig=new CursorConfiguration(this.model.getLanguageId(),this.model.getOptions(),this._configuration,this.languageConfigurationService),this._tokenizeViewportSoon=this._register(new RunOnceScheduler((()=>this.tokenizeViewport()),50)),this._updateConfigurationViewLineCount=this._register(new RunOnceScheduler((()=>this._updateConfigurationViewLineCountNow()),0)),this._hasFocus=!1,this._viewportStart=ViewportStart.create(this.model),this.model.isTooLargeForTokenization())this._lines=new ViewModelLinesFromModelAsIs(this.model);else{const options=this._configuration.options,fontInfo=options.get(46),wrappingStrategy=options.get(127),wrappingInfo=options.get(134),wrappingIndent=options.get(126);this._lines=new ViewModelLinesFromProjectedModel(this._editorId,this.model,domLineBreaksComputerFactory,monospaceLineBreaksComputerFactory,fontInfo,this.model.getOptions().tabSize,wrappingStrategy,wrappingInfo.wrappingColumn,wrappingIndent)}this.coordinatesConverter=this._lines.createCoordinatesConverter(),this._cursor=this._register(new CursorsController(model,this,this.coordinatesConverter,this.cursorConfig)),this.viewLayout=this._register(new ViewLayout(this._configuration,this.getLineCount(),scheduleAtNextAnimationFrame)),this._register(this.viewLayout.onDidScroll((e=>{e.scrollTopChanged&&this._tokenizeViewportSoon.schedule(),e.scrollTopChanged&&this._viewportStart.invalidate(),this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e)),this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth,e.oldScrollLeft,e.oldScrollHeight,e.oldScrollTop,e.scrollWidth,e.scrollLeft,e.scrollHeight,e.scrollTop))}))),this._register(this.viewLayout.onDidContentSizeChange((e=>{this._eventDispatcher.emitOutgoingEvent(e)}))),this._decorations=new ViewModelDecorations(this._editorId,this.model,this._configuration,this._lines,this.coordinatesConverter),this._registerModelEvents(),this._register(this._configuration.onDidChangeFast((e=>{try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();this._onConfigurationChanged(eventsCollector,e)}finally{this._eventDispatcher.endEmitViewEvents()}}))),this._register(MinimapTokensColorTracker.getInstance().onDidChange((()=>{this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent)}))),this._register(this._themeService.onDidColorThemeChange((theme=>{this._invalidateDecorationsColorCache(),this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme))}))),this._updateConfigurationViewLineCountNow()}dispose(){super.dispose(),this._decorations.dispose(),this._lines.dispose(),this._viewportStart.dispose(),this._eventDispatcher.dispose()}createLineBreaksComputer(){return this._lines.createLineBreaksComputer()}addViewEventHandler(eventHandler){this._eventDispatcher.addViewEventHandler(eventHandler)}removeViewEventHandler(eventHandler){this._eventDispatcher.removeViewEventHandler(eventHandler)}_updateConfigurationViewLineCountNow(){this._configuration.setViewLineCount(this._lines.getViewLineCount())}tokenizeViewport(){const linesViewportData=this.viewLayout.getLinesViewportData(),viewVisibleRange=new Range(linesViewportData.startLineNumber,this.getLineMinColumn(linesViewportData.startLineNumber),linesViewportData.endLineNumber,this.getLineMaxColumn(linesViewportData.endLineNumber)),modelVisibleRanges=this._toModelVisibleRanges(viewVisibleRange);for(const modelVisibleRange of modelVisibleRanges)this.model.tokenization.tokenizeViewport(modelVisibleRange.startLineNumber,modelVisibleRange.endLineNumber)}setHasFocus(hasFocus){this._hasFocus=hasFocus,this._cursor.setHasFocus(hasFocus),this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus)),this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus,hasFocus))}onCompositionStart(){this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent)}onCompositionEnd(){this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent)}_onConfigurationChanged(eventsCollector,e){let previousViewportStartModelPosition=null;if(this._viewportStart.isValid){const previousViewportStartViewPosition=new Position(this._viewportStart.viewLineNumber,this.getLineMinColumn(this._viewportStart.viewLineNumber));previousViewportStartModelPosition=this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition)}let restorePreviousViewportStart=!1;const options=this._configuration.options,fontInfo=options.get(46),wrappingStrategy=options.get(127),wrappingInfo=options.get(134),wrappingIndent=options.get(126);if(this._lines.setWrappingSettings(fontInfo,wrappingStrategy,wrappingInfo.wrappingColumn,wrappingIndent)&&(eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent),eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent),eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged(),this.viewLayout.onFlushed(this.getLineCount()),0!==this.viewLayout.getCurrentScrollTop()&&(restorePreviousViewportStart=!0),this._updateConfigurationViewLineCount.schedule()),e.hasChanged(83)&&(this._decorations.reset(),eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null))),eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e)),this.viewLayout.onConfigurationChanged(e),restorePreviousViewportStart&&previousViewportStartModelPosition){const viewPosition=this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition),viewPositionTop=this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);this.viewLayout.setScrollPosition({scrollTop:viewPositionTop+this._viewportStart.startLineDelta},1)}CursorConfiguration.shouldRecreate(e)&&(this.cursorConfig=new CursorConfiguration(this.model.getLanguageId(),this.model.getOptions(),this._configuration,this.languageConfigurationService),this._cursor.updateConfiguration(this.cursorConfig))}_registerModelEvents(){this._register(this.model.onDidChangeContentOrInjectedText((e=>{try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();let hadOtherModelChange=!1,hadModelLineChangeThatChangedLineMapping=!1;const changes=e instanceof textModelEvents.InternalModelContentChangeEvent?e.rawContentChangedEvent.changes:e.changes,versionId=e instanceof textModelEvents.InternalModelContentChangeEvent?e.rawContentChangedEvent.versionId:null,lineBreaksComputer=this._lines.createLineBreaksComputer();for(const change of changes)switch(change.changeType){case 4:for(let lineIdx=0;lineIdx<change.detail.length;lineIdx++){const line=change.detail[lineIdx];let injectedText=change.injectedTexts[lineIdx];injectedText&&(injectedText=injectedText.filter((element=>!element.ownerId||element.ownerId===this._editorId))),lineBreaksComputer.addRequest(line,injectedText,null)}break;case 2:{let injectedText=null;change.injectedText&&(injectedText=change.injectedText.filter((element=>!element.ownerId||element.ownerId===this._editorId))),lineBreaksComputer.addRequest(change.detail,injectedText,null);break}}const lineBreaks=lineBreaksComputer.finalize(),lineBreakQueue=new ArrayQueue(lineBreaks);for(const change of changes)switch(change.changeType){case 1:this._lines.onModelFlushed(),eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent),this._decorations.reset(),this.viewLayout.onFlushed(this.getLineCount()),hadOtherModelChange=!0;break;case 3:{const linesDeletedEvent=this._lines.onModelLinesDeleted(versionId,change.fromLineNumber,change.toLineNumber);null!==linesDeletedEvent&&(eventsCollector.emitViewEvent(linesDeletedEvent),this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber,linesDeletedEvent.toLineNumber)),hadOtherModelChange=!0;break}case 4:{const insertedLineBreaks=lineBreakQueue.takeCount(change.detail.length),linesInsertedEvent=this._lines.onModelLinesInserted(versionId,change.fromLineNumber,change.toLineNumber,insertedLineBreaks);null!==linesInsertedEvent&&(eventsCollector.emitViewEvent(linesInsertedEvent),this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber,linesInsertedEvent.toLineNumber)),hadOtherModelChange=!0;break}case 2:{const changedLineBreakData=lineBreakQueue.dequeue(),[lineMappingChanged,linesChangedEvent,linesInsertedEvent,linesDeletedEvent]=this._lines.onModelLineChanged(versionId,change.lineNumber,changedLineBreakData);hadModelLineChangeThatChangedLineMapping=lineMappingChanged,linesChangedEvent&&eventsCollector.emitViewEvent(linesChangedEvent),linesInsertedEvent&&(eventsCollector.emitViewEvent(linesInsertedEvent),this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber,linesInsertedEvent.toLineNumber)),linesDeletedEvent&&(eventsCollector.emitViewEvent(linesDeletedEvent),this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber,linesDeletedEvent.toLineNumber));break}}null!==versionId&&this._lines.acceptVersionId(versionId),this.viewLayout.onHeightMaybeChanged(),!hadOtherModelChange&&hadModelLineChangeThatChangedLineMapping&&(eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent),eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged())}finally{this._eventDispatcher.endEmitViewEvents()}const viewportStartWasValid=this._viewportStart.isValid;if(this._viewportStart.invalidate(),this._configuration.setModelLineCount(this.model.getLineCount()),this._updateConfigurationViewLineCountNow(),!this._hasFocus&&this.model.getAttachedEditorCount()>=2&&viewportStartWasValid){const modelRange=this.model._getTrackedRange(this._viewportStart.modelTrackedRange);if(modelRange){const viewPosition=this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition()),viewPositionTop=this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);this.viewLayout.setScrollPosition({scrollTop:viewPositionTop+this._viewportStart.startLineDelta},1)}}try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();e instanceof textModelEvents.InternalModelContentChangeEvent&&eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent)),this._cursor.onModelContentChanged(eventsCollector,e)}finally{this._eventDispatcher.endEmitViewEvents()}this._tokenizeViewportSoon.schedule()}))),this._register(this.model.onDidChangeTokens((e=>{const viewRanges=[];for(let j=0,lenJ=e.ranges.length;j<lenJ;j++){const modelRange=e.ranges[j],viewStartLineNumber=this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber,1)).lineNumber,viewEndLineNumber=this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber,this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;viewRanges[j]={fromLineNumber:viewStartLineNumber,toLineNumber:viewEndLineNumber}}this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges)),e.tokenizationSupportChanged&&this._tokenizeViewportSoon.schedule(),this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e))}))),this._register(this.model.onDidChangeLanguageConfiguration((e=>{this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent),this.cursorConfig=new CursorConfiguration(this.model.getLanguageId(),this.model.getOptions(),this._configuration,this.languageConfigurationService),this._cursor.updateConfiguration(this.cursorConfig),this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e))}))),this._register(this.model.onDidChangeLanguage((e=>{this.cursorConfig=new CursorConfiguration(this.model.getLanguageId(),this.model.getOptions(),this._configuration,this.languageConfigurationService),this._cursor.updateConfiguration(this.cursorConfig),this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e))}))),this._register(this.model.onDidChangeOptions((e=>{if(this._lines.setTabSize(this.model.getOptions().tabSize)){try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent),eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent),eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged(),this.viewLayout.onFlushed(this.getLineCount())}finally{this._eventDispatcher.endEmitViewEvents()}this._updateConfigurationViewLineCount.schedule()}this.cursorConfig=new CursorConfiguration(this.model.getLanguageId(),this.model.getOptions(),this._configuration,this.languageConfigurationService),this._cursor.updateConfiguration(this.cursorConfig),this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e))}))),this._register(this.model.onDidChangeDecorations((e=>{this._decorations.onModelDecorationsChanged(),this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e)),this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e))})))}setHiddenAreas(ranges){let lineMappingChanged=!1;try{const eventsCollector=this._eventDispatcher.beginEmitViewEvents();lineMappingChanged=this._lines.setHiddenAreas(ranges),lineMappingChanged&&(eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent),eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent),eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null)),this._cursor.onLineMappingChanged(eventsCollector),this._decorations.onLineMappingChanged(),this.viewLayout.onFlushed(this.getLineCount()),this.viewLayout.onHeightMaybeChanged())}finally{this._eventDispatcher.endEmitViewEvents()}this._updateConfigurationViewLineCount.schedule(),lineMappingChanged&&this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent)}getVisibleRangesPlusViewportAboveBelow(){const layoutInfo=this._configuration.options.get(133),lineHeight=this._configuration.options.get(61),linesAround=Math.max(20,Math.round(layoutInfo.height/lineHeight)),partialData=this.viewLayout.getLinesViewportData(),startViewLineNumber=Math.max(1,partialData.completelyVisibleStartLineNumber-linesAround),endViewLineNumber=Math.min(this.getLineCount(),partialData.completelyVisibleEndLineNumber+linesAround);return this._toModelVisibleRanges(new Range(startViewLineNumber,this.getLineMinColumn(startViewLineNumber),endViewLineNumber,this.getLineMaxColumn(endViewLineNumber)))}getVisibleRanges(){const visibleViewRange=this.getCompletelyVisibleViewRange();return this._toModelVisibleRanges(visibleViewRange)}getHiddenAreas(){return this._lines.getHiddenAreas()}_toModelVisibleRanges(visibleViewRange){const visibleRange=this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange),hiddenAreas=this._lines.getHiddenAreas();if(0===hiddenAreas.length)return[visibleRange];const result=[];let resultLen=0,startLineNumber=visibleRange.startLineNumber,startColumn=visibleRange.startColumn;const endLineNumber=visibleRange.endLineNumber,endColumn=visibleRange.endColumn;for(let i=0,len=hiddenAreas.length;i<len;i++){const hiddenStartLineNumber=hiddenAreas[i].startLineNumber,hiddenEndLineNumber=hiddenAreas[i].endLineNumber;hiddenEndLineNumber<startLineNumber||(hiddenStartLineNumber>endLineNumber||(startLineNumber<hiddenStartLineNumber&&(result[resultLen++]=new Range(startLineNumber,startColumn,hiddenStartLineNumber-1,this.model.getLineMaxColumn(hiddenStartLineNumber-1))),startLineNumber=hiddenEndLineNumber+1,startColumn=1))}return(startLineNumber<endLineNumber||startLineNumber===endLineNumber&&startColumn<endColumn)&&(result[resultLen++]=new Range(startLineNumber,startColumn,endLineNumber,endColumn)),result}getCompletelyVisibleViewRange(){const partialData=this.viewLayout.getLinesViewportData(),startViewLineNumber=partialData.completelyVisibleStartLineNumber,endViewLineNumber=partialData.completelyVisibleEndLineNumber;return new Range(startViewLineNumber,this.getLineMinColumn(startViewLineNumber),endViewLineNumber,this.getLineMaxColumn(endViewLineNumber))}getCompletelyVisibleViewRangeAtScrollTop(scrollTop){const partialData=this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop),startViewLineNumber=partialData.completelyVisibleStartLineNumber,endViewLineNumber=partialData.completelyVisibleEndLineNumber;return new Range(startViewLineNumber,this.getLineMinColumn(startViewLineNumber),endViewLineNumber,this.getLineMaxColumn(endViewLineNumber))}saveState(){const compatViewState=this.viewLayout.saveState(),scrollTop=compatViewState.scrollTop,firstViewLineNumber=this.viewLayout.getLineNumberAtVerticalOffset(scrollTop),firstPosition=this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber,this.getLineMinColumn(firstViewLineNumber))),firstPositionDeltaTop=this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber)-scrollTop;return{scrollLeft:compatViewState.scrollLeft,firstPosition,firstPositionDeltaTop}}reduceRestoreState(state){if(void 0===state.firstPosition)return this._reduceRestoreStateCompatibility(state);const modelPosition=this.model.validatePosition(state.firstPosition),viewPosition=this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition),scrollTop=this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber)-state.firstPositionDeltaTop;return{scrollLeft:state.scrollLeft,scrollTop}}_reduceRestoreStateCompatibility(state){return{scrollLeft:state.scrollLeft,scrollTop:state.scrollTopWithoutViewZones}}getTabSize(){return this.model.getOptions().tabSize}getLineCount(){return this._lines.getViewLineCount()}setViewport(startLineNumber,endLineNumber,centeredLineNumber){this._viewportStart.update(this,startLineNumber)}getActiveIndentGuide(lineNumber,minLineNumber,maxLineNumber){return this._lines.getActiveIndentGuide(lineNumber,minLineNumber,maxLineNumber)}getLinesIndentGuides(startLineNumber,endLineNumber){return this._lines.getViewLinesIndentGuides(startLineNumber,endLineNumber)}getBracketGuidesInRangeByLine(startLineNumber,endLineNumber,activePosition,options){return this._lines.getViewLinesBracketGuides(startLineNumber,endLineNumber,activePosition,options)}getLineContent(lineNumber){return this._lines.getViewLineContent(lineNumber)}getLineLength(lineNumber){return this._lines.getViewLineLength(lineNumber)}getLineMinColumn(lineNumber){return this._lines.getViewLineMinColumn(lineNumber)}getLineMaxColumn(lineNumber){return this._lines.getViewLineMaxColumn(lineNumber)}getLineFirstNonWhitespaceColumn(lineNumber){const result=strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));return-1===result?0:result+1}getLineLastNonWhitespaceColumn(lineNumber){const result=strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));return-1===result?0:result+2}getDecorationsInViewport(visibleRange){return this._decorations.getDecorationsViewportData(visibleRange).decorations}getInjectedTextAt(viewPosition){return this._lines.getInjectedTextAt(viewPosition)}getViewportViewLineRenderingData(visibleRange,lineNumber){const inlineDecorations=this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations[lineNumber-visibleRange.startLineNumber];return this._getViewLineRenderingData(lineNumber,inlineDecorations)}getViewLineRenderingData(lineNumber){const inlineDecorations=this._decorations.getInlineDecorationsOnLine(lineNumber);return this._getViewLineRenderingData(lineNumber,inlineDecorations)}_getViewLineRenderingData(lineNumber,inlineDecorations){const mightContainRTL=this.model.mightContainRTL(),mightContainNonBasicASCII=this.model.mightContainNonBasicASCII(),tabSize=this.getTabSize(),lineData=this._lines.getViewLineData(lineNumber);return lineData.inlineDecorations&&(inlineDecorations=[...inlineDecorations,...lineData.inlineDecorations.map((d=>d.toInlineDecoration(lineNumber)))]),new ViewLineRenderingData(lineData.minColumn,lineData.maxColumn,lineData.content,lineData.continuesWithWrappedLine,mightContainRTL,mightContainNonBasicASCII,lineData.tokens,inlineDecorations,tabSize,lineData.startVisibleColumn)}getViewLineData(lineNumber){return this._lines.getViewLineData(lineNumber)}getMinimapLinesRenderingData(startLineNumber,endLineNumber,needed){const result=this._lines.getViewLinesData(startLineNumber,endLineNumber,needed);return new MinimapLinesRenderingData(this.getTabSize(),result)}getAllOverviewRulerDecorations(theme){const decorations=this.model.getOverviewRulerDecorations(this._editorId,filterValidationDecorations(this._configuration.options)),result=new OverviewRulerDecorations;for(const decoration of decorations){const decorationOptions=decoration.options,opts=decorationOptions.overviewRuler;if(!opts)continue;const lane=opts.position;if(0===lane)continue;const color=opts.getColor(theme.value),viewStartLineNumber=this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber,decoration.range.startColumn),viewEndLineNumber=this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber,decoration.range.endColumn);result.accept(color,decorationOptions.zIndex,viewStartLineNumber,viewEndLineNumber,lane)}return result.asArray}_invalidateDecorationsColorCache(){const decorations=this.model.getOverviewRulerDecorations();for(const decoration of decorations){const opts1=decoration.options.overviewRuler;opts1&&opts1.invalidateCachedColor();const opts2=decoration.options.minimap;opts2&&opts2.invalidateCachedColor()}}getValueInRange(range,eol){const modelRange=this.coordinatesConverter.convertViewRangeToModelRange(range);return this.model.getValueInRange(modelRange,eol)}deduceModelPositionRelativeToViewPosition(viewAnchorPosition,deltaOffset,lineFeedCnt){const modelAnchor=this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);2===this.model.getEOL().length&&(deltaOffset<0?deltaOffset-=lineFeedCnt:deltaOffset+=lineFeedCnt);const resultOffset=this.model.getOffsetAt(modelAnchor)+deltaOffset;return this.model.getPositionAt(resultOffset)}getPlainTextToCopy(modelRanges,emptySelectionClipboard,forceCRLF){const newLineCharacter=forceCRLF?"\r\n":this.model.getEOL();(modelRanges=modelRanges.slice(0)).sort(Range.compareRangesUsingStarts);let hasEmptyRange=!1,hasNonEmptyRange=!1;for(const range of modelRanges)range.isEmpty()?hasEmptyRange=!0:hasNonEmptyRange=!0;if(!hasNonEmptyRange){if(!emptySelectionClipboard)return"";const modelLineNumbers=modelRanges.map((r=>r.startLineNumber));let result="";for(let i=0;i<modelLineNumbers.length;i++)i>0&&modelLineNumbers[i-1]===modelLineNumbers[i]||(result+=this.model.getLineContent(modelLineNumbers[i])+newLineCharacter);return result}if(hasEmptyRange&&emptySelectionClipboard){const result=[];let prevModelLineNumber=0;for(const modelRange of modelRanges){const modelLineNumber=modelRange.startLineNumber;modelRange.isEmpty()?modelLineNumber!==prevModelLineNumber&&result.push(this.model.getLineContent(modelLineNumber)):result.push(this.model.getValueInRange(modelRange,forceCRLF?2:0)),prevModelLineNumber=modelLineNumber}return 1===result.length?result[0]:result}const result=[];for(const modelRange of modelRanges)modelRange.isEmpty()||result.push(this.model.getValueInRange(modelRange,forceCRLF?2:0));return 1===result.length?result[0]:result}getRichTextToCopy(modelRanges,emptySelectionClipboard){const languageId=this.model.getLanguageId();if(languageId===PLAINTEXT_LANGUAGE_ID)return null;if(1!==modelRanges.length)return null;let range=modelRanges[0];if(range.isEmpty()){if(!emptySelectionClipboard)return null;const lineNumber=range.startLineNumber;range=new Range(lineNumber,this.model.getLineMinColumn(lineNumber),lineNumber,this.model.getLineMaxColumn(lineNumber))}const fontInfo=this._configuration.options.get(46),colorMap=this._getColorMap();let fontFamily;if(/[:;\\\/<>]/.test(fontInfo.fontFamily)||fontInfo.fontFamily===EDITOR_FONT_DEFAULTS.fontFamily)fontFamily=EDITOR_FONT_DEFAULTS.fontFamily;else{fontFamily=fontInfo.fontFamily,fontFamily=fontFamily.replace(/"/g,"'");if(!/[,']/.test(fontFamily)){/[+ ]/.test(fontFamily)&&(fontFamily=`'${fontFamily}'`)}fontFamily=`${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`}return{mode:languageId,html:`<div style="color: ${colorMap[1]};background-color: ${colorMap[2]};font-family: ${fontFamily};font-weight: ${fontInfo.fontWeight};font-size: ${fontInfo.fontSize}px;line-height: ${fontInfo.lineHeight}px;white-space: pre;">`+this._getHTMLToCopy(range,colorMap)+"</div>"}}_getHTMLToCopy(modelRange,colorMap){const startLineNumber=modelRange.startLineNumber,startColumn=modelRange.startColumn,endLineNumber=modelRange.endLineNumber,endColumn=modelRange.endColumn,tabSize=this.getTabSize();let result="";for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){const lineTokens=this.model.tokenization.getLineTokens(lineNumber),lineContent=lineTokens.getLineContent(),startOffset=lineNumber===startLineNumber?startColumn-1:0,endOffset=lineNumber===endLineNumber?endColumn-1:lineContent.length;result+=""===lineContent?"<br>":tokenizeLineToHTML(lineContent,lineTokens.inflate(),colorMap,startOffset,endOffset,tabSize,platform.isWindows)}return result}_getColorMap(){const colorMap=TokenizationRegistry.getColorMap(),result=["#000000"];if(colorMap)for(let i=1,len=colorMap.length;i<len;i++)result[i]=Color.Format.CSS.formatHex(colorMap[i]);return result}getPrimaryCursorState(){return this._cursor.getPrimaryCursorState()}getLastAddedCursorIndex(){return this._cursor.getLastAddedCursorIndex()}getCursorStates(){return this._cursor.getCursorStates()}setCursorStates(source,reason,states){return this._withViewEventsCollector((eventsCollector=>this._cursor.setStates(eventsCollector,source,reason,states)))}getCursorColumnSelectData(){return this._cursor.getCursorColumnSelectData()}getCursorAutoClosedCharacters(){return this._cursor.getAutoClosedCharacters()}setCursorColumnSelectData(columnSelectData){this._cursor.setCursorColumnSelectData(columnSelectData)}getPrevEditOperationType(){return this._cursor.getPrevEditOperationType()}setPrevEditOperationType(type){this._cursor.setPrevEditOperationType(type)}getSelection(){return this._cursor.getSelection()}getSelections(){return this._cursor.getSelections()}getPosition(){return this._cursor.getPrimaryCursorState().modelState.position}setSelections(source,selections,reason=0){this._withViewEventsCollector((eventsCollector=>this._cursor.setSelections(eventsCollector,source,selections,reason)))}saveCursorState(){return this._cursor.saveState()}restoreCursorState(states){this._withViewEventsCollector((eventsCollector=>this._cursor.restoreState(eventsCollector,states)))}_executeCursorEdit(callback){this._cursor.context.cursorConfig.readOnly?this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent):this._withViewEventsCollector(callback)}executeEdits(source,edits,cursorStateComputer){this._executeCursorEdit((eventsCollector=>this._cursor.executeEdits(eventsCollector,source,edits,cursorStateComputer)))}startComposition(){this._executeCursorEdit((eventsCollector=>this._cursor.startComposition(eventsCollector)))}endComposition(source){this._executeCursorEdit((eventsCollector=>this._cursor.endComposition(eventsCollector,source)))}type(text,source){this._executeCursorEdit((eventsCollector=>this._cursor.type(eventsCollector,text,source)))}compositionType(text,replacePrevCharCnt,replaceNextCharCnt,positionDelta,source){this._executeCursorEdit((eventsCollector=>this._cursor.compositionType(eventsCollector,text,replacePrevCharCnt,replaceNextCharCnt,positionDelta,source)))}paste(text,pasteOnNewLine,multicursorText,source){this._executeCursorEdit((eventsCollector=>this._cursor.paste(eventsCollector,text,pasteOnNewLine,multicursorText,source)))}cut(source){this._executeCursorEdit((eventsCollector=>this._cursor.cut(eventsCollector,source)))}executeCommand(command,source){this._executeCursorEdit((eventsCollector=>this._cursor.executeCommand(eventsCollector,command,source)))}executeCommands(commands,source){this._executeCursorEdit((eventsCollector=>this._cursor.executeCommands(eventsCollector,commands,source)))}revealPrimaryCursor(source,revealHorizontal,minimalReveal=!1){this._withViewEventsCollector((eventsCollector=>this._cursor.revealPrimary(eventsCollector,source,minimalReveal,0,revealHorizontal,0)))}revealTopMostCursor(source){const viewPosition=this._cursor.getTopMostViewPosition(),viewRange=new Range(viewPosition.lineNumber,viewPosition.column,viewPosition.lineNumber,viewPosition.column);this._withViewEventsCollector((eventsCollector=>eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source,!1,viewRange,null,0,!0,0))))}revealBottomMostCursor(source){const viewPosition=this._cursor.getBottomMostViewPosition(),viewRange=new Range(viewPosition.lineNumber,viewPosition.column,viewPosition.lineNumber,viewPosition.column);this._withViewEventsCollector((eventsCollector=>eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source,!1,viewRange,null,0,!0,0))))}revealRange(source,revealHorizontal,viewRange,verticalType,scrollType){this._withViewEventsCollector((eventsCollector=>eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source,!1,viewRange,null,verticalType,revealHorizontal,scrollType))))}changeWhitespace(callback){this.viewLayout.changeWhitespace(callback)&&(this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent),this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent))}_withViewEventsCollector(callback){try{return callback(this._eventDispatcher.beginEmitViewEvents())}finally{this._eventDispatcher.endEmitViewEvents()}}normalizePosition(position,affinity){return this._lines.normalizePosition(position,affinity)}getLineIndentColumn(lineNumber){return this._lines.getLineIndentColumn(lineNumber)}}class ViewportStart{constructor(_model,_viewLineNumber,_isValid,_modelTrackedRange,_startLineDelta){this._model=_model,this._viewLineNumber=_viewLineNumber,this._isValid=_isValid,this._modelTrackedRange=_modelTrackedRange,this._startLineDelta=_startLineDelta}static create(model){const viewportStartLineTrackedRange=model._setTrackedRange(null,new Range(1,1,1,1),1);return new ViewportStart(model,1,!1,viewportStartLineTrackedRange,0)}get viewLineNumber(){return this._viewLineNumber}get isValid(){return this._isValid}get modelTrackedRange(){return this._modelTrackedRange}get startLineDelta(){return this._startLineDelta}dispose(){this._model._setTrackedRange(this._modelTrackedRange,null,1)}update(viewModel,startLineNumber){const position=viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber,viewModel.getLineMinColumn(startLineNumber))),viewportStartLineTrackedRange=viewModel.model._setTrackedRange(this._modelTrackedRange,new Range(position.lineNumber,position.column,position.lineNumber,position.column),1),viewportStartLineTop=viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber),scrollTop=viewModel.viewLayout.getCurrentScrollTop();this._viewLineNumber=startLineNumber,this._isValid=!0,this._modelTrackedRange=viewportStartLineTrackedRange,this._startLineDelta=scrollTop-viewportStartLineTop}invalidate(){this._isValid=!1}}class OverviewRulerDecorations{constructor(){this._asMap=Object.create(null),this.asArray=[]}accept(color,zIndex,startLineNumber,endLineNumber,lane){const prevGroup=this._asMap[color];if(prevGroup){const prevData=prevGroup.data,prevLane=prevData[prevData.length-3],prevEndLineNumber=prevData[prevData.length-1];if(prevLane===lane&&prevEndLineNumber+1>=startLineNumber)return void(endLineNumber>prevEndLineNumber&&(prevData[prevData.length-1]=endLineNumber));prevData.push(lane,startLineNumber,endLineNumber)}else{const group=new OverviewRulerDecorationsGroup(color,zIndex,[lane,startLineNumber,endLineNumber]);this._asMap[color]=group,this.asArray.push(group)}}}