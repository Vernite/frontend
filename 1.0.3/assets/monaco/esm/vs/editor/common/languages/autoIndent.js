import*as strings from"../../../base/common/strings.js";import{IndentAction}from"./languageConfiguration.js";import{createScopedLineTokens}from"./supports.js";import{getScopedLineTokens}from"./languageConfigurationRegistry.js";function getPrecedingValidLine(model,lineNumber,indentRulesSupport){const languageId=model.tokenization.getLanguageIdAtPosition(lineNumber,0);if(lineNumber>1){let lastLineNumber,resultLineNumber=-1;for(lastLineNumber=lineNumber-1;lastLineNumber>=1;lastLineNumber--){if(model.tokenization.getLanguageIdAtPosition(lastLineNumber,0)!==languageId)return resultLineNumber;const text=model.getLineContent(lastLineNumber);if(!indentRulesSupport.shouldIgnore(text)&&!/^\s+$/.test(text)&&""!==text)return lastLineNumber;resultLineNumber=lastLineNumber}}return-1}export function getInheritIndentForLine(autoIndent,model,lineNumber,honorIntentialIndent=!0,languageConfigurationService){if(autoIndent<4)return null;const indentRulesSupport=languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;if(!indentRulesSupport)return null;if(lineNumber<=1)return{indentation:"",action:null};const precedingUnIgnoredLine=getPrecedingValidLine(model,lineNumber,indentRulesSupport);if(precedingUnIgnoredLine<0)return null;if(precedingUnIgnoredLine<1)return{indentation:"",action:null};const precedingUnIgnoredLineContent=model.getLineContent(precedingUnIgnoredLine);if(indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent)||indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent))return{indentation:strings.getLeadingWhitespace(precedingUnIgnoredLineContent),action:IndentAction.Indent,line:precedingUnIgnoredLine};if(indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent))return{indentation:strings.getLeadingWhitespace(precedingUnIgnoredLineContent),action:null,line:precedingUnIgnoredLine};{if(1===precedingUnIgnoredLine)return{indentation:strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),action:null,line:precedingUnIgnoredLine};const previousLine=precedingUnIgnoredLine-1,previousLineIndentMetadata=indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));if(!(3&previousLineIndentMetadata)&&4&previousLineIndentMetadata){let stopLine=0;for(let i=previousLine-1;i>0;i--)if(!indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))){stopLine=i;break}return{indentation:strings.getLeadingWhitespace(model.getLineContent(stopLine+1)),action:null,line:stopLine+1}}if(honorIntentialIndent)return{indentation:strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),action:null,line:precedingUnIgnoredLine};for(let i=precedingUnIgnoredLine;i>0;i--){const lineContent=model.getLineContent(i);if(indentRulesSupport.shouldIncrease(lineContent))return{indentation:strings.getLeadingWhitespace(lineContent),action:IndentAction.Indent,line:i};if(indentRulesSupport.shouldIndentNextLine(lineContent)){let stopLine=0;for(let j=i-1;j>0;j--)if(!indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))){stopLine=j;break}return{indentation:strings.getLeadingWhitespace(model.getLineContent(stopLine+1)),action:null,line:stopLine+1}}if(indentRulesSupport.shouldDecrease(lineContent))return{indentation:strings.getLeadingWhitespace(lineContent),action:null,line:i}}return{indentation:strings.getLeadingWhitespace(model.getLineContent(1)),action:null,line:1}}}export function getGoodIndentForLine(autoIndent,virtualModel,languageId,lineNumber,indentConverter,languageConfigurationService){if(autoIndent<4)return null;const richEditSupport=languageConfigurationService.getLanguageConfiguration(languageId);if(!richEditSupport)return null;const indentRulesSupport=languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;if(!indentRulesSupport)return null;const indent=getInheritIndentForLine(autoIndent,virtualModel,lineNumber,void 0,languageConfigurationService),lineContent=virtualModel.getLineContent(lineNumber);if(indent){const inheritLine=indent.line;if(void 0!==inheritLine){const enterResult=richEditSupport.onEnter(autoIndent,"",virtualModel.getLineContent(inheritLine),"");if(enterResult){let indentation=strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));return enterResult.removeText&&(indentation=indentation.substring(0,indentation.length-enterResult.removeText)),enterResult.indentAction===IndentAction.Indent||enterResult.indentAction===IndentAction.IndentOutdent?indentation=indentConverter.shiftIndent(indentation):enterResult.indentAction===IndentAction.Outdent&&(indentation=indentConverter.unshiftIndent(indentation)),indentRulesSupport.shouldDecrease(lineContent)&&(indentation=indentConverter.unshiftIndent(indentation)),enterResult.appendText&&(indentation+=enterResult.appendText),strings.getLeadingWhitespace(indentation)}}return indentRulesSupport.shouldDecrease(lineContent)?indent.action===IndentAction.Indent?indent.indentation:indentConverter.unshiftIndent(indent.indentation):indent.action===IndentAction.Indent?indentConverter.shiftIndent(indent.indentation):indent.indentation}return null}export function getIndentForEnter(autoIndent,model,range,indentConverter,languageConfigurationService){if(autoIndent<4)return null;model.tokenization.forceTokenization(range.startLineNumber);const lineTokens=model.tokenization.getLineTokens(range.startLineNumber),scopedLineTokens=createScopedLineTokens(lineTokens,range.startColumn-1),scopedLineText=scopedLineTokens.getLineContent();let beforeEnterText,afterEnterText,embeddedLanguage=!1;if(scopedLineTokens.firstCharOffset>0&&lineTokens.getLanguageId(0)!==scopedLineTokens.languageId?(embeddedLanguage=!0,beforeEnterText=scopedLineText.substr(0,range.startColumn-1-scopedLineTokens.firstCharOffset)):beforeEnterText=lineTokens.getLineContent().substring(0,range.startColumn-1),range.isEmpty())afterEnterText=scopedLineText.substr(range.startColumn-1-scopedLineTokens.firstCharOffset);else{afterEnterText=getScopedLineTokens(model,range.endLineNumber,range.endColumn).getLineContent().substr(range.endColumn-1-scopedLineTokens.firstCharOffset)}const indentRulesSupport=languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;if(!indentRulesSupport)return null;const beforeEnterResult=beforeEnterText,beforeEnterIndent=strings.getLeadingWhitespace(beforeEnterText),virtualModel={tokenization:{getLineTokens:lineNumber=>model.tokenization.getLineTokens(lineNumber),getLanguageId:()=>model.getLanguageId(),getLanguageIdAtPosition:(lineNumber,column)=>model.getLanguageIdAtPosition(lineNumber,column)},getLineContent:lineNumber=>lineNumber===range.startLineNumber?beforeEnterResult:model.getLineContent(lineNumber)},currentLineIndent=strings.getLeadingWhitespace(lineTokens.getLineContent()),afterEnterAction=getInheritIndentForLine(autoIndent,virtualModel,range.startLineNumber+1,void 0,languageConfigurationService);if(!afterEnterAction){const beforeEnter=embeddedLanguage?currentLineIndent:beforeEnterIndent;return{beforeEnter,afterEnter:beforeEnter}}let afterEnterIndent=embeddedLanguage?currentLineIndent:afterEnterAction.indentation;return afterEnterAction.action===IndentAction.Indent&&(afterEnterIndent=indentConverter.shiftIndent(afterEnterIndent)),indentRulesSupport.shouldDecrease(afterEnterText)&&(afterEnterIndent=indentConverter.unshiftIndent(afterEnterIndent)),{beforeEnter:embeddedLanguage?currentLineIndent:beforeEnterIndent,afterEnter:afterEnterIndent}}export function getIndentActionForType(autoIndent,model,range,ch,indentConverter,languageConfigurationService){if(autoIndent<4)return null;const scopedLineTokens=getScopedLineTokens(model,range.startLineNumber,range.startColumn);if(scopedLineTokens.firstCharOffset)return null;const indentRulesSupport=languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;if(!indentRulesSupport)return null;const scopedLineText=scopedLineTokens.getLineContent(),beforeTypeText=scopedLineText.substr(0,range.startColumn-1-scopedLineTokens.firstCharOffset);let afterTypeText;if(range.isEmpty())afterTypeText=scopedLineText.substr(range.startColumn-1-scopedLineTokens.firstCharOffset);else{afterTypeText=getScopedLineTokens(model,range.endLineNumber,range.endColumn).getLineContent().substr(range.endColumn-1-scopedLineTokens.firstCharOffset)}if(!indentRulesSupport.shouldDecrease(beforeTypeText+afterTypeText)&&indentRulesSupport.shouldDecrease(beforeTypeText+ch+afterTypeText)){const r=getInheritIndentForLine(autoIndent,model,range.startLineNumber,!1,languageConfigurationService);if(!r)return null;let indentation=r.indentation;return r.action!==IndentAction.Indent&&(indentation=indentConverter.unshiftIndent(indentation)),indentation}return null}export function getIndentMetadata(model,lineNumber,languageConfigurationService){const indentRulesSupport=languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;return indentRulesSupport?lineNumber<1||lineNumber>model.getLineCount()?null:indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber)):null}