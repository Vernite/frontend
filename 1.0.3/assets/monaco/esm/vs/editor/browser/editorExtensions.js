import*as nls from"../../nls.js";import{URI}from"../../base/common/uri.js";import{ICodeEditorService}from"./services/codeEditorService.js";import{Position}from"../common/core/position.js";import{IModelService}from"../common/services/model.js";import{ITextModelService}from"../common/services/resolverService.js";import{MenuId,MenuRegistry}from"../../platform/actions/common/actions.js";import{CommandsRegistry}from"../../platform/commands/common/commands.js";import{ContextKeyExpr,IContextKeyService}from"../../platform/contextkey/common/contextkey.js";import{IInstantiationService}from"../../platform/instantiation/common/instantiation.js";import{KeybindingsRegistry}from"../../platform/keybinding/common/keybindingsRegistry.js";import{Registry}from"../../platform/registry/common/platform.js";import{ITelemetryService}from"../../platform/telemetry/common/telemetry.js";import{withNullAsUndefined,assertType}from"../../base/common/types.js";import{ILogService}from"../../platform/log/common/log.js";export class Command{constructor(opts){this.id=opts.id,this.precondition=opts.precondition,this._kbOpts=opts.kbOpts,this._menuOpts=opts.menuOpts,this._description=opts.description}register(){if(Array.isArray(this._menuOpts)?this._menuOpts.forEach(this._registerMenuItem,this):this._menuOpts&&this._registerMenuItem(this._menuOpts),this._kbOpts){const kbOptsArr=Array.isArray(this._kbOpts)?this._kbOpts:[this._kbOpts];for(const kbOpts of kbOptsArr){let kbWhen=kbOpts.kbExpr;this.precondition&&(kbWhen=kbWhen?ContextKeyExpr.and(kbWhen,this.precondition):this.precondition);const desc={id:this.id,weight:kbOpts.weight,args:kbOpts.args,when:kbWhen,primary:kbOpts.primary,secondary:kbOpts.secondary,win:kbOpts.win,linux:kbOpts.linux,mac:kbOpts.mac};KeybindingsRegistry.registerKeybindingRule(desc)}}CommandsRegistry.registerCommand({id:this.id,handler:(accessor,args)=>this.runCommand(accessor,args),description:this._description})}_registerMenuItem(item){MenuRegistry.appendMenuItem(item.menuId,{group:item.group,command:{id:this.id,title:item.title,icon:item.icon,precondition:this.precondition},when:item.when,order:item.order})}}export class MultiCommand extends Command{constructor(){super(...arguments),this._implementations=[]}addImplementation(priority,name,implementation){return this._implementations.push({priority,name,implementation}),this._implementations.sort(((a,b)=>b.priority-a.priority)),{dispose:()=>{for(let i=0;i<this._implementations.length;i++)if(this._implementations[i].implementation===implementation)return void this._implementations.splice(i,1)}}}runCommand(accessor,args){const logService=accessor.get(ILogService);logService.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);for(const impl of this._implementations){const result=impl.implementation(accessor,args);if(result){if(logService.trace(`Command '${this.id}' was handled by '${impl.name}'.`),"boolean"==typeof result)return;return result}}logService.trace(`The Command '${this.id}' was not handled by any implementation.`)}}export class ProxyCommand extends Command{constructor(command,opts){super(opts),this.command=command}runCommand(accessor,args){return this.command.runCommand(accessor,args)}}export class EditorCommand extends Command{static bindToContribution(controllerGetter){return class EditorControllerCommandImpl extends EditorCommand{constructor(opts){super(opts),this._callback=opts.handler}runEditorCommand(accessor,editor,args){const controller=controllerGetter(editor);controller&&this._callback(controller,args)}}}static runEditorCommand(accessor,args,precondition,runner){const codeEditorService=accessor.get(ICodeEditorService),editor=codeEditorService.getFocusedCodeEditor()||codeEditorService.getActiveCodeEditor();if(editor)return editor.invokeWithinContext((editorAccessor=>{if(editorAccessor.get(IContextKeyService).contextMatchesRules(withNullAsUndefined(precondition)))return runner(editorAccessor,editor,args)}))}runCommand(accessor,args){return EditorCommand.runEditorCommand(accessor,args,this.precondition,((accessor,editor,args)=>this.runEditorCommand(accessor,editor,args)))}}export class EditorAction extends EditorCommand{constructor(opts){super(EditorAction.convertOptions(opts)),this.label=opts.label,this.alias=opts.alias}static convertOptions(opts){let menuOpts;function withDefaults(item){return item.menuId||(item.menuId=MenuId.EditorContext),item.title||(item.title=opts.label),item.when=ContextKeyExpr.and(opts.precondition,item.when),item}return menuOpts=Array.isArray(opts.menuOpts)?opts.menuOpts:opts.menuOpts?[opts.menuOpts]:[],Array.isArray(opts.contextMenuOpts)?menuOpts.push(...opts.contextMenuOpts.map(withDefaults)):opts.contextMenuOpts&&menuOpts.push(withDefaults(opts.contextMenuOpts)),opts.menuOpts=menuOpts,opts}runEditorCommand(accessor,editor,args){return this.reportTelemetry(accessor,editor),this.run(accessor,editor,args||{})}reportTelemetry(accessor,editor){accessor.get(ITelemetryService).publicLog2("editorActionInvoked",{name:this.label,id:this.id})}}export class MultiEditorAction extends EditorAction{constructor(){super(...arguments),this._implementations=[]}addImplementation(priority,implementation){return this._implementations.push([priority,implementation]),this._implementations.sort(((a,b)=>b[0]-a[0])),{dispose:()=>{for(let i=0;i<this._implementations.length;i++)if(this._implementations[i][1]===implementation)return void this._implementations.splice(i,1)}}}run(accessor,editor,args){for(const impl of this._implementations){const result=impl[1](accessor,editor,args);if(result){if("boolean"==typeof result)return;return result}}}}export function registerModelAndPositionCommand(id,handler){CommandsRegistry.registerCommand(id,(function(accessor,...args){const instaService=accessor.get(IInstantiationService),[resource,position]=args;assertType(URI.isUri(resource)),assertType(Position.isIPosition(position));const model=accessor.get(IModelService).getModel(resource);if(model){const editorPosition=Position.lift(position);return instaService.invokeFunction(handler,model,editorPosition,...args.slice(2))}return accessor.get(ITextModelService).createModelReference(resource).then((reference=>new Promise(((resolve,reject)=>{try{resolve(instaService.invokeFunction(handler,reference.object.textEditorModel,Position.lift(position),args.slice(2)))}catch(err){reject(err)}})).finally((()=>{reference.dispose()}))))}))}export function registerEditorCommand(editorCommand){return EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand),editorCommand}export function registerEditorAction(ctor){const action=new ctor;return EditorContributionRegistry.INSTANCE.registerEditorAction(action),action}export function registerMultiEditorAction(action){return EditorContributionRegistry.INSTANCE.registerEditorAction(action),action}export function registerInstantiatedEditorAction(editorAction){EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction)}export function registerEditorContribution(id,ctor){EditorContributionRegistry.INSTANCE.registerEditorContribution(id,ctor)}export var EditorExtensionsRegistry;!function(EditorExtensionsRegistry){EditorExtensionsRegistry.getEditorCommand=function getEditorCommand(commandId){return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId)},EditorExtensionsRegistry.getEditorActions=function getEditorActions(){return EditorContributionRegistry.INSTANCE.getEditorActions()},EditorExtensionsRegistry.getEditorContributions=function getEditorContributions(){return EditorContributionRegistry.INSTANCE.getEditorContributions()},EditorExtensionsRegistry.getSomeEditorContributions=function getSomeEditorContributions(ids){return EditorContributionRegistry.INSTANCE.getEditorContributions().filter((c=>ids.indexOf(c.id)>=0))},EditorExtensionsRegistry.getDiffEditorContributions=function getDiffEditorContributions(){return EditorContributionRegistry.INSTANCE.getDiffEditorContributions()}}(EditorExtensionsRegistry||(EditorExtensionsRegistry={}));const Extensions={EditorCommonContributions:"editor.contributions"};class EditorContributionRegistry{constructor(){this.editorContributions=[],this.diffEditorContributions=[],this.editorActions=[],this.editorCommands=Object.create(null)}registerEditorContribution(id,ctor){this.editorContributions.push({id,ctor})}getEditorContributions(){return this.editorContributions.slice(0)}getDiffEditorContributions(){return this.diffEditorContributions.slice(0)}registerEditorAction(action){action.register(),this.editorActions.push(action)}getEditorActions(){return this.editorActions.slice(0)}registerEditorCommand(editorCommand){editorCommand.register(),this.editorCommands[editorCommand.id]=editorCommand}getEditorCommand(commandId){return this.editorCommands[commandId]||null}}function registerCommand(command){return command.register(),command}EditorContributionRegistry.INSTANCE=new EditorContributionRegistry,Registry.add(Extensions.EditorCommonContributions,EditorContributionRegistry.INSTANCE);export const UndoCommand=registerCommand(new MultiCommand({id:"undo",precondition:void 0,kbOpts:{weight:0,primary:2104},menuOpts:[{menuId:MenuId.MenubarEditMenu,group:"1_do",title:nls.localize({key:"miUndo",comment:["&& denotes a mnemonic"]},"&&Undo"),order:1},{menuId:MenuId.CommandPalette,group:"",title:nls.localize("undo","Undo"),order:1}]}));registerCommand(new ProxyCommand(UndoCommand,{id:"default:undo",precondition:void 0}));export const RedoCommand=registerCommand(new MultiCommand({id:"redo",precondition:void 0,kbOpts:{weight:0,primary:2103,secondary:[3128],mac:{primary:3128}},menuOpts:[{menuId:MenuId.MenubarEditMenu,group:"1_do",title:nls.localize({key:"miRedo",comment:["&& denotes a mnemonic"]},"&&Redo"),order:2},{menuId:MenuId.CommandPalette,group:"",title:nls.localize("redo","Redo"),order:1}]}));registerCommand(new ProxyCommand(RedoCommand,{id:"default:redo",precondition:void 0}));export const SelectAllCommand=registerCommand(new MultiCommand({id:"editor.action.selectAll",precondition:void 0,kbOpts:{weight:0,kbExpr:null,primary:2079},menuOpts:[{menuId:MenuId.MenubarSelectionMenu,group:"1_basic",title:nls.localize({key:"miSelectAll",comment:["&& denotes a mnemonic"]},"&&Select All"),order:1},{menuId:MenuId.CommandPalette,group:"",title:nls.localize("selectAll","Select All"),order:1}]}));