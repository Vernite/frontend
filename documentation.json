{
    "pipes": [
        {
            "name": "StatusColorPipe",
            "id": "pipe-StatusColorPipe-a2e437124ebb535feb0f99d9f6e954c7b5bc9aee2b3bbbfe5c76b730f557d58e6e5996f4c7ec2eeb509c4f8327bc8312d9dfdc1797eee445a499eacc33bc417e",
            "file": "src/app/tasks/pipes/status-color.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": " | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": " | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "statusColor",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Status } from '@tasks/interfaces/status.interface';\n\n@Pipe({\n  name: 'statusColor',\n})\nexport class StatusColorPipe implements PipeTransform {\n  transform(value: Status['name'] | undefined): any {\n    switch (value) {\n      case 'TO DO':\n      case 'To Do':\n        return '#4A5465';\n      case 'IN PROGRESS':\n      case 'In Progress':\n        return '#f39c12';\n      case 'DONE':\n      case 'Done':\n        return '#2ECC71';\n      default:\n        return '#4A5465';\n    }\n  }\n}\n"
        },
        {
            "name": "TaskPriorityIconPipe",
            "id": "pipe-TaskPriorityIconPipe-0f13d4348f59efc764909c6c0817a5139355cbb4c84e343f6eb90ca16b759e4707ed1bac5338e910d582c63ce2efc427d8e6859bf294e12fbf8d207254ea1a48",
            "file": "src/app/tasks/pipes/task-priority-icon.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "taskPriorityIcon",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'taskPriorityIcon',\n})\nexport class TaskPriorityIconPipe implements PipeTransform {\n  transform(value: any): any {\n    switch (value) {\n      case 'lowest':\n        return 'cuPriorityLowest';\n      case 'low':\n        return 'cuPriorityLow';\n      case 'medium':\n        return 'cuPriorityMedium';\n      case 'high':\n        return 'cuPriorityHigh';\n      case 'highest':\n        return 'cuPriorityHighest';\n    }\n  }\n}\n"
        },
        {
            "name": "TaskPriorityPipe",
            "id": "pipe-TaskPriorityPipe-fb1b34e3e30f60fb79fb6d16f590559bd65e54379aeef23705e15ef5384a5654e5eeef9170f1889806df5263fd28a47de8302c6a0ea2dafaf883a2cfc0898b2a",
            "file": "src/app/tasks/pipes/task-priority.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "taskPriority",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'taskPriority',\n})\nexport class TaskPriorityPipe implements PipeTransform {\n  transform(value: any): any {\n    switch (value) {\n      case 'lowest':\n        return $localize`Lowest`;\n      case 'low':\n        return $localize`Low`;\n      case 'medium':\n        return $localize`Medium`;\n      case 'high':\n        return $localize`High`;\n      case 'highest':\n        return $localize`Highest`;\n    }\n  }\n}\n"
        },
        {
            "name": "TaskTypeIconPipe",
            "id": "pipe-TaskTypeIconPipe-e3c249945c32266752ca57e0a63690298db3d1ae5639bd254c2da3af6e14551a19f04c60cc3a78a42410914e81ce0961546facf3527c67e8680dfcd76da8d1d3",
            "file": "src/app/tasks/pipes/task-type-icon.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": true,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "taskTypeIcon",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'taskTypeIcon',\n})\nexport class TaskTypeIconPipe implements PipeTransform {\n  /**\n   * @deprecated\n   */\n  transform(value: any): any {\n    switch (value) {\n      case 'TASK':\n        return 'cuTask';\n      case 'ISSUE':\n        return 'cuIssue';\n      case 'EPIC':\n        return 'cuEpic';\n      case 'USER_STORY':\n        return 'cuUserStory';\n      case 'SUBTASK':\n        return 'cuSubtask';\n    }\n  }\n}\n"
        },
        {
            "name": "TaskTypePipe",
            "id": "pipe-TaskTypePipe-bebcc27918f9e16a362b8dc2028b37bafd6c495bc1c219fb49ffbb2e3369eb450505d9511beffc80d24093303605cc307eed787906861423ccaece414c64807e",
            "file": "src/app/tasks/pipes/task-type.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"name\" | \"icon\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"name\" | \"icon\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"color\" | \"name\" | \"icon\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'name'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | Color",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"color\" | \"name\" | \"icon\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'name'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "taskType",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { SubTaskType, TaskType } from '@tasks/enums/task-type.enum';\nimport * as Color from 'color';\n\n@Pipe({\n  name: 'taskType',\n})\nexport class TaskTypePipe implements PipeTransform {\n  transform(value: any, type?: 'name' | 'icon'): string;\n  transform(value: any, type: 'color'): Color;\n\n  transform(value: any, type: 'color' | 'name' | 'icon' = 'name'): string | Color {\n    switch (value as TaskType | SubTaskType) {\n      // Task\n      case TaskType.TASK:\n        return {\n          name: $localize`Task`,\n          color: Color.rgb(52, 152, 219),\n          icon: 'cuTask',\n        }[type];\n\n      // User story\n      case TaskType.USER_STORY:\n        return {\n          name: $localize`User story`,\n          color: Color.rgb(46, 204, 113),\n          icon: 'cuUserStory',\n        }[type];\n\n      // Issue\n      case TaskType.ISSUE:\n        return {\n          name: $localize`Issue`,\n          color: Color.rgb(231, 76, 60),\n          icon: 'cuIssue',\n        }[type];\n\n      // Epic\n      case TaskType.EPIC:\n        return {\n          name: $localize`Epic`,\n          color: Color.rgb(155, 89, 182),\n          icon: 'cuEpic',\n        }[type];\n\n      // Subtask\n      case SubTaskType.SUBTASK:\n        return {\n          name: $localize`Subtask`,\n          color: Color.rgb(88, 183, 189),\n          icon: 'cuSubtask',\n        }[type];\n\n      // Unknown\n      default:\n        console.warn('Unknown task type:', value);\n        return value;\n    }\n  }\n}\n"
        },
        {
            "name": "ValidationErrorPipe",
            "id": "pipe-ValidationErrorPipe-41111031ce97f5273431476b91e1017acb1d46c30150f2f2de48b0f6f1b282e40a52027928b4b579119537bfb75f0b8e9a82a464448d9424b23f70687687f4c7",
            "file": "src/app/_main/pipes/validation-error.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Pipe to transform validation errors to a human readable string</p>\n",
            "rawdescription": "\n\nPipe to transform validation errors to a human readable string\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 249,
                                "end": 254,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 243,
                                "end": 248,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The value to be transformed</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 291,
                                "end": 298,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>message from validation error</p>\n"
                        }
                    ]
                }
            ],
            "ngname": "validationError",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Pipe to transform validation errors to a human readable string\n */\n@Pipe({\n  name: 'validationError',\n})\nexport class ValidationErrorPipe implements PipeTransform {\n  /**\n   *\n   * @param value - The value to be transformed\n   * @returns message from validation error\n   */\n  transform(value: any): any {\n    return value?.message || null;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AddMemberDialogData",
            "id": "interface-AddMemberDialogData-afaf27edb57d85a1a8be8e5ad6f2e41c509fc8732ed2208e15adfeb8768991839eb8db9402e0ba29d38c7e7661cb606db688aba7377ee6b576bf9bfab178a708",
            "file": "src/app/dashboard/dialogs/add-member/add-member.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { RouterExtensionsService } from '@main/services/router-extensions.service';\nimport { Status } from '@tasks/interfaces/status.interface';\nimport { Observable } from 'rxjs';\nimport { requiredValidator } from '../../../_main/validators/required.validator';\n\nexport interface AddMemberDialogData {\n  workspaceId: number;\n  projectId?: number;\n}\n\n@Component({\n  selector: 'app-add-member-dialog',\n  templateUrl: './add-member.dialog.html',\n  styleUrls: ['./add-member.dialog.scss'],\n})\nexport class AddMemberDialog implements OnInit {\n  public statusList$!: Observable<Status[]>;\n  public workspaceList$!: Observable<Workspace[]>;\n\n  public form = new FormGroup({\n    email: new FormControl('', [requiredValidator()]),\n  });\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: AddMemberDialogData,\n    private dialogRef: MatDialogRef<AddMemberDialog>,\n    private routerExtensions: RouterExtensionsService,\n  ) {}\n\n  ngOnInit() {\n    this.loadParamsFromUrl();\n\n    const { workspaceId, projectId } = this.data;\n    this.form.patchValue({ workspaceId, projectId });\n  }\n\n  loadParamsFromUrl() {\n    const { workspaceId, projectId } = this.routerExtensions.snapshot.params;\n    this.data.workspaceId = this.data.workspaceId || Number(workspaceId);\n    this.data.projectId = this.data.projectId || Number(projectId);\n  }\n\n  addMembers() {\n    const formValues = this.form.value;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.invalid) return;\n\n    this.dialogRef.close([formValues.email]);\n  }\n\n  cancel() {\n    this.dialogRef.close(false);\n  }\n}\n",
            "properties": [
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AlertDialogData",
            "id": "interface-AlertDialogData-1e9dca51168e9c41f2c020f82ddd6af014cbe023031cdc1cac54160d287e5cbaef852cabeaf8c65bc799462a41f1a374b319965fd93d415427fda5e5aac39455",
            "file": "src/app/_main/dialogs/alert/alert.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, HostBinding, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Type of the dialog variant. Used to specify what dialog styling should be used.\n */\nexport enum AlertDialogVariant {\n  DEFAULT = 'default',\n  IMPORTANT = 'important',\n}\n\n/**\n * Alert dialog data interface. Indicates what data will be passed to the dialog.\n */\nexport interface AlertDialogData {\n  /**\n   * Dialog title. Displayed at the top of the dialog.\n   */\n  title?: string;\n  /**\n   * Dialog message. Displayed below the title.\n   */\n  message?: string;\n  /**\n   * Confirm button text.\n   */\n  confirmText?: string;\n  /**\n   * Cancel button text.\n   */\n  cancelText?: string;\n  /**\n   * Type of the dialog variant. Used to specify what dialog styling should be used.\n   */\n  variant?: AlertDialogVariant;\n}\n\n/**\n * Alert dialog component. Simple dialog with a title, message, and configurable buttons.\n */\n@Component({\n  selector: 'app-alert-dialog',\n  templateUrl: './alert.dialog.html',\n  styleUrls: ['./alert.dialog.scss'],\n})\nexport class AlertDialog {\n  /**\n   * Passthrough to the dialog's variant enumerable.\n   */\n  public AlertDialogVariant = AlertDialogVariant;\n\n  /**\n   * Default constructor. Injects the dialog reference and data.\n   * @param data Object to pass as data to the dialog\n   * @param dialogRef Reference to dialog instance\n   */\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: AlertDialogData,\n    private dialogRef: MatDialogRef<AlertDialog>,\n  ) {\n    data.variant ||= AlertDialogVariant.DEFAULT;\n  }\n\n  /**\n   * Host binding to set if the dialog is important.\n   */\n  @HostBinding('class.important-dialog') important: boolean =\n    this.data.variant === AlertDialogVariant.IMPORTANT;\n\n  /**\n   * Closes the dialog. Returns false to indicate that the dialog was closed without confirmation.\n   */\n  cancel() {\n    this.dialogRef.close(false);\n  }\n\n  /**\n   * Closes the dialog. Returns true to indicate that the dialog was closed with confirmation.\n   */\n  confirm() {\n    this.dialogRef.close(true);\n  }\n}\n",
            "properties": [
                {
                    "name": "cancelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Cancel button text.</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nCancel button text.\n"
                },
                {
                    "name": "confirmText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Confirm button text.</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nConfirm button text.\n"
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Dialog message. Displayed below the title.</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nDialog message. Displayed below the title.\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Dialog title. Displayed at the top of the dialog.</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nDialog title. Displayed at the top of the dialog.\n"
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertDialogVariant",
                    "optional": true,
                    "description": "<p>Type of the dialog variant. Used to specify what dialog styling should be used.</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nType of the dialog variant. Used to specify what dialog styling should be used.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Alert dialog data interface. Indicates what data will be passed to the dialog.</p>\n",
            "rawdescription": "\n\nAlert dialog data interface. Indicates what data will be passed to the dialog.\n",
            "methods": []
        },
        {
            "name": "ErrorValidationTree",
            "id": "interface-ErrorValidationTree-873341c271cab88cd964d84e4d58d50cb74a027249ca4af8c3cda01dee5677fc899bfd0fd9128ec4bc821aa49c7b60a027299c95717618e4b6e70c4af95e2021",
            "file": "src/app/_main/decorators/service-validator.decorator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DialogService } from '@main/services/dialog.service';\nimport { Observable } from 'rxjs';\n\nexport interface ErrorValidationTree {\n  [key: string]: {\n    [key: number]: string;\n  };\n}\n\nexport function ServiceValidator(errorValidationTree: ErrorValidationTree) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    descriptor.value = function (identifier: string) {\n      // const result = originalMethod.apply(this, identifier);\n\n      // This function returns new observable to use it as a pipe in other observables\n      return <T = any>(source: Observable<T>) => {\n        // Check for match in response\n        const match = (response: any) => {\n          // identifier check\n          if (!errorValidationTree[identifier]) return;\n\n          // Status check\n          const status = response?.error?.status || response?.status;\n          if (!status) return;\n\n          return errorValidationTree[identifier][status] || null;\n        };\n\n        const showAlert = (message: string, responseType: 'SUCCESS' | 'ERROR') => {\n          const dialogService = (window as any).injector.get(DialogService);\n\n          dialogService.alert({\n            title:\n              responseType === 'SUCCESS' ? $localize`Success` : $localize`Something went wrong`,\n            message,\n            cancelText: $localize`OK`,\n          });\n        };\n\n        return new Observable<any>((subscriber) => {\n          source.subscribe({\n            next(value) {\n              const m = match(value);\n\n              if (m) {\n                showAlert(m, 'ERROR');\n              } else {\n                subscriber.next(value);\n              }\n            },\n            error(error) {\n              const m = match(error);\n\n              if (m) {\n                showAlert(m, 'ERROR');\n              } else {\n                subscriber.error(error);\n              }\n            },\n            complete() {\n              subscriber.complete();\n            },\n          });\n        });\n      };\n    };\n\n    return descriptor;\n  };\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-873341c271cab88cd964d84e4d58d50cb74a027249ca4af8c3cda01dee5677fc899bfd0fd9128ec4bc821aa49c7b60a027299c95717618e4b6e70c4af95e2021",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "FilterCheckbox",
            "id": "interface-FilterCheckbox-0d1bc8d01da8011777c39279315c9d891e7ff391eab9da50471869aa326de48ad87ee2ca31dafdf7f726d585c00e1763024afccf2bdc405e05190c9d3dfc56fe",
            "file": "src/app/_main/interfaces/filters.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FilterCheckbox<T = boolean> {\n  type: 'checkbox';\n  options: {\n    1: T | null;\n    0: T | null;\n  };\n  value: 1 | 0;\n  label: string;\n  apply(input: T, option: any): T;\n}\n\nexport type Filter = FilterCheckbox<any>;\n\nexport type FilterType = 'checkbox';\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"1\" | \"0\"",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "input",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "FormGroup",
            "id": "interface-FormGroup-eec5bf37dcf2f19eca65c54699ebc4a64cb9baed1c0242fd7bfb2e5d2990773ecfafddf5875dd61f89246f51c44e6a4f792a2d76b4ce8a461b9e40e49a7b9adb",
            "file": "src/typings/typings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormGroup } from '@angular/forms';\n\ndeclare global {\n  interface FormGroup {\n    submit(): void;\n  }\n}\n\n(FormGroup as any).prototype.submit = function () {\n  console.log('submit');\n};\n\nexport {};\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "GitAccount",
            "id": "interface-GitAccount-1082b6158f6a589f50253b372e32f9d5271a63057eb6170b7363189b5bb3534559513c42092689f6059f32438db9e6b22e3b5411539635b86759ce9cac6b7e3f",
            "file": "src/app/dashboard/interfaces/git-integration.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GitRepository {\n  id: number;\n  fullName: string;\n  private: boolean;\n}\n\nexport interface GitIntegration {\n  link: string;\n  gitRepositories: GitRepository[];\n}\n\nexport interface GitIssue {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n}\n\nexport interface GitAccount {\n  id: number;\n  gitHubUsername: string;\n  suspended: boolean;\n}\n\nexport interface GitPull {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n  branch: string;\n}\n",
            "properties": [
                {
                    "name": "gitHubUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "suspended",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GitAccountWithUsage",
            "id": "interface-GitAccountWithUsage-07b33b2b7b64e525f50d5bb77e9fad3f257e57aaf89584400f6c70707ed8dd49c6ffcf420880274294706f224a4ba95bce9dfc9652ccf82b4224b638ad6cc6fe",
            "file": "src/app/settings/pages/settings-integrations/settings-integrations.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { GitAccount } from '@dashboard/interfaces/git-integration.interface';\nimport { GitIntegrationService } from '@dashboard/services/git-integration.service';\nimport { map, Observable, take } from 'rxjs';\n\ninterface GitAccountWithUsage {\n  account: GitAccount;\n  usage: Observable<string>;\n}\n\n@Component({\n  selector: 'app-settings-integrations',\n  templateUrl: './settings-integrations.page.html',\n  styleUrls: ['./settings-integrations.page.scss'],\n})\nexport class SettingsIntegrationsPage implements OnInit {\n  public gitHubAccounts$!: Observable<GitAccountWithUsage[]>;\n\n  constructor(private gitIntegrationService: GitIntegrationService) {}\n\n  ngOnInit() {\n    this.loadGitHubIntegration();\n  }\n\n  public loadGitHubIntegration(): void {\n    this.gitHubAccounts$ = this.gitIntegrationService.getConnectedGitHubAccounts().pipe(\n      map((accounts) => {\n        return accounts.map((account) => {\n          return {\n            account,\n            usage: this.getConnectedProjects(account).pipe(take(1)),\n          };\n        });\n      }),\n    );\n  }\n\n  public disconnect(account: GitAccount): void {\n    this.gitIntegrationService.deleteConnectedGitHubAccount(account.id).subscribe(({ link }) => {\n      window.open(link, '_blank');\n    });\n  }\n\n  public getConnectedProjects(account: GitAccount): Observable<string> {\n    return this.gitIntegrationService\n      .getGitHubAccountConnectedProjects(account)\n      .pipe(map((projects) => projects.map((project: any) => project.name).join(', ')));\n  }\n}\n",
            "properties": [
                {
                    "name": "account",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GitAccount",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "usage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GitIntegration",
            "id": "interface-GitIntegration-1082b6158f6a589f50253b372e32f9d5271a63057eb6170b7363189b5bb3534559513c42092689f6059f32438db9e6b22e3b5411539635b86759ce9cac6b7e3f",
            "file": "src/app/dashboard/interfaces/git-integration.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GitRepository {\n  id: number;\n  fullName: string;\n  private: boolean;\n}\n\nexport interface GitIntegration {\n  link: string;\n  gitRepositories: GitRepository[];\n}\n\nexport interface GitIssue {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n}\n\nexport interface GitAccount {\n  id: number;\n  gitHubUsername: string;\n  suspended: boolean;\n}\n\nexport interface GitPull {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n  branch: string;\n}\n",
            "properties": [
                {
                    "name": "gitRepositories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GitRepository[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GitIssue",
            "id": "interface-GitIssue-1082b6158f6a589f50253b372e32f9d5271a63057eb6170b7363189b5bb3534559513c42092689f6059f32438db9e6b22e3b5411539635b86759ce9cac6b7e3f",
            "file": "src/app/dashboard/interfaces/git-integration.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GitRepository {\n  id: number;\n  fullName: string;\n  private: boolean;\n}\n\nexport interface GitIntegration {\n  link: string;\n  gitRepositories: GitRepository[];\n}\n\nexport interface GitIssue {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n}\n\nexport interface GitAccount {\n  id: number;\n  gitHubUsername: string;\n  suspended: boolean;\n}\n\nexport interface GitPull {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n  branch: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GitPull",
            "id": "interface-GitPull-1082b6158f6a589f50253b372e32f9d5271a63057eb6170b7363189b5bb3534559513c42092689f6059f32438db9e6b22e3b5411539635b86759ce9cac6b7e3f",
            "file": "src/app/dashboard/interfaces/git-integration.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GitRepository {\n  id: number;\n  fullName: string;\n  private: boolean;\n}\n\nexport interface GitIntegration {\n  link: string;\n  gitRepositories: GitRepository[];\n}\n\nexport interface GitIssue {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n}\n\nexport interface GitAccount {\n  id: number;\n  gitHubUsername: string;\n  suspended: boolean;\n}\n\nexport interface GitPull {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n  branch: string;\n}\n",
            "properties": [
                {
                    "name": "branch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "service",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GitRepository",
            "id": "interface-GitRepository-1082b6158f6a589f50253b372e32f9d5271a63057eb6170b7363189b5bb3534559513c42092689f6059f32438db9e6b22e3b5411539635b86759ce9cac6b7e3f",
            "file": "src/app/dashboard/interfaces/git-integration.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GitRepository {\n  id: number;\n  fullName: string;\n  private: boolean;\n}\n\nexport interface GitIntegration {\n  link: string;\n  gitRepositories: GitRepository[];\n}\n\nexport interface GitIssue {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n}\n\nexport interface GitAccount {\n  id: number;\n  gitHubUsername: string;\n  suspended: boolean;\n}\n\nexport interface GitPull {\n  id: number;\n  url: string;\n  state: string;\n  title: string;\n  description: string;\n  service: string;\n  branch: string;\n}\n",
            "properties": [
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "private",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LetContext",
            "id": "interface-LetContext-dad31174d6b77242ec85fb1e9550d94920d2e30aa138dc8a792333c22f3cfc3aa05987eca68352b2579e857fc52e9e4254bd87e687541fcf701ecb567c9ddf39",
            "file": "src/app/_main/directives/let.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\ninterface LetContext<T> {\n  ngLet: T;\n}\n\n@Directive({\n  selector: '[ngLet]',\n})\nexport class LetDirective<T> {\n  private _context: LetContext<T | null> = { ngLet: null };\n\n  constructor(_viewContainer: ViewContainerRef, _templateRef: TemplateRef<LetContext<T>>) {\n    _viewContainer.createEmbeddedView(_templateRef, this._context);\n  }\n\n  @Input()\n  set ngLet(value: T) {\n    this._context.ngLet = value;\n  }\n}\n",
            "properties": [
                {
                    "name": "ngLet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ModifyUser",
            "id": "interface-ModifyUser-1fdb2a41c6419463df025b921647826e8ab777140223134701e8e8932296f6b0cd3f5eb015a77f8401d24f9edbe2b318d73ce713d656cad53c33c851169fd9d5",
            "file": "src/app/auth/interfaces/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: number;\n  name: string;\n  surname: string;\n  email: string;\n  username: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserWithPrivileges {\n  user: User;\n  privileges: number;\n}\n\nexport interface ModifyUser {\n  name: string;\n  surname: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserData {\n  id: number;\n  name: string;\n  surname: string;\n  username: string;\n  avatar: string;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "surname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PersistentMapOptions",
            "id": "interface-PersistentMapOptions-e9304fd2d5e73a56daa7559536506512d8ec2ca3613c2e21a9bb809a245813aaa7fefd9aedd4c3688b9bc9bd6dae4bc98c34f28459d8a31160196002d49972df",
            "file": "src/app/_main/classes/persistent-map.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PersistentMapOptions {\n  persistentKey: string;\n}\n\nexport class PersistentMap<K, V> extends Map<K, V> {\n  override clear(): void {\n    localStorage.removeItem(this._persistentKey);\n    super.clear();\n  }\n\n  override delete(key: K): boolean {\n    const temp = super.delete(key);\n    this.saveState();\n    return temp;\n  }\n\n  override set(key: K, value: V): this {\n    const temp = super.set(key, value);\n    this.saveState();\n    return temp;\n  }\n\n  private saveState() {\n    localStorage.setItem(this._persistentKey, JSON.stringify([...this.entries()]));\n  }\n\n  private _persistentKey = '';\n\n  constructor(\n    { persistentKey }: PersistentMapOptions,\n    entries?: readonly (readonly [K, V])[] | null,\n  ) {\n    super(\n      persistentKey && localStorage.getItem(persistentKey)\n        ? JSON.parse(localStorage.getItem(persistentKey)!)\n        : entries,\n    );\n\n    if (!persistentKey) {\n      console.error('PersistentMap need persistentKey option');\n      return;\n    }\n\n    this._persistentKey = persistentKey;\n  }\n}\n",
            "properties": [
                {
                    "name": "persistentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Project",
            "id": "interface-Project-ca79c097d907287ce8a7f364747ce0691fbc6b97863338c9c90b1c05eab707fcfade3260ca206b5531c41131b3f01dacfbb9cd52e04dc75d011e4846e2318543",
            "file": "src/app/dashboard/interfaces/project.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ProjectMember } from './project-member.interface';\n\nexport interface Project {\n  /**\n   * The project's ID.\n   */\n  id: number;\n\n  /**\n   * The project's name.\n   */\n  name: string;\n\n  /**\n   * GitHub repository name\n   * @example\n   * \"SamPanDonte/untitled\"\n   */\n  gitHubIntegration: string;\n\n  /**\n   * List of projects members\n   */\n  projectMembers?: ProjectMember[];\n}\n",
            "properties": [
                {
                    "name": "gitHubIntegration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>GitHub repository name</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&quot;SamPanDonte/untitled&quot;</code></pre></div>",
                    "line": 19,
                    "rawdescription": "\n\nGitHub repository name\n```html\n\"SamPanDonte/untitled\"\n```",
                    "jsdoctags": [
                        {
                            "pos": 231,
                            "end": 271,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 232,
                                "end": 239,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>&quot;SamPanDonte/untitled&quot;</p>\n"
                        }
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>The project&#39;s ID.</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nThe project's ID.\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>The project&#39;s name.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nThe project's name.\n"
                },
                {
                    "name": "projectMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectMember[]",
                    "optional": true,
                    "description": "<p>List of projects members</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nList of projects members\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ProjectMember",
            "id": "interface-ProjectMember-7c016a86f047e2d4cc23b72230dfb11e69896f2b962e5389b2c6b2c370feec544397c54c131e10beaf7adfef369092b3b136a3186b091db7aa4716a262bdee8d",
            "file": "src/app/dashboard/interfaces/project-member.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ProjectMember {\n  user: {\n    id: number;\n    name: string;\n    surname: string;\n    email: string;\n    avatar: string;\n    username: string;\n  };\n  privileges: number;\n}\n",
            "properties": [
                {
                    "name": "privileges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RequestOptions",
            "id": "interface-RequestOptions-c055130ed278b65b0e89a4fe45341cc4fdc4cc291d8b86ff6b6ea3921d0ccc8f97778c089642da56d860702726a9c48afa3df2ab70da155e1c7408599135db88",
            "file": "src/app/_main/interfaces/request-options.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpContext, HttpHeaders, HttpParams } from '@angular/common/http';\n\n/**\n * Request options interface\n * Use this interface to configure request options like body, params, headers, etc.\n */\nexport interface RequestOptions {\n  /**\n   * Body to send with the request. Used int POST, PATH, PATCH, DELETE requests.\n   */\n  body?: any;\n  /**\n   * Headers to send with the request.\n   */\n  headers?:\n    | HttpHeaders\n    | {\n        [header: string]: string | string[];\n      };\n  /**\n   * Additional context to attach with request.\n   */\n  context?: HttpContext;\n  /**\n   * Part of the response to observe.\n   */\n  observe?: 'body';\n  /**\n   * Query params to send with the request.\n   */\n  params?:\n    | HttpParams\n    | {\n        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\n      };\n  /**\n   * Used to report progress events like download or upload progress.\n   */\n  reportProgress?: boolean;\n\n  /**\n   * Response type to expect from the server.\n   * For example:\n   * - blob - will return a Blob object (used when API sends back a file).\n   * - json - will return a JSON object.\n   * - text - will return a string.\n   *\n   * Default is json.\n   */\n  responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n  /**\n   * If you want the credentials (cookie authentication token) to be passable through a call,\n   * you need to add `{ withCredentials: true }` in your httpClient call.\n   */\n  withCredentials?: boolean;\n}\n",
            "properties": [
                {
                    "name": "body",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "<p>Body to send with the request. Used int POST, PATH, PATCH, DELETE requests.</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nBody to send with the request. Used int POST, PATH, PATCH, DELETE requests.\n"
                },
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpContext",
                    "optional": true,
                    "description": "<p>Additional context to attach with request.</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nAdditional context to attach with request.\n"
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpHeaders | literal type",
                    "optional": true,
                    "description": "<p>Headers to send with the request.</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nHeaders to send with the request.\n"
                },
                {
                    "name": "observe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "<p>Part of the response to observe.</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nPart of the response to observe.\n"
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParams | literal type",
                    "optional": true,
                    "description": "<p>Query params to send with the request.</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nQuery params to send with the request.\n"
                },
                {
                    "name": "reportProgress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Used to report progress events like download or upload progress.</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nUsed to report progress events like download or upload progress.\n"
                },
                {
                    "name": "responseType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"arraybuffer\" | \"blob\" | \"json\" | \"text\"",
                    "optional": true,
                    "description": "<p>Response type to expect from the server.\nFor example:</p>\n<ul>\n<li>blob - will return a Blob object (used when API sends back a file).</li>\n<li>json - will return a JSON object.</li>\n<li>text - will return a string.</li>\n</ul>\n<p>Default is json.</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nResponse type to expect from the server.\nFor example:\n- blob - will return a Blob object (used when API sends back a file).\n- json - will return a JSON object.\n- text - will return a string.\n\nDefault is json.\n"
                },
                {
                    "name": "withCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If you want the credentials (cookie authentication token) to be passable through a call,\nyou need to add <code>{ withCredentials: true }</code> in your httpClient call.</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nIf you want the credentials (cookie authentication token) to be passable through a call,\nyou need to add `{ withCredentials: true }` in your httpClient call.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Request options interface\nUse this interface to configure request options like body, params, headers, etc.</p>\n",
            "rawdescription": "\n\nRequest options interface\nUse this interface to configure request options like body, params, headers, etc.\n",
            "methods": []
        },
        {
            "name": "SinglePersonSchedule",
            "id": "interface-SinglePersonSchedule-bba22b498c14d3c4a832194bc43e5c1bd93d01550b1088f38ba6ab7cf0bde866f00410e81a4c8134e535522a8803b6dd30554213dfe3507600015d08be546d39",
            "file": "src/app/tasks/interfaces/schedule.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UserData } from '@auth/interfaces/user.interface';\n\nexport type Schedule = SinglePersonSchedule[];\n\nexport interface SinglePersonSchedule {\n  user: UserData;\n  tasks: Map<number | null, Task>;\n}\n",
            "properties": [
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | null | Task>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserData",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnackbarData",
            "id": "interface-SnackbarData-7f05eab4ad84aa7134f7f7151137c5d430c9b5f1080b22112197f9780ea543055637be102264b112c4383ba59db8d7da99f3a5727e1dbb6d5cfedae8abac3cde",
            "file": "src/app/_main/components/snackbar/snackbar.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnackbarData {\n  color: 'gray' | 'green';\n  message: string;\n  duration: number;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"gray\" | \"green\"",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Status",
            "id": "interface-Status-e0f4a5024bd5d91ac5315c876586cdb6709ba38ad14bdbf1faf5c66b48e44489c9b9e49dd2b12694f1484703dc2be7cd8c01ff3810914873e5788aa69797a147",
            "file": "src/app/tasks/interfaces/status.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { color } from '../../_main/interfaces/color.interface';\nimport { Task } from './task.interface';\n\n/**\n * Task status/column interface\n */\nexport interface Status {\n  /**\n   * Status id (unique per database)\n   */\n  id: number;\n\n  /**\n   * Status name (Header displayed in labels or on the top of the columns)\n   */\n  name: string;\n\n  /**\n   * Status color (used to display as the background of the labels)\n   */\n  color: color;\n\n  /**\n   * Status final (used to determine if the task is done or not)\n   */\n  final: boolean;\n\n  /**\n   * Status begin (used to determine if the task is in progress or not). If begin is true,\n   * the work on the task does not started yet.\n   */\n  begin: boolean;\n}\n\n/**\n * Status with task interface - status column with tasks\n */\nexport interface StatusWithTasks extends Status {\n  tasks: Task[];\n}\n",
            "properties": [
                {
                    "name": "begin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Status begin (used to determine if the task is in progress or not). If begin is true,\nthe work on the task does not started yet.</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nStatus begin (used to determine if the task is in progress or not). If begin is true,\nthe work on the task does not started yet.\n"
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "color",
                    "optional": false,
                    "description": "<p>Status color (used to display as the background of the labels)</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nStatus color (used to display as the background of the labels)\n"
                },
                {
                    "name": "final",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Status final (used to determine if the task is done or not)</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nStatus final (used to determine if the task is done or not)\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Status id (unique per database)</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nStatus id (unique per database)\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Status name (Header displayed in labels or on the top of the columns)</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nStatus name (Header displayed in labels or on the top of the columns)\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Task status/column interface</p>\n",
            "rawdescription": "\n\nTask status/column interface\n",
            "methods": []
        },
        {
            "name": "StatusWithTasks",
            "id": "interface-StatusWithTasks-e0f4a5024bd5d91ac5315c876586cdb6709ba38ad14bdbf1faf5c66b48e44489c9b9e49dd2b12694f1484703dc2be7cd8c01ff3810914873e5788aa69797a147",
            "file": "src/app/tasks/interfaces/status.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { color } from '../../_main/interfaces/color.interface';\nimport { Task } from './task.interface';\n\n/**\n * Task status/column interface\n */\nexport interface Status {\n  /**\n   * Status id (unique per database)\n   */\n  id: number;\n\n  /**\n   * Status name (Header displayed in labels or on the top of the columns)\n   */\n  name: string;\n\n  /**\n   * Status color (used to display as the background of the labels)\n   */\n  color: color;\n\n  /**\n   * Status final (used to determine if the task is done or not)\n   */\n  final: boolean;\n\n  /**\n   * Status begin (used to determine if the task is in progress or not). If begin is true,\n   * the work on the task does not started yet.\n   */\n  begin: boolean;\n}\n\n/**\n * Status with task interface - status column with tasks\n */\nexport interface StatusWithTasks extends Status {\n  tasks: Task[];\n}\n",
            "properties": [
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Status with task interface - status column with tasks</p>\n",
            "rawdescription": "\n\nStatus with task interface - status column with tasks\n",
            "methods": [],
            "extends": "Status"
        },
        {
            "name": "StoryConfig",
            "id": "interface-StoryConfig-0eae76687e488a7df1732accd770b6d905bf5476d6a3ebdf1d89cb797134326687a5972a38c10e47d2d7b824bc17d37f00f0da2558c7f9390e4b5ab5030a8440",
            "file": "src/stories/helpers/story.helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\nimport { exposeAllPossibilities } from './component-content-decorator.helper';\nimport { merge } from 'lodash-es';\nimport { Story, componentWrapperDecorator } from '@storybook/angular';\n\nexport interface StoryConfig<C> {\n  selector: string;\n  description?: string;\n  multiple?: {\n    prop: string;\n    options: any[];\n  };\n  props?: Partial<C> & { formControl?: FormControl };\n  code?: string;\n  template?: string;\n}\n\nexport const story = <C = any>(story: Story<C>, config: StoryConfig<C>) => {\n  if (config.multiple) {\n    exposeAllPossibilities(story, config.selector, config.multiple.prop, config.multiple.options);\n  }\n\n  const descriptionObject = config.description\n    ? {\n        parameters: {\n          docs: {\n            description: {\n              story: config.description,\n            },\n          },\n        },\n      }\n    : {};\n\n  const propsObject = config.props\n    ? {\n        args: config.props,\n      }\n    : {};\n\n  const codeObject = config.code\n    ? {\n        parameters: {\n          docs: {\n            source: {\n              code: config.code,\n              language: 'html',\n              type: 'auto',\n            },\n          },\n        },\n      }\n    : {};\n\n  const templateObject = config.template\n    ? {\n        decorators: [componentWrapperDecorator(() => config.template!)],\n        parameters: {\n          docs: {\n            source: {\n              code: config.template,\n              language: 'html',\n              type: 'auto',\n            },\n          },\n        },\n      }\n    : {};\n\n  return merge(story, descriptionObject, propsObject, codeObject, templateObject);\n};\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "props",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-12253b290c4bc4e32b2ade3a76acf713945e64fe10106cab4347fe9a896eae6bc48ed969c0271ce4c524a2e4455eb28b7695b8f1a0a262b3d6b934064f35fdcd",
            "file": "src/app/tasks/interfaces/task.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GitIssue, GitPull } from '@dashboard/interfaces/git-integration.interface';\n\n/**\n * Project task interface\n */\nexport interface Task {\n  /**\n   * Task id (unique per project)\n   */\n  id: number;\n\n  /**\n   * Task name\n   */\n  name: string;\n\n  /**\n   * Task description\n   */\n  description: string;\n\n  /**\n   * Task deadline to be completed\n   */\n  deadline: Date;\n\n  /**\n   * Task estimated date to work on it\n   */\n  estimatedDate: Date;\n\n  /**\n   * Status id (unique per database)\n   */\n  statusId?: number;\n\n  /**\n   * Parent task id\n   */\n  parentTaskId?: number;\n\n  /**\n   * List of subtasks\n   */\n  subTasks?: Task[];\n\n  /**\n   * Optional link to the GitHub issue\n   */\n  issue?: string;\n\n  /**\n   * Task type (ex. EPIC, USER_STORY)\n   */\n  type: string;\n\n  /**\n   * Optional link to the GitHub pull request\n   */\n  pull?: string;\n\n  /**\n   * Optional merged pull requests list\n   */\n  mergedPullList?: String[];\n\n  /**\n   * Optional user id who is assigned to task\n   */\n  assigneeId?: number;\n}\n\n/**\n * Extended project task interface\n */\nexport interface TaskWithAdditionalData extends Omit<Task, 'pull' | 'issue'> {\n  /**\n   * Project identifier\n   */\n  projectId: number;\n\n  /**\n   * Workspace identifier\n   */\n  workspaceId: string;\n\n  /**\n   * Boolean to determine if task is connected to GitHub issue\n   */\n  connectWithIssueOnGitHub: boolean;\n\n  /**\n   * Boolean to determine if task should be attached to existing GitHub issue instead of creating new one\n   */\n  issueAttachGithub: boolean;\n\n  /**\n   * Boolean to determine if task is connected to GitHub pull request\n   */\n  connectWithPullRequestOnGitHub: boolean;\n\n  /**\n   * GitHub pull to which the task is connected to\n   */\n  pull: GitPull;\n\n  /**\n   * GitHub issue to which the task is connected to\n   */\n  issue: GitIssue;\n}\n",
            "properties": [
                {
                    "name": "assigneeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Optional user id who is assigned to task</p>\n",
                    "line": 70,
                    "rawdescription": "\n\nOptional user id who is assigned to task\n"
                },
                {
                    "name": "deadline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "<p>Task deadline to be completed</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nTask deadline to be completed\n"
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Task description</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nTask description\n"
                },
                {
                    "name": "estimatedDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "<p>Task estimated date to work on it</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nTask estimated date to work on it\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Task id (unique per project)</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nTask id (unique per project)\n"
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Optional link to the GitHub issue</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nOptional link to the GitHub issue\n"
                },
                {
                    "name": "mergedPullList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String[]",
                    "optional": true,
                    "description": "<p>Optional merged pull requests list</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nOptional merged pull requests list\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Task name</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nTask name\n"
                },
                {
                    "name": "parentTaskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Parent task id</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nParent task id\n"
                },
                {
                    "name": "pull",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Optional link to the GitHub pull request</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nOptional link to the GitHub pull request\n"
                },
                {
                    "name": "statusId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Status id (unique per database)</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nStatus id (unique per database)\n"
                },
                {
                    "name": "subTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": true,
                    "description": "<p>List of subtasks</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nList of subtasks\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Task type (ex. EPIC, USER_STORY)</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nTask type (ex. EPIC, USER_STORY)\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Project task interface</p>\n",
            "rawdescription": "\n\nProject task interface\n",
            "methods": []
        },
        {
            "name": "TaskDialogData",
            "id": "interface-TaskDialogData-f16c0c98722170a0663dc2757ac92cc567ac44b94af49712c25414a10c0b25417074a0da6d6637bda22523e5da6ff5379bdbab9d883639042c5b9a9d50d2f738",
            "file": "src/app/tasks/dialogs/task/task.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { GitIssue, GitPull } from '@dashboard/interfaces/git-integration.interface';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { GitIntegrationService } from '@dashboard/services/git-integration.service';\nimport { WorkspaceService } from '@dashboard/services/workspace.service';\nimport { Enum } from '@main/classes/enum.class';\nimport { RouterExtensionsService } from '@main/services/router-extensions.service';\nimport { TaskPriority } from '@tasks/enums/task-priority.enum';\nimport { SubTaskType, TaskType } from '@tasks/enums/task-type.enum';\nimport { Status } from '@tasks/interfaces/status.interface';\nimport { StatusService } from '@tasks/services/status.service';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { requiredValidator } from '../../../_main/validators/required.validator';\nimport { Task } from '../../interfaces/task.interface';\n\nexport enum TaskDialogVariant {\n  CREATE = 'create',\n  EDIT = 'edit',\n}\n\nexport interface TaskDialogData {\n  workspaceId: number;\n  projectId?: number;\n  variant: TaskDialogVariant;\n  task?: Partial<Task>;\n  subtask?: boolean;\n}\n\n@Component({\n  selector: 'app-task-dialog',\n  templateUrl: './task.dialog.html',\n  styleUrls: ['./task.dialog.scss'],\n})\nexport class TaskDialog implements OnInit {\n  TaskDialogVariant = TaskDialogVariant;\n\n  public taskTypes = Enum.entries(TaskType);\n  public subTaskTypes = Enum.entries(SubTaskType);\n  public taskPriorities = Object.values(TaskPriority);\n\n  public statusList$!: Observable<Status[]>;\n  public workspaceList$!: Observable<Workspace[]>;\n  public projectList$: Observable<Project[]> = new BehaviorSubject([]);\n  public issueList$!: Observable<GitIssue[]>;\n  public pullList$!: Observable<GitPull[]>;\n\n  public isGitHubIntegrationAvailable: boolean = false;\n\n  public form = new FormGroup({\n    id: new FormControl(null),\n    parentTaskId: new FormControl(null),\n    type: new FormControl(TaskType.TASK, [requiredValidator()]),\n    name: new FormControl('', [requiredValidator()]),\n    statusId: new FormControl(null, [requiredValidator()]),\n    projectId: new FormControl(null, [requiredValidator()]),\n    workspaceId: new FormControl(null, [requiredValidator()]),\n    description: new FormControl(''),\n    priority: new FormControl(this.taskPriorities[2], [requiredValidator()]),\n    deadline: new FormControl(null),\n    estimatedDate: new FormControl(null),\n\n    // GitHub issue integration fields\n    connectWithIssueOnGitHub: new FormControl(false),\n    issueAttachGithub: new FormControl(false),\n    issue: new FormControl(null),\n\n    // Github pull requests integration fields\n    connectWithPullRequestOnGitHub: new FormControl(false),\n    pull: new FormControl(null),\n  });\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: TaskDialogData,\n    private dialogRef: MatDialogRef<TaskDialog>,\n    private statusService: StatusService,\n    private workspaceService: WorkspaceService,\n    private gitIntegrationService: GitIntegrationService,\n    private routerExtensions: RouterExtensionsService,\n  ) {}\n\n  ngOnInit() {\n    this.loadParamsFromUrl();\n\n    const { workspaceId, projectId, task } = this.data;\n    this.form.patchValue({ workspaceId, projectId });\n    if (task) this.form.patchValue(task);\n\n    this.workspaceList$ = this.workspaceService.list();\n\n    this.form.get('workspaceId')?.valueChanges.subscribe(this.onWorkspaceIdChange.bind(this));\n    this.form.get('projectId')?.valueChanges.subscribe(this.onProjectIdChange.bind(this));\n\n    if (workspaceId) {\n      this.onWorkspaceIdChange(workspaceId);\n    }\n\n    if (projectId) {\n      this.onProjectIdChange(projectId);\n    }\n  }\n\n  onWorkspaceIdChange(workspaceId: number) {\n    this.projectList$ = this.projectList$ = this.workspaceService\n      .get(workspaceId)\n      .pipe(map((workspace) => workspace.projectsWithPrivileges.map((project) => project.project)));\n  }\n\n  onProjectIdChange(projectId: number) {\n    this.statusList$ = this.statusService.list(projectId);\n    this.clearGitHubIntegrationFields();\n\n    this.statusList$.subscribe((statuses) => {\n      const statusId = statuses.find((status) => status.begin)?.id;\n\n      if (!statusId) return;\n\n      this.form.patchValue({ statusId });\n    });\n\n    this.gitIntegrationService.hasGitHubIntegration(projectId!).subscribe((value) => {\n      this.isGitHubIntegrationAvailable = value;\n\n      if (this.isGitHubIntegrationAvailable) {\n        this.issueList$ = this.gitIntegrationService.gitHubIssueList(projectId);\n        this.pullList$ = this.gitIntegrationService.gitHubPullList(projectId);\n      } else {\n        this.issueList$ = new BehaviorSubject([]);\n        this.pullList$ = new BehaviorSubject([]);\n      }\n    });\n  }\n\n  loadParamsFromUrl() {\n    const { workspaceId, projectId } = this.routerExtensions.snapshot.params;\n    this.data.workspaceId = this.data.workspaceId || Number(workspaceId);\n    this.data.projectId = this.data.projectId || Number(projectId);\n  }\n\n  clearGitHubIntegrationFields() {\n    this.form.patchValue({\n      issueNumberGitHub: null,\n      issueAttachGithub: false,\n      connectWithIssueOnGitHub: false,\n    });\n  }\n\n  confirm() {\n    const formValues = this.form.value;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.invalid) return;\n\n    if (formValues.connectWithIssueOnGitHub && !formValues.issueAttachGithub) {\n      formValues.createIssue = true;\n    } else {\n      formValues.createIssue = false;\n    }\n\n    console.log(formValues);\n\n    this.dialogRef.close(formValues);\n  }\n\n  cancel() {\n    this.dialogRef.close(false);\n  }\n}\n",
            "properties": [
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "subtask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<Task>",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskDialogVariant",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TaskWithAdditionalData",
            "id": "interface-TaskWithAdditionalData-12253b290c4bc4e32b2ade3a76acf713945e64fe10106cab4347fe9a896eae6bc48ed969c0271ce4c524a2e4455eb28b7695b8f1a0a262b3d6b934064f35fdcd",
            "file": "src/app/tasks/interfaces/task.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GitIssue, GitPull } from '@dashboard/interfaces/git-integration.interface';\n\n/**\n * Project task interface\n */\nexport interface Task {\n  /**\n   * Task id (unique per project)\n   */\n  id: number;\n\n  /**\n   * Task name\n   */\n  name: string;\n\n  /**\n   * Task description\n   */\n  description: string;\n\n  /**\n   * Task deadline to be completed\n   */\n  deadline: Date;\n\n  /**\n   * Task estimated date to work on it\n   */\n  estimatedDate: Date;\n\n  /**\n   * Status id (unique per database)\n   */\n  statusId?: number;\n\n  /**\n   * Parent task id\n   */\n  parentTaskId?: number;\n\n  /**\n   * List of subtasks\n   */\n  subTasks?: Task[];\n\n  /**\n   * Optional link to the GitHub issue\n   */\n  issue?: string;\n\n  /**\n   * Task type (ex. EPIC, USER_STORY)\n   */\n  type: string;\n\n  /**\n   * Optional link to the GitHub pull request\n   */\n  pull?: string;\n\n  /**\n   * Optional merged pull requests list\n   */\n  mergedPullList?: String[];\n\n  /**\n   * Optional user id who is assigned to task\n   */\n  assigneeId?: number;\n}\n\n/**\n * Extended project task interface\n */\nexport interface TaskWithAdditionalData extends Omit<Task, 'pull' | 'issue'> {\n  /**\n   * Project identifier\n   */\n  projectId: number;\n\n  /**\n   * Workspace identifier\n   */\n  workspaceId: string;\n\n  /**\n   * Boolean to determine if task is connected to GitHub issue\n   */\n  connectWithIssueOnGitHub: boolean;\n\n  /**\n   * Boolean to determine if task should be attached to existing GitHub issue instead of creating new one\n   */\n  issueAttachGithub: boolean;\n\n  /**\n   * Boolean to determine if task is connected to GitHub pull request\n   */\n  connectWithPullRequestOnGitHub: boolean;\n\n  /**\n   * GitHub pull to which the task is connected to\n   */\n  pull: GitPull;\n\n  /**\n   * GitHub issue to which the task is connected to\n   */\n  issue: GitIssue;\n}\n",
            "properties": [
                {
                    "name": "connectWithIssueOnGitHub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Boolean to determine if task is connected to GitHub issue</p>\n",
                    "line": 90,
                    "rawdescription": "\n\nBoolean to determine if task is connected to GitHub issue\n"
                },
                {
                    "name": "connectWithPullRequestOnGitHub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Boolean to determine if task is connected to GitHub pull request</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nBoolean to determine if task is connected to GitHub pull request\n"
                },
                {
                    "name": "issue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GitIssue",
                    "optional": false,
                    "description": "<p>GitHub issue to which the task is connected to</p>\n",
                    "line": 110,
                    "rawdescription": "\n\nGitHub issue to which the task is connected to\n"
                },
                {
                    "name": "issueAttachGithub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Boolean to determine if task should be attached to existing GitHub issue instead of creating new one</p>\n",
                    "line": 95,
                    "rawdescription": "\n\nBoolean to determine if task should be attached to existing GitHub issue instead of creating new one\n"
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Project identifier</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nProject identifier\n"
                },
                {
                    "name": "pull",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GitPull",
                    "optional": false,
                    "description": "<p>GitHub pull to which the task is connected to</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nGitHub pull to which the task is connected to\n"
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Workspace identifier</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nWorkspace identifier\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Extended project task interface</p>\n",
            "rawdescription": "\n\nExtended project task interface\n",
            "methods": [],
            "extends": "Omit"
        },
        {
            "name": "User",
            "id": "interface-User-1fdb2a41c6419463df025b921647826e8ab777140223134701e8e8932296f6b0cd3f5eb015a77f8401d24f9edbe2b318d73ce713d656cad53c33c851169fd9d5",
            "file": "src/app/auth/interfaces/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: number;\n  name: string;\n  surname: string;\n  email: string;\n  username: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserWithPrivileges {\n  user: User;\n  privileges: number;\n}\n\nexport interface ModifyUser {\n  name: string;\n  surname: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserData {\n  id: number;\n  name: string;\n  surname: string;\n  username: string;\n  avatar: string;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "surname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserData",
            "id": "interface-UserData-1fdb2a41c6419463df025b921647826e8ab777140223134701e8e8932296f6b0cd3f5eb015a77f8401d24f9edbe2b318d73ce713d656cad53c33c851169fd9d5",
            "file": "src/app/auth/interfaces/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: number;\n  name: string;\n  surname: string;\n  email: string;\n  username: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserWithPrivileges {\n  user: User;\n  privileges: number;\n}\n\nexport interface ModifyUser {\n  name: string;\n  surname: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserData {\n  id: number;\n  name: string;\n  surname: string;\n  username: string;\n  avatar: string;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "surname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserSession",
            "id": "interface-UserSession-9617158b26ccdda6a2f13ee789e24a1c9deff7df12fc38ecf664c69e9952e5ed5b1bc0cdf34991c0b15bac52dcf531f9145792d7c774c8f769b4ed1fab5f174d",
            "file": "src/app/settings/interfaces/session.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserSession {\n  id: number;\n  userAgent: string;\n  ip: string;\n  lastUsed: number;\n  remembered: boolean;\n  geoip: {\n    city: string;\n    country: string;\n  };\n  current: boolean;\n}\n",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "geoip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "ip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastUsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "remembered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "userAgent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserWithPrivileges",
            "id": "interface-UserWithPrivileges-1fdb2a41c6419463df025b921647826e8ab777140223134701e8e8932296f6b0cd3f5eb015a77f8401d24f9edbe2b318d73ce713d656cad53c33c851169fd9d5",
            "file": "src/app/auth/interfaces/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: number;\n  name: string;\n  surname: string;\n  email: string;\n  username: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserWithPrivileges {\n  user: User;\n  privileges: number;\n}\n\nexport interface ModifyUser {\n  name: string;\n  surname: string;\n  password: string;\n  avatar: string;\n}\n\nexport interface UserData {\n  id: number;\n  name: string;\n  surname: string;\n  username: string;\n  avatar: string;\n}\n",
            "properties": [
                {
                    "name": "privileges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValidationError",
            "id": "interface-ValidationError-930babca5f011324f2141b9112cf771b83ca0d1e0908687d90fb13c7643fcf9e2411971f52e1fdf85b21d0d4fa8b08d60db14827fb1289dd1f91b2599a62e6a2",
            "file": "src/app/_main/interfaces/validation-error.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ValidationError {\n  /**\n   * Type of the error. For example 'required', 'minlength', 'maxlength', 'pattern', 'email', etc.\n   */\n  type: string;\n  /**\n   * Human readable error message.\n   */\n  message: string;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Human readable error message.</p>\n",
                    "line": 12,
                    "rawdescription": "\n\nHuman readable error message.\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Type of the error. For example &#39;required&#39;, &#39;minlength&#39;, &#39;maxlength&#39;, &#39;pattern&#39;, &#39;email&#39;, etc.</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nType of the error. For example 'required', 'minlength', 'maxlength', 'pattern', 'email', etc.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Validation error interface. Used with form controls to specify what validators returned errors.</p>\n",
            "rawdescription": "\n\nValidation error interface. Used with form controls to specify what validators returned errors.\n",
            "methods": []
        },
        {
            "name": "Workspace",
            "id": "interface-Workspace-7912098c778458b3b4e6c2052d28ae0d4e3eee00d1f3d67605f36c9d53cb3d41cee7d26abad2f05ba698bda4457e666363b9bec8ec39e56fce8b880934735d16",
            "file": "src/app/dashboard/interfaces/workspace.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from './project.interface';\n/**\n * Main workspace (projects/spaces grouping entity) interface\n */\nexport interface Workspace {\n  /**\n   * Workspace ID\n   */\n  id: number;\n  /**\n   * Workspace name\n   */\n  name: string;\n\n  projectsWithPrivileges: {\n    project: Project;\n    privileges: number;\n  }[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Workspace ID</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nWorkspace ID\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Workspace name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nWorkspace name\n"
                },
                {
                    "name": "projectsWithPrivileges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Main workspace (projects/spaces grouping entity) interface</p>\n",
            "rawdescription": "\n\nMain workspace (projects/spaces grouping entity) interface\n",
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-e81b60019809181f885eeec23d4ecacc5233028d32265b0945bf465c370b34d9f7b2d2b7fa9d76eecec11d3b97d402cc6b498abb5a9775d008691aaf1c5830bd",
            "file": "src/app/_main/services/api.service.ts",
            "properties": [
                {
                    "name": "apiURL",
                    "defaultValue": "environment.apiURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>URL of the API. Provided in the environment configuration file.</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nURL of the API. Provided in the environment configuration file.\n",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends DELETE request to the API.\n",
                    "description": "<p>Sends DELETE request to the API.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1885,
                                "end": 1888,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1879,
                                "end": 1884,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>URL where to send request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1927,
                                "end": 1934,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1921,
                                "end": 1926,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>advanced options to configure request</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1979,
                                "end": 1986,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends GET request to the API.\n",
                    "description": "<p>Sends GET request to the API.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1201,
                                "end": 1204,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1195,
                                "end": 1200,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>URL where to send request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1243,
                                "end": 1250,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1237,
                                "end": 1242,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>advanced options to configure request</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1295,
                                "end": 1302,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends PATCH request to the API.\n",
                    "description": "<p>Sends PATCH request to the API.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2571,
                                "end": 2574,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2565,
                                "end": 2570,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>URL where to send request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2613,
                                "end": 2620,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2607,
                                "end": 2612,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>advanced options to configure request</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2665,
                                "end": 2672,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends POST request to the API.\n",
                    "description": "<p>Sends POST request to the API.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1541,
                                "end": 1544,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1535,
                                "end": 1540,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>URL where to send request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1583,
                                "end": 1590,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1577,
                                "end": 1582,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>advanced options to configure request</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1635,
                                "end": 1642,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends PUT request to the API.\n",
                    "description": "<p>Sends PUT request to the API.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2230,
                                "end": 2233,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2224,
                                "end": 2229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>URL where to send request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2272,
                                "end": 2279,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2266,
                                "end": 2271,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>advanced options to configure request</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2324,
                                "end": 2331,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "request",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends request to the API.\n",
                    "description": "<p>Sends request to the API.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 696,
                                "end": 702,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "method"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 690,
                                "end": 695,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>HTTP method to use</p>\n"
                        },
                        {
                            "name": {
                                "pos": 734,
                                "end": 737,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "url"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 728,
                                "end": 733,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>URL where to send request</p>\n"
                        },
                        {
                            "name": {
                                "pos": 776,
                                "end": 783,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "options"
                            },
                            "type": "RequestOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 770,
                                "end": 775,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>advanced options to configure request</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 828,
                                "end": 835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service to access the API</p>\n",
            "rawdescription": "\n\nService to access the API\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Service } from '../decorators/service.decorator';\nimport { RequestOptions } from '../interfaces/request-options.interface';\n\n/**\n * Service to access the API\n */\n@Service()\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  /**\n   * URL of the API. Provided in the environment configuration file.\n   */\n  private apiURL: string = environment.apiURL;\n\n  /** Default service constructor with `HttpClient` dependency */\n  constructor(private httpClient: HttpClient) {}\n\n  /**\n   * Sends request to the API.\n   * @param method HTTP method to use\n   * @param url URL where to send request\n   * @param options advanced options to configure request\n   * @returns Request observable, which completes when request is finished\n   */\n  public request<T = any>(method: string, url: string, options?: RequestOptions) {\n    return this.httpClient.request<T>(method, this.apiURL + url, {\n      responseType: 'json' as any,\n      withCredentials: true,\n      ...options,\n    });\n  }\n\n  /**\n   * Sends GET request to the API.\n   * @param url URL where to send request\n   * @param options advanced options to configure request\n   * @returns Request observable, which completes when request is finished\n   */\n  public get<T = any>(url: string, options?: RequestOptions) {\n    return this.request<T>('GET', url, options);\n  }\n\n  /**\n   * Sends POST request to the API.\n   * @param url URL where to send request\n   * @param options advanced options to configure request\n   * @returns Request observable, which completes when request is finished\n   */\n  public post<T = any>(url: string, options?: RequestOptions) {\n    return this.request<T>('POST', url, options);\n  }\n\n  /**\n   * Sends DELETE request to the API.\n   * @param url URL where to send request\n   * @param options advanced options to configure request\n   * @returns Request observable, which completes when request is finished\n   */\n  public delete<T = any>(url: string, options?: RequestOptions) {\n    return this.request<T>('DELETE', url, options);\n  }\n\n  /**\n   * Sends PUT request to the API.\n   * @param url URL where to send request\n   * @param options advanced options to configure request\n   * @returns Request observable, which completes when request is finished\n   */\n  public put<T = any>(url: string, options?: RequestOptions) {\n    return this.request<T>('PUT', url, options);\n  }\n\n  /**\n   * Sends PATCH request to the API.\n   * @param url URL where to send request\n   * @param options advanced options to configure request\n   * @returns Request observable, which completes when request is finished\n   */\n  public patch<T = any>(url: string, options?: RequestOptions) {\n    return this.request<T>('PATCH', url, options);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default service constructor with <code>HttpClient</code> dependency</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "rawdescription": "\nDefault service constructor with `HttpClient` dependency",
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-092bf342902fde70d2fa2ea3aa813baedbe073a6d52870bc5436e9ea8170c053fa277f16981a8b418c814e2a029adb9ed03a4303c620dbea62663053ce7c2b33",
            "file": "src/app/auth/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deleteAccountConfirmation",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "recoverAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNewPassword",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Service } from '@main/decorators/service.decorator';\nimport { ApiService } from 'src/app/_main/services/api.service';\n\n@Service()\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(private apiService: ApiService) {}\n\n  public register({\n    email,\n    password,\n    name,\n    surname,\n    username,\n  }: {\n    email: string;\n    password: string;\n    name: string;\n    surname: string;\n    username: string;\n  }) {\n    return this.apiService.post(`/auth/register`, {\n      body: { email, password, name, surname, username },\n    });\n  }\n\n  public login({\n    email,\n    password,\n    remember,\n  }: {\n    email: string;\n    password: string;\n    remember: boolean;\n  }) {\n    return this.apiService.post(`/auth/login`, { body: { email, password, remember } });\n  }\n\n  public logout() {\n    localStorage.removeItem('logged');\n    return this.apiService.post(`/auth/logout`, { body: {} });\n  }\n\n  public resetPassword({ email }: { email: string }) {\n    return this.apiService.post(`/auth/password/recover`, { body: { email } });\n  }\n\n  public setNewPassword(token: string, password: string) {\n    return this.apiService.post(`/auth/password/reset`, { body: { token, password } });\n  }\n\n  public deleteAccount() {\n    return this.apiService.delete(`/auth/delete`, { body: {} });\n  }\n\n  public deleteAccountConfirmation(token: string) {\n    return this.apiService.delete(`/auth/delete/confirm`, { body: { token } });\n  }\n\n  public recoverAccount() {\n    return this.apiService.post(`/auth/delete/recover`, { body: {} });\n  }\n\n  public isLoggedIn() {\n    if (localStorage.getItem('logged')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-ae63cfafdab8c372a607d1c6ac77967a0b0d016a4e0e43b497fee07966859871de521b6601ba3c49cd6e63917895d98170d202a5902abfa80169a52dd02a1bea",
            "file": "src/app/_main/services/dialog.service.ts",
            "properties": [
                {
                    "name": "dialogs$",
                    "defaultValue": "new BehaviorSubject<Map<number, MatDialogRef<unknown, any> | DialogRef>>(\n    this.dialogsMap,\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dialogsMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "outlets",
                    "defaultValue": "new Map<DialogOutlet, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "alert",
                    "args": [
                        {
                            "name": "data",
                            "type": "AlertDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a alert/information dialog.\n",
                    "description": "<p>Opens a alert/information dialog.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2552,
                                "end": 2556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "AlertDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2546,
                                "end": 2551,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Object to pass as data to the dialog</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2600,
                                "end": 2607,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Reference to the newly-opened dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "data",
                            "type": "AlertDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a confirm dialog.\n",
                    "description": "<p>Opens a confirm dialog.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3076,
                                "end": 3080,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "AlertDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3070,
                                "end": 3075,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Object to pass as data to the dialog</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3124,
                                "end": 3131,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Reference to the newly-opened dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "confirmProjectDelete",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmWorkspaceDelete",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "outlet",
                            "type": "DialogOutlet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef | DialogRef",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a modal dialog containing the given component.\n",
                    "description": "<p>Opens a modal dialog containing the given component.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1291,
                                "end": 1300,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "component"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1285,
                                "end": 1290,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Type of the component to load into the dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1360,
                                "end": 1364,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1354,
                                "end": 1359,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Object to pass as data to the dialog</p>\n"
                        },
                        {
                            "name": "outlet",
                            "type": "DialogOutlet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1408,
                                "end": 1415,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Reference to the newly-opened dialog.</p>\n"
                        }
                    ]
                },
                {
                    "name": "openErrorDialog",
                    "args": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOutlet",
                    "args": [
                        {
                            "name": "outlet",
                            "type": "DialogOutlet",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "outlet",
                            "type": "DialogOutlet",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Service to manage dialogs.</p>\n",
            "rawdescription": "\n\nService to manage dialogs.\n",
            "sourceCode": "import { Injectable, Injector } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { DialogRef } from '@main/classes/dialog-ref.class';\nimport { BehaviorSubject, filter } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\nimport { Service } from '../decorators/service.decorator';\nimport { AlertDialog, AlertDialogData, AlertDialogVariant } from '../dialogs/alert/alert.dialog';\n\nexport enum DialogOutlet {\n  CONTENT_RIGHT = 'CONTENT_RIGHT',\n}\n\n/**\n * Service to manage dialogs.\n */\n@Service()\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogService {\n  private dialogsMap = new Map();\n  private dialogs$ = new BehaviorSubject<Map<number, MatDialogRef<unknown, any> | DialogRef>>(\n    this.dialogsMap,\n  );\n  private outlets = new Map<DialogOutlet, any>();\n\n  public get isAnyDialogOpen() {\n    return this.dialogs$.getValue().size > 0;\n  }\n  /**\n   * Default constructor with `MatDialog` dependency.\n   * @param matDialog MatDialog instance\n   */\n  constructor(private matDialog: MatDialog, private injector: Injector) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param component Type of the component to load into the dialog.\n   * @param data Object to pass as data to the dialog\n   * @returns Reference to the newly-opened dialog.\n   */\n  open(component: any, data: any, outlet?: DialogOutlet): MatDialogRef<any> | DialogRef {\n    console.log();\n\n    let dialog: MatDialogRef<any> | DialogRef;\n\n    if (outlet) {\n      const outletComponent = this.outlets.get(outlet);\n\n      if (!outletComponent)\n        throw new Error(\n          `${outlet} is not assigned to any dialog outlet component, you need to call registerOutlet()`,\n        );\n\n      dialog = outletComponent.renderDialog(component, data);\n    } else {\n      dialog = this.matDialog.open(component, {\n        data,\n        width: '400px',\n      });\n    }\n\n    const uid = uuid();\n    this.dialogsMap.set(uid, dialog);\n\n    dialog.afterClosed().subscribe(() => {\n      this.dialogsMap.delete(uid);\n      this.dialogs$.next(this.dialogsMap);\n    });\n\n    this.dialogs$.next(this.dialogsMap);\n\n    return dialog;\n  }\n\n  closeAll() {\n    this.dialogsMap.forEach((dialog) => {\n      dialog.close();\n    });\n  }\n\n  registerOutlet(outlet: DialogOutlet, component: any) {\n    this.outlets.set(outlet, component);\n  }\n\n  /**\n   * Opens a alert/information dialog.\n   * @param data Object to pass as data to the dialog\n   * @returns Reference to the newly-opened dialog.\n   */\n  alert(data: AlertDialogData) {\n    return this.open(AlertDialog, data)\n      .afterClosed()\n      .pipe(filter((result) => result));\n  }\n\n  openErrorDialog(error: string) {\n    const data: AlertDialogData = {\n      title: 'Error',\n      message: error,\n      variant: AlertDialogVariant.IMPORTANT,\n      cancelText: $localize`Close`,\n    };\n    return this.alert(data);\n  }\n\n  /**\n   * Opens a confirm dialog.\n   * @param data Object to pass as data to the dialog\n   * @returns Reference to the newly-opened dialog.\n   */\n  confirm(data: AlertDialogData) {\n    return this.alert(data);\n  }\n\n  confirmProjectDelete(project: Project) {\n    return this.confirm({\n      title: $localize`Delete project \"${project.name}\"`,\n      message: $localize`Are you sure you want to delete project \"${project.name}\"?`,\n      confirmText: $localize`Delete`,\n      cancelText: $localize`Cancel`,\n      variant: AlertDialogVariant.IMPORTANT,\n    });\n  }\n\n  confirmWorkspaceDelete(workspace: Workspace) {\n    return this.confirm({\n      title: $localize`Delete workspace \"${workspace.name}\"`,\n      message: $localize`Are you sure you want to delete this workspace \"${workspace.name}\"?`,\n      confirmText: $localize`Delete`,\n      cancelText: $localize`Cancel`,\n      variant: AlertDialogVariant.IMPORTANT,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor with <code>MatDialog</code> dependency.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "rawdescription": "\n\nDefault constructor with `MatDialog` dependency.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1104,
                            "end": 1113,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "matDialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1098,
                            "end": 1103,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>MatDialog instance</p>\n"
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isAnyDialogOpen": {
                    "name": "isAnyDialogOpen",
                    "getSignature": {
                        "name": "isAnyDialogOpen",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "GitIntegrationService",
            "id": "injectable-GitIntegrationService-a59075f1eb9c6cf6472b85df60efe63b9829713e39f4ff21aa281f54dd0cb4dbc966429d46982025098fef862118922275a23fd2777c2c34e8ce1e372c1d44ca",
            "file": "src/app/dashboard/services/git-integration.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "attachGitHubIntegration",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "repositoryName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "repositoryName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "connectGitHubIssue",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "issue",
                            "type": "GitIssue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "issue",
                            "type": "GitIssue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "connectGitHubPull",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pull",
                            "type": "GitPull",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pull",
                            "type": "GitPull",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteConnectedGitHubAccount",
                    "args": [
                        {
                            "name": "gitHubAccountId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDelete the given account connection\n",
                    "description": "<p>Delete the given account connection</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2575,
                                "end": 2590,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "gitHubAccountId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2569,
                                "end": 2574,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>GitHub account id</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2615,
                                "end": 2622,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>object with link to open the GitHub page with application removal</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteGitHubIntegration",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disconnectGitHubIssue",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disconnectGitHubPull",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConnectedGitHubAccounts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<GitAccount[]>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getGitHubAccountConnectedProjects",
                    "args": [
                        {
                            "name": "account",
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Project[]>",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGitHubIntegration",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<GitIntegration>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gitHubIssueList",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gitHubPullList",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasGitHubIntegration",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOwnerOfRepository",
                    "args": [
                        {
                            "name": "repositoryName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "account",
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if the given account is the owner of the repository\n```html\n```",
                    "description": "<p>Checks if the given account is the owner of the repository</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4304,
                                "end": 4318,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "repositoryName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4298,
                                "end": 4303,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Repository name with it&#39;s owner ex.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4379,
                                "end": 4386,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "account"
                            },
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4373,
                                "end": 4378,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>GitHub account object to test with</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4428,
                                "end": 4435,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>this.gitHubIntegrationService.isOwnerOfRepository(&#39;@czemar/cli&#39;, account)</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4516,
                                "end": 4523,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if the repository is owned by the account</p>\n"
                        }
                    ]
                },
                {
                    "name": "postGitHubIntegration",
                    "args": [
                        {
                            "name": "installationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "installationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startGitHubIntegration",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStart GitHub integration process - opens the GitHub page in new window, to give user ability to choose witch account and repositories wants to give access to.\n```html\n```",
                    "description": "<p>Start GitHub integration process - opens the GitHub page in new window, to give user ability to choose witch account and repositories wants to give access to.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\"></code></pre></div>",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1012,
                                "end": 1019,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>this.gitHubIntegrationService.startGitHubIntegration()</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1081,
                                "end": 1088,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable<boolean> true if the opened window with GitHub integration was closed</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>How to use Git integration service:</p>\n<ol>\n<li>Run method <code>startGitHubIntegration()</code> to start the integration process and open the browser to the GitHub login page.</li>\n</ol>\n",
            "rawdescription": "\n\nHow to use Git integration service:\n\n1. Run method `startGitHubIntegration()` to start the integration process and open the browser to the GitHub login page.\n\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  GitAccount,\n  GitIntegration,\n  GitIssue,\n  GitPull,\n} from '@dashboard/interfaces/git-integration.interface';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { Service } from '@main/decorators/service.decorator';\nimport { ApiService } from '@main/services/api.service';\nimport { filter, interval, map, mergeMap, Observable, take } from 'rxjs';\nimport { ProjectService } from './project.service';\n\n/**\n * How to use Git integration service:\n *\n * 1. Run method `startGitHubIntegration()` to start the integration process and open the browser to the GitHub login page.\n *\n *\n */\n@Service()\n@Injectable({\n  providedIn: 'root',\n})\nexport class GitIntegrationService {\n  constructor(private apiService: ApiService, private projectService: ProjectService) {}\n\n  /**\n   * Start GitHub integration process - opens the GitHub page in new window, to give user ability to choose witch account and repositories wants to give access to.\n   * @example this.gitHubIntegrationService.startGitHubIntegration()\n   * @returns Observable<boolean> true if the opened window with GitHub integration was closed\n   */\n  public startGitHubIntegration(): Observable<boolean> {\n    return this.apiService.get('/user/integration/github/repository').pipe(\n      map((response: any) => response.link),\n      mergeMap((url) => {\n        const win = window.open(url, '_blank');\n\n        if (!win) throw new Error('This browser does not support window.open');\n\n        return interval(100).pipe(\n          map(() => win.closed),\n          filter((closed) => closed),\n          take(1),\n        );\n      }),\n    );\n  }\n\n  public postGitHubIntegration(installationId: string): Observable<void> {\n    return this.apiService.post(`/user/integration/github`, {\n      params: { installationId },\n    });\n  }\n\n  public getGitHubIntegration(): Observable<GitIntegration> {\n    return this.apiService.get('/user/integration/github/repository');\n  }\n\n  public attachGitHubIntegration(projectId: number, repositoryName: string): Observable<void> {\n    return this.apiService.post(`/project/${projectId}/integration/github`, {\n      body: repositoryName,\n    });\n  }\n\n  public getConnectedGitHubAccounts(): Observable<GitAccount[]> {\n    return this.apiService\n      .get('/user/integration/github')\n      .pipe(\n        map((accounts: GitAccount[]) =>\n          accounts.map((account) => ({ ...account, gitHubUsername: `@${account.gitHubUsername}` })),\n        ),\n      );\n  }\n\n  /**\n   * Delete the given account connection\n   * @param gitHubAccountId GitHub account id\n   * @returns object with link to open the GitHub page with application removal\n   */\n  public deleteConnectedGitHubAccount(gitHubAccountId: number): Observable<{ link: string }> {\n    return this.apiService.delete(`/user/integration/github/${gitHubAccountId}`);\n  }\n\n  public deleteGitHubIntegration(projectId: number): Observable<void> {\n    return this.apiService.delete(`/project/${projectId}/integration/github`);\n  }\n\n  public hasGitHubIntegration(projectId: number): Observable<boolean> {\n    return this.projectService.get(projectId).pipe(map((project) => !!project.gitHubIntegration));\n  }\n\n  public gitHubIssueList(projectId: number) {\n    return this.apiService.get(`/project/${projectId}/integration/git/issue`);\n  }\n\n  public connectGitHubIssue(projectId: number, taskId: number, issue?: GitIssue) {\n    return this.apiService.post(`/project/${projectId}/task/${taskId}/integration/git/issue`, {\n      body: issue,\n    });\n  }\n\n  public disconnectGitHubIssue(projectId: number, taskId: number) {\n    return this.apiService.delete(`/project/${projectId}/task/${taskId}/integration/git/issue`);\n  }\n\n  public gitHubPullList(projectId: number) {\n    return this.apiService.get(`/project/${projectId}/integration/git/pull`);\n  }\n\n  public connectGitHubPull(projectId: number, taskId: number, pull?: GitPull) {\n    return this.apiService.post(`/project/${projectId}/task/${taskId}/integration/git/pull`, {\n      body: pull,\n    });\n  }\n\n  public disconnectGitHubPull(projectId: number, taskId: number) {\n    return this.apiService.delete(`/project/${projectId}/task/${taskId}/integration/git/pull`);\n  }\n\n  /**\n   * Checks if the given account is the owner of the repository\n   * @param repositoryName Repository name with it's owner ex. @czemar/cli\n   * @param account GitHub account object to test with\n   * @example this.gitHubIntegrationService.isOwnerOfRepository('@czemar/cli', account)\n   * @returns true if the repository is owned by the account\n   */\n  public isOwnerOfRepository(repositoryName: string, account: GitAccount): boolean {\n    const preparedUsername = account.gitHubUsername.replace('@', '');\n    return Boolean(repositoryName.match(new RegExp('^' + preparedUsername + '/*')));\n  }\n\n  public getGitHubAccountConnectedProjects(account: GitAccount): Observable<Project[]> {\n    return this.projectService\n      .list()\n      .pipe(\n        map((projects) =>\n          projects.filter(\n            (project: Project) =>\n              project.gitHubIntegration &&\n              this.isOwnerOfRepository(project.gitHubIntegration, account),\n          ),\n        ),\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemberService",
            "id": "injectable-MemberService-c692f78f5e41abc84f8e92edf42d0c265ee721f17f2bdd5da1ebfaef67f44e41525af45d511ab4de8dc9757897f26a339e81852a0e230894a709b3d636a49ef0",
            "file": "src/app/dashboard/services/member.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "emails",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projects",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds members to projects.\n",
                    "description": "<p>Adds members to projects.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1555,
                                "end": 1561,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "emails"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1549,
                                "end": 1554,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>emails of people to add</p>\n"
                        },
                        {
                            "name": "projects",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1652,
                                "end": 1659,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "leave",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLet member leave project.\n",
                    "description": "<p>Let member leave project.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1173,
                                "end": 1182,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1167,
                                "end": 1172,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project which are members from</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1226,
                                "end": 1228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1220,
                                "end": 1225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>id of the member who will leave the project</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1279,
                                "end": 1286,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectMember[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLists members in given project\n",
                    "description": "<p>Lists members in given project</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 475,
                                "end": 484,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 469,
                                "end": 474,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project which are members from</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 522,
                                "end": 529,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "map",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Map<number, ProjectMember>>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates members map from given project\n",
                    "description": "<p>Creates members map from given project</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2001,
                                "end": 2010,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1995,
                                "end": 2000,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project which are members from</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2048,
                                "end": 2055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectMember[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves members from project\n",
                    "description": "<p>Removes members from project</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 782,
                                "end": 791,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 776,
                                "end": 781,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project which are members from</p>\n"
                        },
                        {
                            "name": {
                                "pos": 835,
                                "end": 837,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 829,
                                "end": 834,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>list of member ids to remove from project</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 886,
                                "end": 893,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ProjectMember } from '@dashboard/interfaces/project-member.interface';\nimport { Service } from '@main/decorators/service.decorator';\nimport { map, Observable } from 'rxjs';\nimport { ApiService } from 'src/app/_main/services/api.service';\n\n@Service()\n@Injectable({\n  providedIn: 'root',\n})\nexport class MemberService {\n  constructor(private apiService: ApiService) {}\n\n  /**\n   * Lists members in given project\n   * @param projectId project which are members from\n   * @returns Request observable, which completes when request is finished\n   */\n  public list(projectId: number): Observable<ProjectMember[]> {\n    return this.apiService.get(`/project/${projectId}/member`);\n  }\n\n  /**\n   * Removes members from project\n   * @param projectId project which are members from\n   * @param id list of member ids to remove from project\n   * @returns Request observable, which completes when request is finished\n   */\n  public remove(projectId: number, id: number[]): Observable<ProjectMember[]> {\n    return this.apiService.put(`/project/${projectId}/member`, { body: id });\n  }\n\n  /**\n   * Let member leave project.\n   * @param projectId project which are members from\n   * @param id id of the member who will leave the project\n   * @returns Request observable, which completes when request is finished\n   */\n  public leave(projectId: number, id: number): Observable<null> {\n    return this.apiService.delete(`/project/${projectId}/member`, { body: id });\n  }\n\n  /**\n   * Adds members to projects.\n   * @param emails emails of people to add\n   * @param projectList projects where people will be added\n   * @returns Request observable, which completes when request is finished\n   */\n  public add(\n    emails: string[],\n    projects: number[],\n  ): Observable<{ emails: string[]; projectList: number[] }> {\n    return this.apiService.post(`/project/member`, { body: { emails, projects } });\n  }\n\n  /**\n   * Creates members map from given project\n   * @param projectId project which are members from\n   * @returns Request observable, which completes when request is finished\n   */\n  public map(projectId: number): Observable<Map<number, ProjectMember>> {\n    return this.list(projectId).pipe(\n      map((members) =>\n        members.reduce((acc: Map<number, ProjectMember>, member: ProjectMember) => {\n          acc.set(member.user.id, member);\n          return acc;\n        }, new Map<number, ProjectMember>()),\n      ),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-e40a347eed88e7a4973b26b0e2e73d30b6578138398fbd944575931a4d3e9dc6d3714b8565002a3e908f9c717175690b568e32869f46d16597916562f293dadf",
            "file": "src/app/dashboard/services/project.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeWorkspace",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newWorkspaceId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges the workspace of the project.\n",
                    "description": "<p>Changes the workspace of the project.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1669,
                                "end": 1678,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1663,
                                "end": 1668,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project to move</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1707,
                                "end": 1721,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "newWorkspaceId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1701,
                                "end": 1706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>workspace where the project will be moved</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1770,
                                "end": 1777,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "project",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new project.\n",
                    "description": "<p>Creates a new project.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1369,
                                "end": 1376,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "project"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1363,
                                "end": 1368,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project to add</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1398,
                                "end": 1405,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes the project by its ID.\n",
                    "description": "<p>Deletes the project by its ID.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 796,
                                "end": 805,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 790,
                                "end": 795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identifier of the project to delete from the API</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 861,
                                "end": 868,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets a project by its ID.\n",
                    "description": "<p>Gets a project by its ID.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 509,
                                "end": 518,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 503,
                                "end": 508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identifier of the project to get from the API</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 571,
                                "end": 578,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nList projects in given workspace.\n",
                    "description": "<p>List projects in given workspace.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates a project.\n",
                    "description": "<p>Updates a project.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1080,
                                "end": 1087,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "project"
                            },
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1074,
                                "end": 1079,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project object to update in the API</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1130,
                                "end": 1137,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { Service } from '@main/decorators/service.decorator';\nimport { map } from 'rxjs';\nimport { ApiService } from 'src/app/_main/services/api.service';\nimport { Project } from '../interfaces/project.interface';\n\n@Service()\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectService {\n  constructor(private apiService: ApiService) {}\n\n  /**\n   * Gets a project by its ID.\n   * @param projectId identifier of the project to get from the API\n   * @returns Request observable, which completes when request is finished\n   */\n  public get(projectId: number) {\n    return this.apiService.get(`/project/${projectId}`);\n  }\n\n  /**\n   * Deletes the project by its ID.\n   * @param projectId identifier of the project to delete from the API\n   * @returns Request observable, which completes when request is finished\n   */\n  public delete(projectId: number) {\n    return this.apiService.delete(`/project/${projectId}`);\n  }\n\n  /**\n   * Updates a project.\n   * @param project project object to update in the API\n   * @returns Request observable, which completes when request is finished\n   */\n  public update(project: Project) {\n    return this.apiService.put(`/project/${project.id}`, { body: project });\n  }\n\n  /**\n   * Creates a new project.\n   * @param project project to add\n   * @returns Request observable, which completes when request is finished\n   */\n  public create(project: { name: string; workspaceId: number }) {\n    return this.apiService.post('/project', { body: project });\n  }\n\n  /**\n   * Changes the workspace of the project.\n   * @param projectId project to move\n   * @param newWorkspaceId workspace where the project will be moved\n   * @returns Request observable, which completes when request is finished\n   */\n  public changeWorkspace(projectId: number, newWorkspaceId: number) {\n    return this.apiService.put(`/project/${projectId}/workspace/${newWorkspaceId}`);\n  }\n\n  /**\n   * List projects in given workspace.\n   */\n  public list() {\n    return this.apiService.get('/workspace').pipe(\n      map((workspaces) =>\n        workspaces.reduce((projects: any, workspace: Workspace) => {\n          projects.push(...workspace.projectsWithPrivileges.map((p) => p.project));\n          return projects;\n        }, []),\n      ),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RouterExtensionsService",
            "id": "injectable-RouterExtensionsService-96d2cd024a7faf870fa2312d6f5d071eb7d9e8152003e2ca06df2a7bb5918abb2b549b4c6e23c1bd14993fbce2dc1e866745080463c63a331fb4d833268f021f",
            "file": "src/app/_main/services/router-extensions.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RouterExtensionsService {\n  constructor(private router: Router) {}\n  public get snapshot() {\n    let node = (this.router.routerState.snapshot as any)._root;\n    while (node.children[0]) {\n      node = node.children[0];\n    }\n\n    return { params: node.value.params };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "snapshot": {
                    "name": "snapshot",
                    "getSignature": {
                        "name": "snapshot",
                        "type": "",
                        "returnType": "",
                        "line": 9
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "SessionsService",
            "id": "injectable-SessionsService-e77510f80c9b22e8ab5a547cef2dcadbdcf7abec4d74e114c8fab7b4c870d1d77aa4c2d9891cd0f01bec7aa5aebe537e72b4cabc5e2f29af0bd226521ab2ea77",
            "file": "src/app/settings/services/sessions.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserSession[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserSession } from 'src/app/settings/interfaces/session.interface';\nimport { ApiService } from 'src/app/_main/services/api.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SessionsService {\n  constructor(private apiService: ApiService) {}\n\n  public list(): Observable<UserSession[]> {\n    return this.apiService.get(`/session`);\n  }\n\n  public delete(id: number) {\n    return this.apiService.delete(`/session/${id}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-be487fe1f70f86bf4b4881ce6d9b5719961415d7737562fb96c60a942ddb5a92416ca11a1a6246c588c336d55849e18bea12dd84128aa47ef5621aa19565416b",
            "file": "src/app/_main/services/snackbar.service.ts",
            "properties": [
                {
                    "name": "snackbars$",
                    "defaultValue": "new BehaviorSubject<Map<string, SnackbarData>>(new Map())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "uid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "\"gray\" | \"green\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'gray'"
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "4000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "\"gray\" | \"green\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'gray'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "4000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { SnackbarData } from '@main/components/snackbar/snackbar.interface';\nimport { Service } from '@main/decorators/service.decorator';\nimport { BehaviorSubject } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\n@Service()\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  constructor() {}\n\n  public snackbars$ = new BehaviorSubject<Map<string, SnackbarData>>(new Map());\n\n  public show(message: string, color: 'gray' | 'green' = 'gray', duration: number = 4000) {\n    const data = { message, duration, color };\n    const uid = uuid();\n\n    const map = this.snackbars$.value;\n    map.set(uid, data);\n\n    this.snackbars$.next(map);\n  }\n\n  public close(uid: string) {\n    const map = this.snackbars$.value;\n    map.delete(uid);\n  }\n\n  public closeAll() {\n    this.snackbars$.next(new Map());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "StatusService",
            "id": "injectable-StatusService-e63e65229a0cccc3abafa7eca300b9eca83cafa15e9f87c31b75583a4d57d95e611b483d883f93564fc4aa7ac1f1e9b94e88eec61253fe4589f0d67acb14c9a9",
            "file": "src/app/tasks/services/status.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "board",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[]>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Status>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates new status\n",
                    "description": "<p>Creates new status</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1230,
                                "end": 1239,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1224,
                                "end": 1229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to create status</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1194,
                                "end": 1200,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "status"
                            },
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1188,
                                "end": 1193,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Status to create</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1281,
                                "end": 1288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable with the created status</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes status\n",
                    "description": "<p>Deletes status</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1932,
                                "end": 1941,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1926,
                                "end": 1931,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to create status</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1893,
                                "end": 1899,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "status"
                            },
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1887,
                                "end": 1892,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Status id to delete</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1983,
                                "end": 1990,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "statusId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Status[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet status information\n",
                    "description": "<p>Get status information</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 900,
                                "end": 909,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 894,
                                "end": 899,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to get status</p>\n"
                        },
                        {
                            "name": {
                                "pos": 836,
                                "end": 844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "statusId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 830,
                                "end": 835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Status id needed to get status information</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 948,
                                "end": 955,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable with the status</p>\n"
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet list of statuses\n",
                    "description": "<p>Get list of statuses</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 538,
                                "end": 547,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 532,
                                "end": 537,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to create status</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 589,
                                "end": 596,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable with list of statuses</p>\n"
                        }
                    ]
                },
                {
                    "name": "listWithTasks",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StatusWithTasks[]>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Status>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates status\n",
                    "description": "<p>Updates status</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1574,
                                "end": 1583,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1568,
                                "end": 1573,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to create status</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1538,
                                "end": 1544,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "status"
                            },
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1532,
                                "end": 1537,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Status to update</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1625,
                                "end": 1632,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable with the updated status</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Task } from '@tasks/interfaces/task.interface';\nimport { combineLatest, map, Observable } from 'rxjs';\nimport { ApiService } from 'src/app/_main/services/api.service';\nimport { Status, StatusWithTasks } from '../interfaces/status.interface';\nimport { TaskService } from './task.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatusService {\n  constructor(private apiService: ApiService, private taskService: TaskService) {}\n\n  /**\n   * Get list of statuses\n   * @param projectId Project id needed to create status\n   * @returns Request observable with list of statuses\n   */\n  public list(projectId: number): Observable<(Status & { id: number })[]> {\n    return this.apiService.get(`/project/${projectId}/status/`);\n  }\n\n  /**\n   * Get status information\n   * @param statusId Status id needed to get status information\n   * @param projectId Project id needed to get status\n   * @returns Request observable with the status\n   */\n  public get(projectId: number, statusId: number): Observable<Status[]> {\n    return this.apiService.get(`/project/${projectId}/status/${statusId}`);\n  }\n\n  /**\n   * Creates new status\n   * @param status Status to create\n   * @param projectId Project id needed to create status\n   * @returns Request observable with the created status\n   */\n  public create(projectId: number, status: Status): Observable<Status> {\n    return this.apiService.post(`/project/${projectId}/status/`, { body: status });\n  }\n\n  /**\n   * Updates status\n   * @param status Status to update\n   * @param projectId Project id needed to create status\n   * @returns Request observable with the updated status\n   */\n  public update(projectId: number, status: Status): Observable<Status> {\n    return this.apiService.put(`/project/${projectId}/status/${status.id}`, { body: status });\n  }\n\n  /**\n   * Deletes status\n   * @param status Status id to delete\n   * @param projectId Project id needed to create status\n   * @returns Request observable\n   */\n  public delete(projectId: number, status: Status): Observable<null> {\n    return this.apiService.delete(`/project/${projectId}/status/${status.id}`);\n  }\n\n  public listWithTasks(projectId: number): Observable<StatusWithTasks[]> {\n    return combineLatest([this.list(projectId), this.taskService.list(projectId)]).pipe(\n      map(([statuses, tasks]) => {\n        statuses.forEach((status) => {\n          (status as StatusWithTasks).tasks = tasks.filter((task) => task.statusId === status.id);\n        });\n        return statuses as StatusWithTasks[];\n      }),\n    );\n  }\n\n  public board(projectId: number): Observable<[Task | string, StatusWithTasks[]][]> {\n    return combineLatest([this.list(projectId), this.taskService.list(projectId)]).pipe(\n      map(([statuses, tasks]) => {\n        const board: [Task | string, StatusWithTasks[]][] = [];\n        const OTHER = ['OTHER', statuses.map((s) => ({ ...s, tasks: [] }))] as [\n          string,\n          StatusWithTasks[],\n        ];\n\n        for (const task of tasks) {\n          if (task.subTasks?.length) {\n            const statusesWithSubtasks = statuses.map((status) => ({\n              ...status,\n              tasks: task.subTasks?.filter((subtask) => subtask.statusId === status.id) || [],\n            }));\n            board.push([task, statusesWithSubtasks]);\n          } else {\n            let status = OTHER[1].find((status) => status.id === task.statusId)!;\n            if (!status.tasks) {\n              status.tasks = [];\n            }\n            status.tasks.push(task);\n          }\n        }\n\n        board.push(OTHER);\n        return board;\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-7ca25f5a1b59889160e7ee84d935c050d78b446222bddd329b41ab609d5480f24095e594c54559b1ce6273772573716169055214c97b7e4c06a88ea567b69f03",
            "file": "src/app/tasks/services/task.service.ts",
            "properties": [
                {
                    "name": "lists",
                    "defaultValue": "new Map<Project['id'], ReplaySubject<Task[]>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "assign",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task>",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAssign task to specific user\n",
                    "description": "<p>Assign task to specific user</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8585,
                                "end": 8591,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "userId"
                            },
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8579,
                                "end": 8584,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>user to assign task to (if null, task will be unassigned)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8662,
                                "end": 8668,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "taskId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8656,
                                "end": 8661,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>task to assign</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8696,
                                "end": 8705,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8690,
                                "end": 8695,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project id needed to assign task</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 8745,
                                "end": 8752,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Updated task object</p>\n"
                        }
                    ]
                },
                {
                    "name": "changeStatus",
                    "args": [
                        {
                            "name": "statusId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task>",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChange status of specific task\n",
                    "description": "<p>Change status of specific task</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9049,
                                "end": 9057,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "statusId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9043,
                                "end": 9048,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>status to change task to</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9095,
                                "end": 9101,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "taskId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9089,
                                "end": 9094,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>task to change status of</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9139,
                                "end": 9148,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9133,
                                "end": 9138,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project id needed to change status</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 9190,
                                "end": 9197,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Updated task object</p>\n"
                        }
                    ]
                },
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskWithAdditionalData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates new task\n",
                    "description": "<p>Creates new task</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2432,
                                "end": 2441,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2426,
                                "end": 2431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to create task</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2400,
                                "end": 2404,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "task"
                            },
                            "type": "TaskWithAdditionalData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2394,
                                "end": 2399,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Task to create</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2481,
                                "end": 2488,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable with the created task</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes task\n",
                    "description": "<p>Deletes task</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4158,
                                "end": 4167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4152,
                                "end": 4157,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to delete task</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4121,
                                "end": 4127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "taskId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4115,
                                "end": 4120,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Task id to delete</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4207,
                                "end": 4214,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteWithConfirmation",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean | null>",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens dialog to delete specific task\n",
                    "description": "<p>Opens dialog to delete specific task</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4451,
                                "end": 4460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4445,
                                "end": 4450,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to delete task</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4506,
                                "end": 4510,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "task"
                            },
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4500,
                                "end": 4505,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Task to delete</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4532,
                                "end": 4539,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable with true if task was deleted, EMPTY otherwise (when user cancels the dialog)</p>\n"
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "filters",
                            "type": "Filter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task[]>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet list of tasks\n",
                    "description": "<p>Get list of tasks</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1782,
                                "end": 1791,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1776,
                                "end": 1781,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to list all tasks</p>\n"
                        },
                        {
                            "name": "filters",
                            "type": "Filter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1834,
                                "end": 1841,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable with list of tasks</p>\n"
                        }
                    ]
                },
                {
                    "name": "openCreateNewTaskDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens dialog to create new task\n",
                    "description": "<p>Opens dialog to create new task</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 6106,
                                "end": 6113,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>created task, EMPTY otherwise (when user cancels the dialog)</p>\n"
                        }
                    ]
                },
                {
                    "name": "openCreateSubtaskDialog",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentTask",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task | null>",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens dialog to create new subtask\n",
                    "description": "<p>Opens dialog to create new subtask</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6714,
                                "end": 6723,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6708,
                                "end": 6713,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to update subtask</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6772,
                                "end": 6782,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "parentTask"
                            },
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6766,
                                "end": 6771,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Parent task id to which attach subtask</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 6828,
                                "end": 6835,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>created subtask, EMPTY otherwise (when user cancels the dialog)</p>\n"
                        }
                    ]
                },
                {
                    "name": "openEditTaskDialog",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task | null>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens dialog to edit specific task\n",
                    "description": "<p>Opens dialog to edit specific task</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5351,
                                "end": 5360,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5345,
                                "end": 5350,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to update task</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5406,
                                "end": 5410,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "task"
                            },
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5400,
                                "end": 5405,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Task to update</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 5432,
                                "end": 5439,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable with updated task, EMPTY otherwise (when user cancels the dialog)</p>\n"
                        }
                    ]
                },
                {
                    "name": "schedule",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Schedule>",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerates schedule object for specific project\n",
                    "description": "<p>Generates schedule object for specific project</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7532,
                                "end": 7541,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7526,
                                "end": 7531,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id to generate schedule from</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7585,
                                "end": 7592,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Schedule object with all tasks</p>\n"
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "TaskWithAdditionalData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Task>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates task\n",
                    "description": "<p>Updates task</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3346,
                                "end": 3355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3340,
                                "end": 3345,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Project id needed to update task</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3314,
                                "end": 3318,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "task"
                            },
                            "type": "TaskWithAdditionalData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3308,
                                "end": 3313,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Task to update</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3395,
                                "end": 3402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable with the updated task</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ProjectMember } from '@dashboard/interfaces/project-member.interface';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { GitIntegrationService } from '@dashboard/services/git-integration.service';\nimport { MemberService } from '@dashboard/services/member.service';\nimport { ProjectService } from '@dashboard/services/project.service';\nimport { AlertDialogVariant } from '@main/dialogs/alert/alert.dialog';\nimport { Filter } from '@main/interfaces/filters.interface';\nimport { applyFilters } from '@main/operators/apply-filters.operator';\nimport { DialogOutlet, DialogService } from '@main/services/dialog.service';\nimport { SnackbarService } from '@main/services/snackbar.service';\nimport { TaskDialog, TaskDialogData, TaskDialogVariant } from '@tasks/dialogs/task/task.dialog';\nimport { Schedule } from '@tasks/interfaces/schedule.interface';\nimport * as dayjs from 'dayjs';\nimport {\n  combineLatest,\n  EMPTY,\n  map,\n  Observable,\n  of,\n  ReplaySubject,\n  switchMap,\n  take,\n  tap,\n} from 'rxjs';\nimport { ApiService } from '../../_main/services/api.service';\nimport { Task, TaskWithAdditionalData } from '../interfaces/task.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TaskService {\n  private lists = new Map<Project['id'], ReplaySubject<Task[]>>();\n\n  /**\n   * Default constructor with dependency injection.\n   * @param apiService ApiService\n   */\n  constructor(\n    private apiService: ApiService,\n    private gitIntegrationService: GitIntegrationService,\n    private dialogService: DialogService,\n    private projectService: ProjectService,\n    private memberService: MemberService,\n    private snackbarService: SnackbarService,\n  ) {}\n\n  /**\n   * Get list of tasks\n   * @param projectId Project id needed to list all tasks\n   * @returns Request observable with list of tasks\n   */\n  public list(projectId: number, filters?: Filter[]): Observable<Task[]> {\n    let subject: ReplaySubject<Task[]>;\n    if (this.lists.has(projectId)) {\n      subject = this.lists.get(projectId)!;\n    } else {\n      subject = new ReplaySubject<Task[]>();\n      this.lists.set(projectId, subject);\n      this.apiService.get(`/project/${projectId}/task`).subscribe((tasks) => {\n        subject.next(tasks);\n      });\n    }\n\n    return subject.pipe(applyFilters(filters));\n  }\n\n  /**\n   * Creates new task\n   * @param task Task to create\n   * @param projectId Project id needed to create task\n   * @returns Request observable with the created task\n   */\n  public create(projectId: number, task: TaskWithAdditionalData): Observable<Task> {\n    return this.apiService.post(`/project/${projectId}/task/`, { body: task }).pipe(\n      switchMap((newTask) => {\n        if (task.connectWithPullRequestOnGitHub) {\n          return this.gitIntegrationService.connectGitHubPull(projectId, newTask.id, task.pull);\n        } else return of(newTask);\n      }),\n      switchMap((newTask) => {\n        if (task.connectWithIssueOnGitHub && task.issue) {\n          return this.gitIntegrationService.connectGitHubIssue(projectId, newTask.id, task.issue);\n        } else return of(newTask);\n      }),\n      tap(() => {\n        this.snackbarService.show($localize`Task created successfully!`);\n      }),\n    );\n  }\n\n  /**\n   * Updates task\n   * @param task Task to update\n   * @param projectId Project id needed to update task\n   * @returns Request observable with the updated task\n   */\n  public update(projectId: number, task: TaskWithAdditionalData): Observable<Task> {\n    return this.apiService.put(`/project/${projectId}/task/${task.id}`, { body: task }).pipe(\n      switchMap((newTask) => {\n        if (task.connectWithPullRequestOnGitHub) {\n          return this.gitIntegrationService.connectGitHubPull(projectId, newTask.id, task.pull);\n        } else return of(newTask);\n      }),\n      switchMap((newTask) => {\n        if (task.connectWithIssueOnGitHub) {\n          return this.gitIntegrationService.connectGitHubIssue(projectId, newTask.id, task.issue);\n        } else return of(newTask);\n      }),\n    );\n  }\n\n  /**\n   * Deletes task\n   * @param taskId Task id to delete\n   * @param projectId Project id needed to delete task\n   * @returns Request observable\n   */\n  public delete(projectId: number, taskId: number): Observable<null> {\n    return this.apiService.delete(`/project/${projectId}/task/${taskId}`);\n  }\n\n  /**\n   * Opens dialog to delete specific task\n   * @param projectId Project id needed to delete task\n   * @param task Task to delete\n   * @returns Observable with true if task was deleted, EMPTY otherwise (when user cancels the dialog)\n   */\n  public deleteWithConfirmation(projectId: number, task: Task): Observable<boolean | null> {\n    return this.dialogService\n      .confirm({\n        title: $localize`Delete task \"${task.name}\"`,\n        message: $localize`Are you sure you want to delete this task \"${task.name}\"?`,\n        confirmText: $localize`Delete`,\n        cancelText: $localize`Cancel`,\n        variant: AlertDialogVariant.IMPORTANT,\n      })\n      .pipe(\n        switchMap((confirmed) => {\n          if (confirmed) {\n            return this.delete(projectId, task.id).pipe(switchMap(() => of(true)));\n          } else {\n            return EMPTY;\n          }\n        }),\n      );\n  }\n\n  /**\n   * Opens dialog to edit specific task\n   * @param projectId Project id needed to update task\n   * @param task Task to update\n   * @returns Observable with updated task, EMPTY otherwise (when user cancels the dialog)\n   */\n  public openEditTaskDialog(projectId: number, task: Task): Observable<Task | null> {\n    return this.dialogService\n      .open(TaskDialog, {\n        variant: TaskDialogVariant.EDIT,\n        projectId,\n        task,\n      })\n      .afterClosed()\n      .pipe(\n        tap((data) => {\n          console.log(data);\n        }),\n        switchMap((updatedTask: any) => {\n          if (updatedTask) {\n            return this.update(projectId, updatedTask);\n          } else {\n            return EMPTY;\n          }\n        }),\n      );\n  }\n\n  /**\n   * Opens dialog to create new task\n   * @returns created task, EMPTY otherwise (when user cancels the dialog)\n   */\n  public openCreateNewTaskDialog() {\n    return this.dialogService\n      .open(\n        TaskDialog,\n        {\n          variant: TaskDialogVariant.CREATE,\n        } as TaskDialogData,\n        DialogOutlet.CONTENT_RIGHT,\n      )\n      .afterClosed()\n      .pipe(\n        switchMap((task: TaskWithAdditionalData) => {\n          if (task) {\n            return this.create(task.projectId, task);\n          } else {\n            return EMPTY;\n          }\n        }),\n      );\n  }\n\n  /**\n   * Opens dialog to create new subtask\n   * @param projectId Project id needed to update subtask\n   * @param parentTask Parent task id to which attach subtask\n   * @returns created subtask, EMPTY otherwise (when user cancels the dialog)\n   */\n  public openCreateSubtaskDialog(projectId: number, parentTask: Task): Observable<Task | null> {\n    return this.dialogService\n      .open(TaskDialog, {\n        variant: TaskDialogVariant.CREATE,\n        projectId: projectId,\n        subtask: true,\n        task: {\n          parentTaskId: parentTask.id,\n        },\n      })\n      .afterClosed()\n      .pipe(\n        switchMap((newTask: any) => {\n          if (newTask) {\n            return this.create(projectId, newTask);\n          } else {\n            return EMPTY;\n          }\n        }),\n      );\n  }\n\n  /**\n   * Generates schedule object for specific project\n   * @param projectId Project id to generate schedule from\n   * @returns Schedule object with all tasks\n   */\n  public schedule(projectId: number): Observable<Schedule> {\n    return combineLatest([\n      this.list(projectId).pipe(take(1)),\n      this.memberService.list(projectId).pipe(take(1)),\n    ]).pipe(\n      map(([tasks, members]: [tasks: Task[], members: ProjectMember[]]) => {\n        const schedules = [];\n\n        for (const { user } of members) {\n          schedules.push({ user, tasks: new Map() });\n        }\n\n        for (const task of tasks) {\n          const schedule = schedules.find((s) => s.user.id === task.assigneeId);\n\n          if (!schedule) continue;\n\n          if (task.estimatedDate) {\n            schedule.tasks.set(dayjs(task.estimatedDate).format('YYYY-MM-DD'), task);\n          } else {\n            if (!schedule.tasks.has(null)) schedule.tasks.set(null, []);\n\n            schedule.tasks.get(null).push(task);\n          }\n        }\n\n        return schedules;\n      }),\n    );\n  }\n\n  /**\n   * Assign task to specific user\n   * @param userId user to assign task to (if null, task will be unassigned)\n   * @param taskId task to assign\n   * @param projectId project id needed to assign task\n   * @returns Updated task object\n   */\n  public assign(userId: number | null, taskId: number, projectId: number): Observable<Task> {\n    return this.apiService.put(`/project/${projectId}/task/${taskId}`, {\n      body: { assigneeId: userId },\n    });\n  }\n\n  /**\n   * Change status of specific task\n   * @param statusId status to change task to\n   * @param taskId task to change status of\n   * @param projectId project id needed to change status\n   * @returns Updated task object\n   */\n  public changeStatus(statusId: number, taskId: number, projectId: number): Observable<Task> {\n    return this.apiService.put(`/project/${projectId}/task/${taskId}`, {\n      body: { statusId },\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor with dependency injection.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "rawdescription": "\n\nDefault constructor with dependency injection.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1422,
                            "end": 1432,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "apiService"
                        },
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1416,
                            "end": 1421,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ApiService</p>\n"
                    },
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-96b16d2781779cf21dbb0b2028c95076fa93d794b7793b88e9e7f98b9c4046fdae2f19f7acb0818c011b4b8d19d2be31ae8301a4c2e91d608ae6dbf6c32b833e",
            "file": "src/app/auth/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMyself",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "modUser",
                            "type": "ModifyUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModifyUser>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "modUser",
                            "type": "ModifyUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModifyUser } from '@auth/interfaces/user.interface';\nimport { ApiService } from '@main/services/api.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private apiService: ApiService) {}\n\n  public update(modUser: ModifyUser): Observable<ModifyUser> {\n    return this.apiService.put(`/auth/edit`, { body: modUser });\n  }\n\n  public getMyself() {\n    return this.apiService.get(`/auth/me`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WorkspaceService",
            "id": "injectable-WorkspaceService-49cb48748e8dac15a2cf3d50908bfe486344fcf2a301edb9920048dac7073e7aca355ee11414e1ca6e6504aa097d4575b2d67def1cdd8106def45f48f1369836",
            "file": "src/app/dashboard/services/workspace.service.ts",
            "properties": [
                {
                    "name": "list$",
                    "defaultValue": "new Subject<Workspace[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Workspace>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new workspace.\n",
                    "description": "<p>Creates a new workspace.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1810,
                                "end": 1819,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "workspace"
                            },
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1804,
                                "end": 1809,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>workspace to modify</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1846,
                                "end": 1853,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes the workspace by its ID.\n",
                    "description": "<p>Deletes the workspace by its ID.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 947,
                                "end": 949,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 941,
                                "end": 946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identifier of the workspace to delete from the API</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1007,
                                "end": 1014,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Workspace>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets a workspace by its ID.\n",
                    "description": "<p>Gets a workspace by its ID.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 652,
                                "end": 654,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 646,
                                "end": 651,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>identifier of the workspace to get from the API</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 709,
                                "end": 716,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Workspace[]>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLists all available workspaces.\n",
                    "description": "<p>Lists all available workspaces.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1593,
                                "end": 1600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Workspace>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates a workspace.\n",
                    "description": "<p>Updates a workspace.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1264,
                                "end": 1273,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "workspace"
                            },
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1258,
                                "end": 1263,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>workspace object to update in the API</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1318,
                                "end": 1325,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Request observable, which completes when request is finished</p>\n"
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "identifier",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "ServiceValidator",
                            "stringifiedArguments": "{DELETE: undefined, GET: undefined}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "identifier",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Workspaces management service</p>\n",
            "rawdescription": "\n\nWorkspaces management service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ServiceValidator } from '@main/decorators/service-validator.decorator';\nimport { Observable, Subject } from 'rxjs';\nimport { ApiService } from 'src/app/_main/services/api.service';\nimport { Workspace } from '../interfaces/workspace.interface';\n\n/**\n * Workspaces management service\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WorkspaceService {\n  list$ = new Subject<Workspace[]>();\n\n  /**\n   * Default constructor with `ApiService` dependency.\n   * @param apiService Api service\n   */\n  constructor(private apiService: ApiService) {}\n\n  /**\n   * Gets a workspace by its ID.\n   * @param id identifier of the workspace to get from the API\n   * @returns Request observable, which completes when request is finished\n   */\n  public get(id: number): Observable<Workspace> {\n    return this.apiService.get(`/workspace/${id}`);\n  }\n\n  /**\n   * Deletes the workspace by its ID.\n   * @param id identifier of the workspace to delete from the API\n   * @returns Request observable, which completes when request is finished\n   */\n  public delete(id: number): Observable<null> {\n    return this.apiService.delete(`/workspace/${id}`).pipe(this.validate('DELETE'));\n  }\n\n  /**\n   * Updates a workspace.\n   * @param workspace workspace object to update in the API\n   * @returns Request observable, which completes when request is finished\n   */\n  public update(workspace: Workspace): Observable<Workspace> {\n    return this.apiService.put(`/workspace/${workspace.id}`, { body: workspace });\n  }\n\n  /**\n   * Lists all available workspaces.\n   * @returns Request observable, which completes when request is finished\n   */\n  public list(): Observable<Workspace[]> {\n    return this.apiService.get(`/workspace`);\n  }\n\n  /**\n   * Creates a new workspace.\n   * @param workspace workspace to modify\n   * @returns Request observable, which completes when request is finished\n   */\n  public create(workspace: Workspace): Observable<Workspace> {\n    return this.apiService.post(`/workspace`, { body: workspace });\n  }\n\n  @ServiceValidator({\n    DELETE: {\n      400: $localize`Workspace is not empty. Only empty workspaces can be deleted.`,\n    },\n    GET: {\n      404: $localize`Workspace with this ID does not exist.`,\n    },\n  })\n  private validate(identifier: string): any {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor with <code>ApiService</code> dependency.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiService",
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "rawdescription": "\n\nDefault constructor with `ApiService` dependency.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 522,
                            "end": 532,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "apiService"
                        },
                        "type": "ApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 516,
                            "end": 521,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Api service</p>\n"
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "LoggedInUsersGuard",
            "id": "injectable-LoggedInUsersGuard-b4216d1be903fabeb7a8a4a6322f4ebbb5bf39e4101d30a8638eac4b3ae48149920e0a991a13a9136a28a614bacbb80a72bf19574623d8d4265336eedd6a5de5",
            "file": "src/app/auth/guard/logged-in-users.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '@auth/services/auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LoggedInUsersGuard implements CanActivate {\n  constructor(private router: Router, private authService: AuthService) {}\n\n  canActivate() {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    } else {\n      this.router.navigate(['/auth/login']);\n      return false;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ErrorInterceptor",
            "id": "injectable-ErrorInterceptor-548f842639b051c74245d8f4a398d2931d2443c84992cc3de3ade9e4f863b9564e913be4276188c04dda75e82d3778099986cd9576fc07ba53b07e3d6f66935d",
            "file": "src/app/_main/interceptors/error.interceptor.ts",
            "properties": [
                {
                    "name": "unauthorizedInARow",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { DialogService } from '@main/services/dialog.service';\nimport { catchError, EMPTY, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private dialogService: DialogService, private router: Router) {}\n\n  private unauthorizedInARow = 0;\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError((e, obs) => {\n        if (e.status === 401) {\n          this.unauthorizedInARow++;\n\n          if (this.unauthorizedInARow > 1) return EMPTY;\n\n          this.dialogService.closeAll();\n\n          if (e.error.message == 'user deleted') {\n            localStorage.removeItem('logged');\n            this.router.navigate(['/auth/delete-account']);\n            return EMPTY;\n          }\n\n          if (localStorage.getItem('logged')) {\n            localStorage.removeItem('logged');\n            this.dialogService.openErrorDialog($localize`Your session has expired.`);\n          }\n\n          this.router.navigate(['/auth/login']);\n          return EMPTY;\n        }\n\n        return throwError(() => e);\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "DialogRef",
            "id": "class-DialogRef-45cee09cabadc8048811225e24ebdf6f5886752c07ddd4cd81461b9451443dc89c5b88e0edde2e94212d8ac2efe3f1b17061140083b9dfd6391608b5810cbc55",
            "file": "src/app/_main/classes/dialog-ref.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DialogPosition, MatDialogState } from '@angular/material/dialog';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\nexport class DialogRef<R = any> {\n  private afterOpened$ = new Subject<void>();\n\n  private beforeClosed$ = new Subject<R | undefined>();\n  private afterClosed$ = new Subject<R | undefined>();\n\n  private state$ = new BehaviorSubject<MatDialogState>(MatDialogState.CLOSED);\n\n  close(dialogResult?: R): void {\n    this.state$.next(MatDialogState.CLOSING);\n    this.beforeClosed$.next(dialogResult);\n    this.state$.next(MatDialogState.CLOSED);\n    this.afterClosed$.next(dialogResult);\n\n    this.afterClosed$.complete();\n    this.afterOpened$.complete();\n    this.beforeClosed$.complete();\n    this.state$.complete();\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    this.state$.next(MatDialogState.OPEN);\n    return this.afterOpened$;\n  }\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this.afterClosed$;\n  }\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this.beforeClosed$;\n  }\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    throw new Error(`method should not be called when using custom outlet`);\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    throw new Error('Method not implemented.');\n  }\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    throw new Error(`method not be called when using custom outlet`);\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width?: string, height?: string): this {\n    throw new Error(`method should not be called when using custom outlet`);\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): this {\n    throw new Error(`method should not be called when using custom outlet`);\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): this {\n    throw new Error(`method should not be called when using custom outlet`);\n  }\n  /** Gets the current state of the dialog's lifecycle. */\n  getState(): MatDialogState {\n    return this.state$.value;\n  }\n}\n",
            "properties": [
                {
                    "name": "afterClosed$",
                    "defaultValue": "new Subject<R | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "afterOpened$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "beforeClosed$",
                    "defaultValue": "new Subject<R | undefined>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "state$",
                    "defaultValue": "new BehaviorSubject<MatDialogState>(MatDialogState.CLOSED)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addPanelClass",
                    "args": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nAdd a CSS class or an array of classes to the overlay pane.",
                    "description": "<p>Add a CSS class or an array of classes to the overlay pane.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "afterClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog is finished closing.\n",
                    "description": "<p>Gets an observable that is notified when the dialog is finished closing.</p>\n"
                },
                {
                    "name": "afterOpened",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog is finished opening.\n",
                    "description": "<p>Gets an observable that is notified when the dialog is finished opening.</p>\n"
                },
                {
                    "name": "backdropClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MouseEvent>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that emits when the overlay's backdrop has been clicked.\n",
                    "description": "<p>Gets an observable that emits when the overlay&#39;s backdrop has been clicked.</p>\n"
                },
                {
                    "name": "beforeClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<R | undefined>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that is notified when the dialog has started closing.\n",
                    "description": "<p>Gets an observable that is notified when the dialog has started closing.</p>\n"
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "dialogResult",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dialogResult",
                            "type": "R",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getState",
                    "args": [],
                    "optional": false,
                    "returnType": "MatDialogState",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGets the current state of the dialog's lifecycle.",
                    "description": "<p>Gets the current state of the dialog&#39;s lifecycle.</p>\n"
                },
                {
                    "name": "keydownEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<KeyboardEvent>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets an observable that emits when keydown events are targeted on the overlay.\n",
                    "description": "<p>Gets an observable that emits when keydown events are targeted on the overlay.</p>\n"
                },
                {
                    "name": "removePanelClass",
                    "args": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRemove a CSS class or an array of classes from the overlay pane.",
                    "description": "<p>Remove a CSS class or an array of classes from the overlay pane.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "classes",
                            "type": "string | string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePosition",
                    "args": [
                        {
                            "name": "position",
                            "type": "DialogPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the dialog's position.\n",
                    "description": "<p>Updates the dialog&#39;s position.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1767,
                                "end": 1775,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "DialogPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1761,
                                "end": 1766,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>New dialog position.</p>\n"
                        }
                    ]
                },
                {
                    "name": "updateSize",
                    "args": [
                        {
                            "name": "width",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "height",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the dialog's width and height.\n",
                    "description": "<p>Updates the dialog&#39;s width and height.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1991,
                                "end": 1996,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "width"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1985,
                                "end": 1990,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>New width of the dialog.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2034,
                                "end": 2040,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "height"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2028,
                                "end": 2033,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>New height of the dialog.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Enum",
            "id": "class-Enum-b2b4b9d82cf4a54a7377d485428f4efde059efe53736bcf2ea728ce992cf7a4195476d86a823d566a0548e05dac79671cce272b38e0930569935d3b204cf4bb6",
            "file": "src/app/_main/classes/enum.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Enum {\n  /**\n   * Tests if the given enum is numeric - contains at leas one number as value.\n   * @param enumType enum to test\n   * @returns true or false based on whether enum has numeric values\n   */\n  public static isNumeric(enumType: any): boolean {\n    for (const key of Object.keys(enumType)) {\n      if (Number(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Function to get enum keys.\n   * @param enumType enum to get keys from\n   * @example\n   * enum TestEnum {\n   *   One = 1,\n   *   Two = 2,\n   *   Three = 3,\n   * }\n   * Enum.keys(TestEnum) // ['One', 'Two', 'Three']\n   * @returns array of enum keys\n   */\n  public static keys(enumType: any): string[] {\n    return Object.keys(enumType).filter((k) => !Number(k) && k != '0');\n  }\n\n  /**\n   * Function to get enum values.\n   * @param enumType enum to get values from\n   * @example\n   * enum TestEnum {\n   *   One = 1,\n   *   Two = 2,\n   *   Three = 3,\n   * }\n   * Enum.values(TestEnum) // [1, 2, 3]\n   * @returns array of enum values\n   */\n  public static values(enumType: any): any[] {\n    if (!Enum.isNumeric(enumType)) {\n      return Object.values(enumType);\n    }\n\n    return Object.values(enumType)\n      .filter((v) => Number(v) || v === '0')\n      .map((v) => Number(v));\n  }\n\n  /**\n   * Function to get enum value by key.\n   * @param enumType enum to get entries from\n   * @example\n   * enum TestEnum {\n   *   One = 1,\n   *   Two = 2,\n   *   Three = 3,\n   * }\n   * Enum.entries(TestEnum) // [['One', 1], ['Two', 2], ['Three', 3]]\n   * @returns array of enum entries\n   */\n  public static entries(enumType: any): [string, any][] {\n    if (!Enum.isNumeric(enumType)) {\n      return Object.entries(enumType);\n    }\n\n    return Object.entries(enumType)\n      .filter((e) => Number(e[1]) || e[1] === '0' || e[1] === 0)\n      .map((e) => [e[0], Number(e[1])]);\n  }\n}\n",
            "properties": [],
            "description": "<p>Utility enum functions for typescript</p>\n",
            "rawdescription": "\n\nUtility enum functions for typescript\n",
            "methods": [
                {
                    "name": "entries",
                    "args": [
                        {
                            "name": "enumType",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction to get enum value by key.\n```html\nenum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.entries(TestEnum) // [['One', 1], ['Two', 2], ['Three', 3]]\n```",
                    "description": "<p>Function to get enum value by key.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">enum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.entries(TestEnum) // [[&#39;One&#39;, 1], [&#39;Two&#39;, 2], [&#39;Three&#39;, 3]]</code></pre></div>",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1396,
                                "end": 1404,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "enumType"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1390,
                                "end": 1395,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>enum to get entries from</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1436,
                                "end": 1443,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>enum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.entries(TestEnum) // [[&#39;One&#39;, 1], [&#39;Two&#39;, 2], [&#39;Three&#39;, 3]]</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1598,
                                "end": 1605,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>array of enum entries</p>\n"
                        }
                    ]
                },
                {
                    "name": "isNumeric",
                    "args": [
                        {
                            "name": "enumType",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if the given enum is numeric - contains at leas one number as value.\n",
                    "description": "<p>Tests if the given enum is numeric - contains at leas one number as value.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 167,
                                "end": 175,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "enumType"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 161,
                                "end": 166,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>enum to test</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 195,
                                "end": 202,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true or false based on whether enum has numeric values</p>\n"
                        }
                    ]
                },
                {
                    "name": "keys",
                    "args": [
                        {
                            "name": "enumType",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction to get enum keys.\n```html\nenum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.keys(TestEnum) // ['One', 'Two', 'Three']\n```",
                    "description": "<p>Function to get enum keys.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">enum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.keys(TestEnum) // [&#39;One&#39;, &#39;Two&#39;, &#39;Three&#39;]</code></pre></div>",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 497,
                                "end": 505,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "enumType"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 491,
                                "end": 496,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>enum to get keys from</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 534,
                                "end": 541,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>enum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.keys(TestEnum) // [&#39;One&#39;, &#39;Two&#39;, &#39;Three&#39;]</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 678,
                                "end": 685,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>array of enum keys</p>\n"
                        }
                    ]
                },
                {
                    "name": "values",
                    "args": [
                        {
                            "name": "enumType",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction to get enum values.\n```html\nenum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.values(TestEnum) // [1, 2, 3]\n```",
                    "description": "<p>Function to get enum values.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">enum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.values(TestEnum) // [1, 2, 3]</code></pre></div>",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 888,
                                "end": 896,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "enumType"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 882,
                                "end": 887,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>enum to get values from</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 927,
                                "end": 934,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>enum TestEnum {\n  One = 1,\n  Two = 2,\n  Three = 3,\n}\nEnum.values(TestEnum) // [1, 2, 3]</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1059,
                                "end": 1066,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>array of enum values</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ESet",
            "id": "class-ESet-79bd04d4871aeff90979ba8b95ae1fe81bc080d10a2dc6471e7f920f010c6a78050218aaa26f9eb275d731208b290fb09431b9104dc8a1d3b1d2320adf02707a",
            "file": "src/app/_main/classes/e-set.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ESet<T = any> extends Set<T> {\n  toggle(key: any) {\n    if (this.has(key)) {\n      this.delete(key);\n    } else {\n      this.add(key);\n    }\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Set",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Filters",
            "id": "class-Filters-bb2363c73762d66067482e33418ecdc5220faba6f4ba6d648cf877e717e0a232bc0acbaff9564216b7ec83a70b94bd55558f8412a89ff1c91be8bf71d0115bb1",
            "file": "src/app/_main/classes/filters.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FilterCheckbox } from '@main/interfaces/filters.interface';\nimport { Task } from '@tasks/interfaces/task.interface';\n\nexport class Filters {\n  public static ONLY_MY_TASKS(currentUserId: string): FilterCheckbox<any> {\n    return {\n      type: 'checkbox',\n      label: $localize`Only my tasks`,\n      options: {\n        1: { assigneeId: currentUserId },\n        0: {},\n      },\n      value: 0,\n      apply(tasks: Task[], option: { assigneeId?: string }) {\n        return tasks.filter((task) => task.assigneeId === option.assigneeId);\n      },\n    };\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "ONLY_MY_TASKS",
                    "args": [
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FilterCheckbox<any>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentUserId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MonacoExtended",
            "id": "class-MonacoExtended-2aadaa6e5fce1034d6e609e9227d003a9c6f6c4b01616c91bab8b034226a12a53339f58c17559af2defcebd737b30d2d618324205a9ea5b54c58253e8cc89a15",
            "file": "src/app/_main/classes/monaco-extended.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as monaco from 'monaco-editor';\n\ntype MonacoEditor = monaco.editor.IStandaloneCodeEditor;\ntype Selection = monaco.Selection;\ntype Range = monaco.IRange;\ntype EndOfLinePreference = monaco.editor.EndOfLinePreference;\n\nexport class MonacoExtended {\n  public static insertTextAt(\n    editor: MonacoEditor,\n    lineNumber: number,\n    column: number,\n    text: string,\n  ) {\n    editor.executeEdits('', [\n      {\n        range: {\n          startLineNumber: lineNumber,\n          startColumn: column,\n          endLineNumber: lineNumber,\n          endColumn: column,\n        },\n        text,\n      },\n    ]);\n  }\n\n  public static removeTextAt(\n    editor: MonacoEditor,\n    startLineNumber: number,\n    startColumn: number,\n    endLineNumber: number,\n    endColumn: number,\n  ) {\n    editor.executeEdits('', [\n      {\n        range: {\n          startLineNumber,\n          startColumn,\n          endLineNumber,\n          endColumn,\n        },\n        text: null,\n      },\n    ]);\n  }\n\n  public static insertTextBeforeSelection(\n    editor: MonacoEditor,\n    selection: Selection,\n    text: string,\n  ) {\n    MonacoExtended.insertTextAt(editor, selection.startLineNumber, selection.startColumn, text);\n  }\n\n  public static insertTextAfterSelection(editor: MonacoEditor, selection: Selection, text: string) {\n    MonacoExtended.insertTextAt(editor, selection.endLineNumber, selection.endColumn, text);\n  }\n\n  public static insertTextBeforeAndAfterEachSelection(\n    editor: MonacoEditor,\n    selections: Selection[],\n    beforeSelectionText: string,\n    afterSelectionText: string = '',\n  ) {\n    const edits = ([] as any[]).concat(\n      ...selections.map((selection) => {\n        return [\n          {\n            range: {\n              startLineNumber: selection.startLineNumber,\n              startColumn: selection.startColumn,\n              endLineNumber: selection.startLineNumber,\n              endColumn: selection.startColumn,\n            },\n            text: beforeSelectionText,\n          },\n          {\n            range: {\n              startLineNumber: selection.endLineNumber,\n              startColumn: selection.endColumn,\n              endLineNumber: selection.endLineNumber,\n              endColumn: selection.endColumn,\n            },\n            text: afterSelectionText,\n          },\n        ];\n      }),\n    );\n\n    editor.executeEdits('', edits);\n  }\n\n  public static removeTextBeforeAndAfterEachSelection(\n    editor: MonacoEditor,\n    selections: Selection[],\n    beforeSelectionText: string,\n    afterSelectionText: string = '',\n  ) {\n    const model = editor.getModel();\n    const afterSelectionTextLinesCount = (afterSelectionText.match(/\\n/g) || [])?.length;\n    const edits: any[] = [];\n\n    if (!model) return;\n\n    for (const selection of selections) {\n      if (\n        MonacoExtended.selectionStartWith(editor, selection, beforeSelectionText) &&\n        MonacoExtended.selectionEndsWith(editor, selection, afterSelectionText)\n      ) {\n        edits.push({\n          range: {\n            startLineNumber: selection.startLineNumber,\n            startColumn: selection.startColumn,\n            endLineNumber:\n              selection.startLineNumber + (beforeSelectionText.match(/\\n/g) || [])?.length,\n            endColumn: beforeSelectionText.replace(/.*\\n/g, '').length + 1,\n          },\n          text: '',\n        });\n        edits.push({\n          range: {\n            startLineNumber: selection.endLineNumber - afterSelectionTextLinesCount,\n            startColumn:\n              model.getLineContent(selection.endLineNumber - afterSelectionTextLinesCount).length -\n              (afterSelectionText.replace(/\\n[^]*$/g, '').length - 1),\n            endLineNumber: selection.endLineNumber,\n            endColumn: selection.endColumn,\n          },\n          text: '',\n        });\n      }\n    }\n\n    editor.executeEdits('', edits);\n  }\n\n  public static selectionStartWith(editor: MonacoEditor, selection: Selection, text: string) {\n    const selectedValue = editor\n      .getModel()\n      ?.getValueInRange(selection, monaco.editor.EndOfLinePreference.LF);\n    return selectedValue?.startsWith(text);\n  }\n\n  public static selectionEndsWith(editor: MonacoEditor, selection: Selection, text: string) {\n    const selectedValue = editor\n      .getModel()\n      ?.getValueInRange(selection, monaco.editor.EndOfLinePreference.LF);\n    return selectedValue?.endsWith(text);\n  }\n\n  public static toggleEndAndStartOfEachSelection(\n    editor: MonacoEditor,\n    beforeSelectionText: string,\n    afterSelectionText: string = '',\n  ) {\n    const selections = editor.getSelections();\n    if (!selections) return;\n\n    const shouldDelete = selections.some(\n      (selection) =>\n        MonacoExtended.selectionStartWith(editor, selection, beforeSelectionText) &&\n        MonacoExtended.selectionEndsWith(editor, selection, afterSelectionText),\n    );\n\n    const mode: 'delete' | 'add' = shouldDelete ? 'delete' : 'add';\n\n    if (mode === 'delete') {\n      MonacoExtended.removeTextBeforeAndAfterEachSelection(\n        editor,\n        selections,\n        beforeSelectionText,\n        afterSelectionText,\n      );\n    } else {\n      MonacoExtended.insertTextBeforeAndAfterEachSelection(\n        editor,\n        selections,\n        beforeSelectionText,\n        afterSelectionText,\n      );\n    }\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "insertTextAfterSelection",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertTextAt",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lineNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lineNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertTextBeforeAndAfterEachSelection",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selections",
                            "type": "Selection[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selections",
                            "type": "Selection[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertTextBeforeSelection",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTextAt",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startLineNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startColumn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endLineNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endColumn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startLineNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "startColumn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endLineNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endColumn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTextBeforeAndAfterEachSelection",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selections",
                            "type": "Selection[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selections",
                            "type": "Selection[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectionEndsWith",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectionStartWith",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selection",
                            "type": "Selection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleEndAndStartOfEachSelection",
                    "args": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "MonacoEditor",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PersistentMap",
            "id": "class-PersistentMap-e9304fd2d5e73a56daa7559536506512d8ec2ca3613c2e21a9bb809a245813aaa7fefd9aedd4c3688b9bc9bd6dae4bc98c34f28459d8a31160196002d49972df",
            "file": "src/app/_main/classes/persistent-map.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface PersistentMapOptions {\n  persistentKey: string;\n}\n\nexport class PersistentMap<K, V> extends Map<K, V> {\n  override clear(): void {\n    localStorage.removeItem(this._persistentKey);\n    super.clear();\n  }\n\n  override delete(key: K): boolean {\n    const temp = super.delete(key);\n    this.saveState();\n    return temp;\n  }\n\n  override set(key: K, value: V): this {\n    const temp = super.set(key, value);\n    this.saveState();\n    return temp;\n  }\n\n  private saveState() {\n    localStorage.setItem(this._persistentKey, JSON.stringify([...this.entries()]));\n  }\n\n  private _persistentKey = '';\n\n  constructor(\n    { persistentKey }: PersistentMapOptions,\n    entries?: readonly (readonly [K, V])[] | null,\n  ) {\n    super(\n      persistentKey && localStorage.getItem(persistentKey)\n        ? JSON.parse(localStorage.getItem(persistentKey)!)\n        : entries,\n    );\n\n    if (!persistentKey) {\n      console.error('PersistentMap need persistentKey option');\n      return;\n    }\n\n    this._persistentKey = persistentKey;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "PersistentMapOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "entries",
                        "type": " | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "type": "PersistentMapOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "entries",
                        "type": " | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_persistentKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "V",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "V",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Map",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Random",
            "id": "class-Random-784dcc4f2121531d125081e0276ed019e78e1642f4f151f7839536bb315faed52814dc2be8328410b8df28c02c2fd09e87f152207192231e58d996aa39ab5d54",
            "file": "src/app/_main/classes/random.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Random {\n  private m_w = 123456789;\n  private m_z = 987654321;\n  private mask = 0xffffffff;\n\n  /**\n   * Random number generation class with optional seed\n   * @param seed the seed to use in random number generation\n   */\n  constructor(seed: number = new Date().getTime()) {\n    this.m_w = (123456789 + seed) & this.mask;\n    this.m_z = (987654321 - seed) & this.mask;\n  }\n\n  // Returns number between 0 (inclusive) and 1.0 (exclusive),\n  // just like Math.random().\n  public random() {\n    this.m_z = (36969 * (this.m_z & 65535) + (this.m_z >> 16)) & this.mask;\n    this.m_w = (18000 * (this.m_w & 65535) + (this.m_w >> 16)) & this.mask;\n    let result = ((this.m_z << 16) + (this.m_w & 65535)) >>> 0;\n    result /= 4294967296;\n    return result;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Random number generation class with optional seed</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "seed",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Date().getTime()"
                    }
                ],
                "line": 4,
                "rawdescription": "\n\nRandom number generation class with optional seed\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 179,
                            "end": 183,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "seed"
                        },
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Date().getTime()",
                        "tagName": {
                            "pos": 173,
                            "end": 178,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>the seed to use in random number generation</p>\n"
                    }
                ]
            },
            "properties": [
                {
                    "name": "m_w",
                    "defaultValue": "123456789",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "m_z",
                    "defaultValue": "987654321",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mask",
                    "defaultValue": "0xffffffff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "random",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TestNgControl",
            "id": "class-TestNgControl-13a0d74fbb41bd06d6bd3e62cf07fc0a5dc516eeba6179394df124830ebcf445a89e856acc7fc4ef01ad7c690a35c99048c472c954c31d212451cc8c6996e9b6",
            "file": "src/tests/helpers/ng-control-testing-provider.helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, FormControl, NgControl } from '@angular/forms';\n\nexport class TestNgControl extends NgControl {\n  private _control = new FormControl('');\n  viewToModelUpdate(newValue: any): void {\n    this._control = newValue;\n  }\n  get control(): AbstractControl | null {\n    return this._control;\n  }\n}\n",
            "properties": [
                {
                    "name": "_control",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "viewToModelUpdate",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "NgControl",
            "accessors": {
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "AbstractControl | null",
                        "line": 8
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserUtils",
            "id": "class-UserUtils-54cb87eeceb3e562c1ea2d62f6607799b3b41c3b3e9cd25c67407e0f8672a01ced7e7f3d3ccb40987fc250b58a010310376cfcc599272cc698d2d73eb74ca44d",
            "file": "src/app/dashboard/classes/user.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Random } from '@main/classes/random.class';\nimport * as Color from 'color';\n\nexport class UserUtils {\n  public static getColorById(id: number): Color {\n    const random = new Random(id);\n    const randomNumber = random.random();\n    const hue = randomNumber * 255;\n    return Color.hsl(hue, 95, 41);\n  }\n\n  /**\n   * @unsupported\n   */\n  public static getColorByUsername(username: string): Color {\n    let numberRepresentation = username\n      .split('')\n      .map((c) => c.charCodeAt(0))\n      .reduce((sum, n) => sum * 10 ** 6 + n, 0);\n\n    // This requires some tweaks to make the number smaller.\n    numberRepresentation = numberRepresentation / 10000000;\n\n    const random = new Random(numberRepresentation);\n    const randomNumber = random.random();\n    const hue = randomNumber * 255;\n    return Color.hsl(hue, 95, 41);\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getColorById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColorByUsername",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Color",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Utils",
            "id": "class-Utils-00d8a8068a1f46d4aeaa9aaa6135af724997b857eb2a93bbf7a3b576d8b7d85c320937c500c2101418ef92eaed663d1b56e0796b55cd4f7b446f39b2037b0a13",
            "file": "src/app/_main/classes/utils.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Utils {\n  /**\n   * Function to find first occurrence of regex in string\n   * @param string String to search in\n   * @param regex Regex to search for\n   * @param startPos Optional starting position in the string\n   * @returns The index of the first match\n   */\n  public static regexIndexOf(string: string, regex: RegExp, startPos: number = 0) {\n    var indexOf = string.substring(startPos).search(regex);\n    return indexOf >= 0 ? indexOf + startPos : indexOf;\n  }\n\n  /**\n   * Converts string from camelCase and PascalCase to snake_case\n   * @param inputString String to convert\n   * @returns string in snake_case\n   */\n  public static snakeCase(inputString: string) {\n    return inputString\n      .split('')\n      .map((character, index) => {\n        if (Utils.isLetter(character) && character == character.toUpperCase()) {\n          if (index > 0) {\n            return '_' + character.toLowerCase();\n          } else {\n            return character.toLowerCase();\n          }\n        } else {\n          return character;\n        }\n      })\n      .join('');\n  }\n\n  /**\n   * Check if object has all the properties from array\n   * @param object Object to check\n   * @param keys keys to search for\n   * @returns true if object has all of the specified properties, false otherwise.\n   */\n  public static has(object: any, keys: string[]) {\n    for (const key of keys) {\n      if (!object.hasOwnProperty(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Checks if passed character is a letter\n   * @param char Character to check\n   * @returns\n   */\n  public static isLetter(char: String) {\n    if (char.length > 1) return false;\n    return (char >= 'A' && char <= 'Z') || (char >= 'a' && char <= 'z');\n  }\n}\n",
            "properties": [],
            "description": "<p>Utilities class with some useful methods not available in any libraries.</p>\n",
            "rawdescription": "\n\nUtilities class with some useful methods not available in any libraries.\n",
            "methods": [
                {
                    "name": "has",
                    "args": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "keys",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if object has all the properties from array\n",
                    "description": "<p>Check if object has all the properties from array</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1232,
                                "end": 1238,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 147,
                                "escapedText": "object"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1226,
                                "end": 1231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Object to check</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1267,
                                "end": 1271,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "keys"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1261,
                                "end": 1266,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>keys to search for</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1297,
                                "end": 1304,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>true if object has all of the specified properties, false otherwise.</p>\n"
                        }
                    ]
                },
                {
                    "name": "isLetter",
                    "args": [
                        {
                            "name": "char",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks if passed character is a letter\n",
                    "description": "<p>Checks if passed character is a letter</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1622,
                                "end": 1626,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "char"
                            },
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1616,
                                "end": 1621,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Character to check</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1652,
                                "end": 1659,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "regexIndexOf",
                    "args": [
                        {
                            "name": "string",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "regex",
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "startPos",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFunction to find first occurrence of regex in string\n",
                    "description": "<p>Function to find first occurrence of regex in string</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 181,
                                "end": 187,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 149,
                                "escapedText": "string"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 175,
                                "end": 180,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>String to search in</p>\n"
                        },
                        {
                            "name": {
                                "pos": 220,
                                "end": 225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "regex"
                            },
                            "type": "RegExp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 214,
                                "end": 219,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Regex to search for</p>\n"
                        },
                        {
                            "name": {
                                "pos": 258,
                                "end": 266,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "startPos"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "pos": 252,
                                "end": 257,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional starting position in the string</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 314,
                                "end": 321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>The index of the first match</p>\n"
                        }
                    ]
                },
                {
                    "name": "snakeCase",
                    "args": [
                        {
                            "name": "inputString",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts string from camelCase and PascalCase to snake_case\n",
                    "description": "<p>Converts string from camelCase and PascalCase to snake_case</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 645,
                                "end": 656,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "inputString"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 639,
                                "end": 644,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>String to convert</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 681,
                                "end": 688,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string in snake_case</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickStopPropagationDirective",
            "id": "directive-ClickStopPropagationDirective-ddc1d43f6a5b21c929b38cfb7537bf0ff6289e8593487d85d87831138e5c99f1f265e581b7ef0e6e059f1a148630c3dea495f2ae3c65d00682d55998e8f3abb2",
            "file": "src/app/_main/directives/click-stop-propagation.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[click-stop-propagation]',\n})\nexport class ClickStopPropagationDirective {\n  @HostListener('click', ['$event'])\n  public onClick(event: any): void {\n    event.stopPropagation();\n\n    window.document.dispatchEvent(\n      new Event('click', {\n        bubbles: true,\n        cancelable: true,\n      }),\n    );\n  }\n}\n",
            "selector": "[click-stop-propagation]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "FocusInitialDirective",
            "id": "directive-FocusInitialDirective-feb498330e79a64654fda2c4cf92a23146803a354a64533c918b63d11d719d108550b6d6a7930b71f7840fd03eb4e9835d4fb9a7d226fee3b1d06a4da6dc7012",
            "file": "src/app/_main/directives/focus-initial.directive.ts",
            "type": "directive",
            "description": "<p>Directive to focus on the first input element on the page</p>\n",
            "rawdescription": "\n\nDirective to focus on the first input element on the page\n",
            "sourceCode": "import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n/**\n * Directive to focus on the first input element on the page\n */\n@Directive({\n  selector: '[appFocusInitial]',\n})\nexport class FocusInitialDirective implements AfterViewInit {\n  /**\n   * Default constructor of the directive.\n   * @param el Reference to attached element\n   */\n  constructor(private el: ElementRef) {}\n\n  /**\n   * Lifecycle hook to initialize the directive.\n   */\n  ngAfterViewInit(): void {\n    this.el.nativeElement.__ngContext__[33].focus();\n  }\n}\n",
            "selector": "[appFocusInitial]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLifecycle hook to initialize the directive.\n",
                    "description": "<p>Lifecycle hook to initialize the directive.</p>\n"
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor of the directive.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "rawdescription": "\n\nDefault constructor of the directive.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 312,
                            "end": 314,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "el"
                        },
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 306,
                            "end": 311,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Reference to attached element</p>\n"
                    }
                ]
            }
        },
        {
            "name": "LetDirective",
            "id": "directive-LetDirective-dad31174d6b77242ec85fb1e9550d94920d2e30aa138dc8a792333c22f3cfc3aa05987eca68352b2579e857fc52e9e4254bd87e687541fcf701ecb567c9ddf39",
            "file": "src/app/_main/directives/let.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\ninterface LetContext<T> {\n  ngLet: T;\n}\n\n@Directive({\n  selector: '[ngLet]',\n})\nexport class LetDirective<T> {\n  private _context: LetContext<T | null> = { ngLet: null };\n\n  constructor(_viewContainer: ViewContainerRef, _templateRef: TemplateRef<LetContext<T>>) {\n    _viewContainer.createEmbeddedView(_templateRef, this._context);\n  }\n\n  @Input()\n  set ngLet(value: T) {\n    this._context.ngLet = value;\n  }\n}\n",
            "selector": "[ngLet]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "ngLet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "T",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_context",
                    "defaultValue": "{ ngLet: null }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LetContext<T | null>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<LetContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "_viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_templateRef",
                        "type": "TemplateRef<LetContext<T>>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "ngLet": {
                    "name": "ngLet",
                    "setSignature": {
                        "name": "ngLet",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "T",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ViewContainerDirective",
            "id": "directive-ViewContainerDirective-225bcb7b95e8a355acb86f806f90e51e28e3d264438a1368b08ee2384c363ef49b6a5c00273e566daffcb33e0ae49cd0d897f123b9d4a6a4109a0fb710e96d59",
            "file": "src/app/_main/directives/view-container.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[view-container]',\n})\nexport class ViewContainerDirective {\n  constructor(public viewContainerRef: ViewContainerRef) {}\n}\n",
            "selector": "[view-container]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AddMemberDialog",
            "id": "component-AddMemberDialog-afaf27edb57d85a1a8be8e5ad6f2e41c509fc8732ed2208e15adfeb8768991839eb8db9402e0ba29d38c7e7661cb606db688aba7377ee6b576bf9bfab178a708",
            "file": "src/app/dashboard/dialogs/add-member/add-member.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-member-dialog",
            "styleUrls": [
                "./add-member.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-member.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddMemberDialogData",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [requiredValidator()]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Status[]>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace[]>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMembers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadParamsFromUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { RouterExtensionsService } from '@main/services/router-extensions.service';\nimport { Status } from '@tasks/interfaces/status.interface';\nimport { Observable } from 'rxjs';\nimport { requiredValidator } from '../../../_main/validators/required.validator';\n\nexport interface AddMemberDialogData {\n  workspaceId: number;\n  projectId?: number;\n}\n\n@Component({\n  selector: 'app-add-member-dialog',\n  templateUrl: './add-member.dialog.html',\n  styleUrls: ['./add-member.dialog.scss'],\n})\nexport class AddMemberDialog implements OnInit {\n  public statusList$!: Observable<Status[]>;\n  public workspaceList$!: Observable<Workspace[]>;\n\n  public form = new FormGroup({\n    email: new FormControl('', [requiredValidator()]),\n  });\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: AddMemberDialogData,\n    private dialogRef: MatDialogRef<AddMemberDialog>,\n    private routerExtensions: RouterExtensionsService,\n  ) {}\n\n  ngOnInit() {\n    this.loadParamsFromUrl();\n\n    const { workspaceId, projectId } = this.data;\n    this.form.patchValue({ workspaceId, projectId });\n  }\n\n  loadParamsFromUrl() {\n    const { workspaceId, projectId } = this.routerExtensions.snapshot.params;\n    this.data.workspaceId = this.data.workspaceId || Number(workspaceId);\n    this.data.projectId = this.data.projectId || Number(projectId);\n  }\n\n  addMembers() {\n    const formValues = this.form.value;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.invalid) return;\n\n    this.dialogRef.close([formValues.email]);\n  }\n\n  cancel() {\n    this.dialogRef.close(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n  padding-top: 10px;\r\n\r\n  > * {\r\n    width: 100%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./add-member.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "AddMemberDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMemberDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerExtensions",
                        "type": "RouterExtensionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "AddMemberDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMemberDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerExtensions",
                        "type": "RouterExtensionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title i18n>Add members</h1>\r\n<div mat-dialog-content>\r\n  <form (submit)=\"addMembers()\" [formGroup]=\"form\" autocomplete=\"off\">\r\n\r\n    <!-- Name field -->\r\n    <app-input floatingLabel=\"Email or Username\" placeholder=\"name@example.com\" formControlName=\"email\" i18n-floatingLabel i18n-placeholder>\r\n    </app-input>\r\n\r\n  </form>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <app-button mat-button (click)=\"cancel()\" i18n>Cancel</app-button>\r\n  <app-button (click)=\"addMembers()\" variant=\"primary\" i18n>Add</app-button>\r\n</div>\r\n"
        },
        {
            "name": "AlertDialog",
            "id": "component-AlertDialog-1e9dca51168e9c41f2c020f82ddd6af014cbe023031cdc1cac54160d287e5cbaef852cabeaf8c65bc799462a41f1a374b319965fd93d415427fda5e5aac39455",
            "file": "src/app/_main/dialogs/alert/alert.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-dialog",
            "styleUrls": [
                "./alert.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "AlertDialogVariant",
                    "defaultValue": "AlertDialogVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Passthrough to the dialog&#39;s variant enumerable.</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nPassthrough to the dialog's variant enumerable.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertDialogData",
                    "optional": false,
                    "description": "Object to pass as data to the dialog",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "important",
                    "defaultValue": "this.data.variant === AlertDialogVariant.IMPORTANT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Host binding to set if the dialog is important.</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nHost binding to set if the dialog is important.\n",
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.important-dialog'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses the dialog. Returns false to indicate that the dialog was closed without confirmation.\n",
                    "description": "<p>Closes the dialog. Returns false to indicate that the dialog was closed without confirmation.</p>\n"
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses the dialog. Returns true to indicate that the dialog was closed with confirmation.\n",
                    "description": "<p>Closes the dialog. Returns true to indicate that the dialog was closed with confirmation.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.important-dialog",
                    "defaultValue": "this.data.variant === AlertDialogVariant.IMPORTANT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHost binding to set if the dialog is important.\n",
                    "description": "<p>Host binding to set if the dialog is important.</p>\n",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "<p>Alert dialog component. Simple dialog with a title, message, and configurable buttons.</p>\n",
            "rawdescription": "\n\nAlert dialog component. Simple dialog with a title, message, and configurable buttons.\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n/**\n * Type of the dialog variant. Used to specify what dialog styling should be used.\n */\nexport enum AlertDialogVariant {\n  DEFAULT = 'default',\n  IMPORTANT = 'important',\n}\n\n/**\n * Alert dialog data interface. Indicates what data will be passed to the dialog.\n */\nexport interface AlertDialogData {\n  /**\n   * Dialog title. Displayed at the top of the dialog.\n   */\n  title?: string;\n  /**\n   * Dialog message. Displayed below the title.\n   */\n  message?: string;\n  /**\n   * Confirm button text.\n   */\n  confirmText?: string;\n  /**\n   * Cancel button text.\n   */\n  cancelText?: string;\n  /**\n   * Type of the dialog variant. Used to specify what dialog styling should be used.\n   */\n  variant?: AlertDialogVariant;\n}\n\n/**\n * Alert dialog component. Simple dialog with a title, message, and configurable buttons.\n */\n@Component({\n  selector: 'app-alert-dialog',\n  templateUrl: './alert.dialog.html',\n  styleUrls: ['./alert.dialog.scss'],\n})\nexport class AlertDialog {\n  /**\n   * Passthrough to the dialog's variant enumerable.\n   */\n  public AlertDialogVariant = AlertDialogVariant;\n\n  /**\n   * Default constructor. Injects the dialog reference and data.\n   * @param data Object to pass as data to the dialog\n   * @param dialogRef Reference to dialog instance\n   */\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: AlertDialogData,\n    private dialogRef: MatDialogRef<AlertDialog>,\n  ) {\n    data.variant ||= AlertDialogVariant.DEFAULT;\n  }\n\n  /**\n   * Host binding to set if the dialog is important.\n   */\n  @HostBinding('class.important-dialog') important: boolean =\n    this.data.variant === AlertDialogVariant.IMPORTANT;\n\n  /**\n   * Closes the dialog. Returns false to indicate that the dialog was closed without confirmation.\n   */\n  cancel() {\n    this.dialogRef.close(false);\n  }\n\n  /**\n   * Closes the dialog. Returns true to indicate that the dialog was closed with confirmation.\n   */\n  confirm() {\n    this.dialogRef.close(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor. Injects the dialog reference and data.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "AlertDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AlertDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "rawdescription": "\n\nDefault constructor. Injects the dialog reference and data.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1308,
                            "end": 1312,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "data"
                        },
                        "type": "AlertDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1302,
                            "end": 1307,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Object to pass as data to the dialog</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1362,
                            "end": 1371,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AlertDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1356,
                            "end": 1361,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Reference to dialog instance</p>\n"
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title [class.important]=\"data.variant === AlertDialogVariant.IMPORTANT\">{{ data.title }}</h1>\r\n<div mat-dialog-content>\r\n  <div>{{ data.message }}</div>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <app-button mat-button (click)=\"cancel()\">{{ data.cancelText }}</app-button>\r\n  <ng-container *ngIf=\"data.variant === AlertDialogVariant.IMPORTANT && data.confirmText\">\r\n    <app-button mat-button (click)=\"confirm()\" variant=\"important\" appFocusInitial>{{ data.confirmText }}</app-button>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"data.variant !== AlertDialogVariant.IMPORTANT && data.confirmText\">\r\n    <app-button mat-button (click)=\"confirm()\" variant=\"primary\" appFocusInitial>{{ data.confirmText }}</app-button>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-61fcc3273963f93d6d771dd1c87062d78c15b468e6e80483c8b49b626c7cc81f550264a142b132c3bff4c8a43319690035d39b200865d6ce3abf75cf3ef80182",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'workflow'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title of the page</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nTitle of the page\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Main Component with basic layout and main router outlet</p>\n",
            "rawdescription": "\n\nMain Component with basic layout and main router outlet\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n/**\n * Main Component with basic layout and main router outlet\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  /**\n   * Title of the page\n   */\n  public title = 'workflow';\n\n  constructor() {\n    document.addEventListener('DOMContentLoaded', () => {\n      document.body.classList.remove('preload');\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n  background-color: var(--color-secondary-700);\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "BoardPage",
            "id": "component-BoardPage-e75025dda5ec79a40d873e6e1bd3cdaf94d7a80ac284d2228aa843970b1d27f3f3e0fd636f9df1e81affe1efa595578fd149904fdcb8ccbfd9e2ccbedc96144c",
            "file": "src/app/tasks/pages/board/board.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board",
            "styleUrls": [
                "./board.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "board$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[]>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faCheck",
                    "defaultValue": "faCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "faChevronRight",
                    "defaultValue": "faChevronRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "faCodeCommit",
                    "defaultValue": "faCodeCommit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "faCodePullRequest",
                    "defaultValue": "faCodePullRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "members$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Map<number, ProjectMember>>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "project$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatusWithTasks[]",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StatusWithTasks[]>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusListSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "taskMap",
                    "defaultValue": "new PersistentMap<number | string, boolean>({ persistentKey: 'board' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Task[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Task[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnsContainerHeight",
                    "args": [
                        {
                            "name": "mapKey",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mapKey",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTasksFromStatus",
                    "args": [
                        {
                            "name": "statusId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "statusId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "idOf",
                    "args": [
                        {
                            "name": "o",
                            "type": "Task | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "o",
                            "type": "Task | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openNewTaskDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProjectMember } from '@dashboard/interfaces/project-member.interface';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { MemberService } from '@dashboard/services/member.service';\nimport { ProjectService } from '@dashboard/services/project.service';\nimport {\n  faCheck,\n  faChevronRight,\n  faCodeCommit,\n  faCodePullRequest,\n  faPlus,\n} from '@fortawesome/free-solid-svg-icons';\nimport { PersistentMap } from '@main/classes/persistent-map.class';\nimport { Observable, Subscription } from 'rxjs';\nimport { DialogService } from '../../../_main/services/dialog.service';\nimport { TaskDialog, TaskDialogData, TaskDialogVariant } from '../../dialogs/task/task.dialog';\nimport { StatusWithTasks } from '../../interfaces/status.interface';\nimport { Task } from '../../interfaces/task.interface';\nimport { StatusService } from '../../services/status.service';\nimport { TaskService } from '../../services/task.service';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.page.html',\n  styleUrls: ['./board.page.scss'],\n})\nexport class BoardPage implements OnInit, OnDestroy {\n  faPlus = faPlus;\n  faChevronRight = faChevronRight;\n  faCodeCommit = faCodeCommit;\n  faCodePullRequest = faCodePullRequest;\n  faCheck = faCheck;\n\n  public taskMap = new PersistentMap<number | string, boolean>({ persistentKey: 'board' });\n  public projectId!: number;\n\n  public statusList$!: Observable<StatusWithTasks[]>;\n  public board$!: Observable<[Task | string, StatusWithTasks[]][]>;\n  public project$: Observable<Project>;\n  public members$: Observable<Map<number, ProjectMember>>;\n  public statusList: StatusWithTasks[] = [];\n  private statusListSubscription?: Subscription;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private taskService: TaskService,\n    private statusService: StatusService,\n    private dialogService: DialogService,\n    private projectService: ProjectService,\n    private memberService: MemberService,\n  ) {\n    const { workspaceId, projectId } = this.activatedRoute.snapshot.params;\n\n    this.projectId = projectId;\n    this.project$ = this.projectService.get(projectId);\n    this.board$ = this.statusService.board(projectId);\n    this.statusList$ = this.statusService.listWithTasks(projectId);\n    this.statusListSubscription = this.statusList$.subscribe((statusList) => {\n      this.statusList = statusList;\n    });\n    this.members$ = this.memberService.map(projectId);\n  }\n\n  getTasksFromStatus(statusId: number) {\n    return this.statusList.find((status) => status.id === statusId)?.tasks;\n  }\n\n  ngOnInit() {\n    this.statusList$.subscribe((statusList) => {\n      this.statusList = statusList;\n    });\n  }\n\n  ngOnDestroy() {\n    this.statusListSubscription?.unsubscribe();\n  }\n\n  drop(event: CdkDragDrop<Task[]>) {\n    const previousStatusIndex = Number(\n      event.previousContainer.element.nativeElement.dataset['index'],\n    );\n    const newStatusIndex = Number(event.container.element.nativeElement.dataset['index']);\n    const previousStatus = this.statusList[previousStatusIndex];\n    const newStatus = this.statusList[newStatusIndex];\n    const previousTaskIndex = event.previousIndex;\n    const task = event.previousContainer.data[previousTaskIndex];\n\n    console.log({ previousStatus, task });\n\n    console.log(\n      event.previousContainer.data,\n      event.container.data,\n      event.previousIndex,\n      event.currentIndex,\n    );\n\n    const onSuccess = () => {\n      task.statusId = newStatus.id;\n      this.taskService.update(this.projectId, task as any).subscribe();\n\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      } else {\n        transferArrayItem(\n          event.previousContainer.data,\n          event.container.data,\n          event.previousIndex,\n          event.currentIndex,\n        );\n      }\n    };\n\n    // Catch if the task has pull request and user is trying to move to finishing state\n    if (task.pull && newStatus.final) {\n      this.dialogService\n        .alert({\n          title: $localize`Are you sure?`,\n          message: $localize`If you will move this task to finishing state, the attached pull request will be merged to the repository.`,\n          confirmText: $localize`Merge`,\n          cancelText: $localize`Cancel`,\n        })\n        .subscribe((result) => {\n          if (!result) return;\n\n          onSuccess();\n        });\n      // } else if (task.mergedPullList && !newStatus.final) {\n      //   this.dialogService\n      //     .alert({\n      //       title: $localize`Are you sure?`,\n      //       message: $localize`If you will move this task to not finishing state, the pull request will be detached.`,\n      //       confirmText: $localize`Detach`,\n      //       cancelText: $localize`Cancel`,\n      //     })\n      //     .subscribe((result) => {\n      //       if (!result) return;\n\n      //       onSuccess();\n      //     });\n      // }\n    } else {\n      onSuccess();\n    }\n  }\n\n  openNewTaskDialog() {\n    this.dialogService\n      .open(TaskDialog, {\n        projectId: this.projectId,\n        variant: TaskDialogVariant.CREATE,\n      } as TaskDialogData)\n      .afterClosed()\n      .subscribe((result) => {\n        if (result) {\n          this.taskService.create(this.projectId, result).subscribe(() => {\n            location.reload();\n          });\n        }\n      });\n  }\n\n  idOf(o: Task | string) {\n    return (o as any).id || o;\n  }\n\n  getColumnsContainerHeight(mapKey: string | number, element: HTMLElement) {\n    return `${Number(!this.taskMap.get(mapKey)) * element.scrollHeight + 16}px`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  height: 100%;\r\n  flex-direction: column;\r\n}\r\n\r\napp-view-options {\r\n  width: auto;\r\n  margin: 2rem 2rem 0 2rem;\r\n}\r\n\r\napp-status-label {\r\n  width: auto;\r\n}\r\n\r\n.boards {\r\n  display: flex;\r\n  overflow: auto;\r\n  flex-direction: column;\r\n  padding: 0 2rem 2rem 2rem;\r\n}\r\n\r\n.board {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-left: 10px;\r\n  margin-left: -1rem;\r\n\r\n  &:not(.collapsed) .task-title>app-icon {\r\n    transform: rotate(90deg);\r\n  }\r\n\r\n  .columns {\r\n    display: flex;\r\n    overflow: hidden;\r\n    transition: max-height .2s ease;\r\n\r\n    // &.collapsed {\r\n    //   height: 0;\r\n    // }\r\n  }\r\n\r\n  .column {\r\n    display: flex;\r\n    width: 300px;\r\n    min-height: 100%;\r\n    flex-direction: column;\r\n    padding: 1rem 0.5rem 0 0.5rem;\r\n\r\n    &:first-child {\r\n      padding-left: 0;\r\n    }\r\n\r\n    .column-header {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      margin-bottom: 1em;\r\n      color: var(--color-text);\r\n\r\n      h3 {\r\n        margin: 0;\r\n      }\r\n\r\n      app-icon {\r\n        cursor: pointer;\r\n      }\r\n    }\r\n\r\n    .column-content {\r\n      height: 100%;\r\n      padding: 1rem;\r\n      background-color: var(--color-secondary-800);\r\n      border-radius: var(--border-radius);\r\n\r\n      app-board-task:last-child {\r\n        margin-bottom: -1rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.cdk-drag-placeholder {\r\n  opacity: 0;\r\n}\r\n\r\n.cdk-drag-animating {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.column-content.cdk-drop-list-dragging app-board-task:not(.cdk-drag-placeholder) {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.task-title {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  height: 40px;\r\n  align-items: center;\r\n  padding-left: 0.5rem;\r\n\r\n  .task-id {\r\n    display: block;\r\n    margin-right: 1rem;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .task-property {\r\n    display: flex;\r\n    margin-left: 1rem;\r\n    cursor: pointer;\r\n    opacity: 0.5;\r\n    transition: opacity 0.2s ease;\r\n\r\n    &:hover {\r\n      opacity: 1;\r\n    }\r\n\r\n    .check {\r\n      margin-left: 5px;\r\n      color: #2ecc71;\r\n    }\r\n  }\r\n\r\n  &>app-icon {\r\n    margin-right: 1rem;\r\n    opacity: 0.5;\r\n    transition: transform .2s ease;\r\n  }\r\n}\r\n\r\n.status-list-banner {\r\n  display: flex;\r\n  padding: 1rem;\r\n  border-bottom: 1px solid var(--color-secondary-500);\r\n  margin-left: 2rem;\r\n\r\n  .status-banner {\r\n    width: 300px;\r\n    color: var(--color-text);\r\n  }\r\n}\r\n\r\n.row {\r\n  cursor: pointer;\r\n}",
                    "styleUrl": "./board.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-view-options [project]=\"(project$ | async)!\"></app-view-options>\r\n\r\n<div class=\"status-list-banner\">\r\n  <div *ngFor=\"let status of statusList$ | async\" class=\"status-banner\">\r\n    {{ status.name }}\r\n  </div>\r\n</div>\r\n\r\n<div *ngLet=\"(members$ | async)! as members\" class=\"boards\">\r\n  <div *ngFor=\"let board of board$ | async\" class=\"board\" [class.collapsed]=\"taskMap.get(idOf(board[0]))\"\r\n    cdkDropListGroup>\r\n    <div class=\"table\">\r\n      <div class=\"row\" *ngLet=\"board[0] as task\"\r\n        (click)=\"taskMap.set(idOf(board[0]), !taskMap.get(idOf(board[0])) || false)\">\r\n        <div class=\"cell w-full\">\r\n          <div *ngIf=\"task !== 'OTHER'\" class=\"task-title\">\r\n            <app-icon [icon]=\"faChevronRight\" size=\"16px\"></app-icon>\r\n            <span class=\"task-id\">#{{ task.id }}</span>\r\n            <span>{{ task.name }}</span>\r\n            <a *ngIf=\"task.issue\" [href]=\"task.issue\" class=\"task-property\" target=\"_blank\" matTooltip=\"GitHub issue\"\r\n              i18n-matTooltip>\r\n              <app-icon [icon]=\"faCodeCommit\" size=\"14px\"></app-icon>\r\n            </a>\r\n            <a *ngIf=\"task.pull\" [href]=\"task.pull\" class=\"task-property\" target=\"_blank\"\r\n              matTooltip=\"GitHub pull request\" i18n-matTooltip>\r\n              <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n            </a>\r\n            <a *ngIf=\"task.mergedPullList\" [href]=\"task.mergedPullList[0]\" class=\"task-property\" target=\"_blank\"\r\n              matTooltip=\"GitHub pull request\" i18n-matTooltip>\r\n              <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n              <app-icon class=\"check\" [icon]=\"faCheck\" size=\"14px\"></app-icon>\r\n            </a>\r\n            <app-status-label [projectId]=\"projectId\" [taskId]=\"task.id\" [statuses]=\"statusList\" variant=\"small\"\r\n              [statusId]=\"task.statusId!\" click-stop-propagation>\r\n            </app-status-label>\r\n          </div>\r\n          <div *ngIf=\"task === 'OTHER'\" class=\"task-title\">\r\n            <app-icon [icon]=\"faChevronRight\" size=\"16px\"></app-icon>\r\n            <span i18n>Other tasks</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div #columns class=\"columns\" [class.collapsed]=\"taskMap.get(idOf(board[0]))\"\r\n      [style.maxHeight]=\"getColumnsContainerHeight(idOf(board[0]), columns)\">\r\n      <div *ngFor=\"let column of board[1]; index as statusIndex\" class=\"column\">\r\n        <div class=\"column-content\" [cdkDropListData]=\"column.tasks\" (cdkDropListDropped)=\"drop($event)\"\r\n          [attr.data-index]=\"statusIndex\" cdkDropList>\r\n          <app-board-task *ngFor=\"let task of column.tasks; index as taskIndex\" class=\"task\" [task]=\"task\"\r\n            [projectId]=\"projectId\" [members]=\"members\" [attr.data-index]=\"taskIndex\" cdkDrag>\r\n          </app-board-task>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "BoardTaskComponent",
            "id": "component-BoardTaskComponent-561bbf9a5994f21af0120b6a3557f9a8d691f0151d02e7a6167aaf334b84493fd3aee72a0928c42f95093fab262c2343b291d08213a68a576d2a01245e171313",
            "file": "src/app/tasks/components/board-task/board-task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-board-task",
            "styleUrls": [
                "./board-task.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board-task.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "members",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Map<number | ProjectMember>",
                    "decorators": []
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faCheck",
                    "defaultValue": "faCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "faCodeCommit",
                    "defaultValue": "faCodeCommit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "faCodePullRequest",
                    "defaultValue": "faCodePullRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "changeDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSubtask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ProjectMember } from '@dashboard/interfaces/project-member.interface';\nimport { faCheck, faCodeCommit, faCodePullRequest } from '@fortawesome/free-solid-svg-icons';\nimport { DialogService } from '@main/services/dialog.service';\nimport { TaskDialog, TaskDialogVariant } from '@tasks/dialogs/task/task.dialog';\nimport { TaskService } from '@tasks/services/task.service';\nimport * as dayjs from 'dayjs';\nimport { Task } from '../../interfaces/task.interface';\n\n@Component({\n  selector: 'app-board-task',\n  templateUrl: './board-task.component.html',\n  styleUrls: ['./board-task.component.scss'],\n})\nexport class BoardTaskComponent {\n  @Input()\n  public task!: Task;\n\n  @Input()\n  public projectId!: number;\n\n  @Input()\n  public members: Map<number, ProjectMember> = new Map();\n\n  faCodeCommit = faCodeCommit;\n  faCodePullRequest = faCodePullRequest;\n  faCheck = faCheck;\n\n  constructor(private dialogService: DialogService, private taskService: TaskService) {}\n\n  delete() {\n    this.taskService.deleteWithConfirmation(this.projectId, this.task).subscribe(() => {\n      location.reload();\n    });\n  }\n\n  edit() {\n    this.taskService.openEditTaskDialog(this.projectId, this.task).subscribe(() => {\n      location.reload();\n    });\n  }\n\n  createSubtask() {\n    this.dialogService\n      .open(TaskDialog, {\n        variant: TaskDialogVariant.CREATE,\n        projectId: this.projectId,\n        subtask: true,\n        task: {\n          parentTaskId: this.task.id,\n        },\n      })\n      .afterClosed()\n      .subscribe((task) => {\n        if (!task) return;\n\n        this.taskService.create(this.projectId, task).subscribe(() => {\n          location.reload();\n        });\n      });\n  }\n\n  changeDate(date: Date) {\n    let sessionDate = dayjs(date);\n    return sessionDate.format('YYYY-MM-DD, hh:mm A');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n:host {\r\n  display: block;\r\n  cursor: move;\r\n}\r\n\r\n.task {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 1rem;\r\n  margin-bottom: 1rem;\r\n  background-color: var(--color-board-task-background);\r\n  border-radius: var(--border-radius);\r\n  transition: background-color 0.2s ease, box-shadow 0.2s ease;\r\n\r\n  &:hover {\r\n    background-color: var(--color-board-task-background-hover);\r\n    box-shadow: 0 0 0.5rem 0.01rem rgb(0 0 0 / 10%);\r\n  }\r\n\r\n  .top-section {\r\n    display: flex;\r\n\r\n    >* {\r\n      width: 50%;\r\n    }\r\n\r\n    .assignees {\r\n      .assignee {\r\n        $size: 32px;\r\n\r\n        @include typo-heading-5;\r\n\r\n        display: flex;\r\n        width: #{$size};\r\n        height: #{$size};\r\n        align-items: center;\r\n        justify-content: center;\r\n        background-color: #0a95d0;\r\n        border-radius: calc($size / 2);\r\n        color: var(--color-text);\r\n      }\r\n    }\r\n\r\n    .deadline {\r\n      color: var(--color-text);\r\n\r\n      .title {\r\n        @include typo-body;\r\n      }\r\n\r\n      .value {\r\n        @include typo-title;\r\n      }\r\n    }\r\n  }\r\n\r\n  .name {\r\n    @include typo-body;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    margin-top: 1rem;\r\n    color: var(--color-text);\r\n\r\n    .task-id {\r\n      margin-right: 0.5rem;\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n\r\n  .options {\r\n    position: absolute;\r\n    right: 5px;\r\n    color: #fff;\r\n  }\r\n\r\n  .commit {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: flex-end;\r\n    padding: 0 0.5rem;\r\n    color: var(--color-text);\r\n    cursor: pointer;\r\n    opacity: 0.5;\r\n    transition: opacity 0.5s ease;\r\n\r\n    &:hover {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  .actions {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: flex-end;\r\n\r\n    >* {\r\n      display: flex;\r\n      margin-left: 1rem;\r\n      color: var(--color-text);\r\n      cursor: pointer;\r\n      opacity: 0.5;\r\n      transition: opacity 0.2s ease;\r\n\r\n      &:hover {\r\n        opacity: 1;\r\n      }\r\n\r\n      .check {\r\n        margin-left: 5px;\r\n        color: #2ecc71;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.task-type {\r\n  display: block;\r\n  width: 16px;\r\n  height: 16px;\r\n  margin-right: 1rem;\r\n  border-radius: 4px;\r\n}\r\n",
                    "styleUrl": "./board-task.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"task\" class=\"task\">\r\n  <div class=\"top-section\">\r\n    <div class=\"assignees\" *ngIf=\"members\">\r\n      <app-input-assignee [assignee]=\"members.get(task.assigneeId || -1) || null\" [projectId]=\"projectId\"\r\n        [taskId]=\"task.id\" [members]=\"members || []\"></app-input-assignee>\r\n    </div>\r\n    <div *ngIf=\"task.deadline\" class=\"deadline\">\r\n      <div class=\"title\" i18n>Due date</div>\r\n      <div class=\"value\">{{ changeDate(task.deadline) }}</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"name\">\r\n    <span class=\"task-type\" [style.background-color]=\"task.type | taskType:'color'\"></span>\r\n    <span class=\"task-id\">#{{ task.id }}</span>\r\n    <span>{{ task?.name }}</span>\r\n  </div>\r\n  <div class=\"actions\">\r\n    <a *ngIf=\"task.issue\" [href]=\"task.issue\" target=\"_blank\">\r\n      <app-icon [icon]=\"faCodeCommit\" size=\"14px\"></app-icon>\r\n    </a>\r\n    <a *ngIf=\"task.pull\" [href]=\"task.pull\" target=\"_blank\">\r\n      <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n    </a>\r\n    <a *ngIf=\"task.mergedPullList\" [href]=\"task.mergedPullList[0]\" target=\"_blank\">\r\n      <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n      <app-icon class=\"check\" [icon]=\"faCheck\" size=\"14px\"></app-icon>\r\n    </a>\r\n  </div>\r\n  <div class=\"options\">\r\n    <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"flex items-center\">\r\n      <app-icon icon=\"matMoreVert\"></app-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n      <button mat-menu-item (click)=\"edit()\">\r\n        <span i18n>Edit task</span>\r\n      </button>\r\n      <button mat-menu-item (click)=\"createSubtask()\">\r\n        <span i18n>Create subtask</span>\r\n      </button>\r\n      <button mat-menu-item class=\"important\" (click)=\"delete()\">\r\n        <span i18n>Delete task</span>\r\n      </button>\r\n    </mat-menu>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-8701334c6155525fd5cb93ac09d7735dd2a41c73f94ddc78d538fb6ad449407e711050d43e6dc7deaff27d6e6ef4b95505df5df182f835d7166e9cf06772d3b7",
            "file": "src/app/_main/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon to display on the button.\n",
                    "description": "<p>Icon to display on the button.</p>\n",
                    "line": 34,
                    "type": "string | IconDefinition",
                    "decorators": []
                },
                {
                    "name": "pending",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInformation about the pending. If button is pending the loader icon will be shown.\n",
                    "description": "<p>Information about the pending. If button is pending the loader icon will be shown.</p>\n",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'submit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nButton behavior in forms. If this property is set to `submit`, this button will be able to submit the\nform (perform submit event on click). If set to `button`, only the specified `(click)` action will be\nexecuted.\n",
                    "description": "<p>Button behavior in forms. If this property is set to <code>submit</code>, this button will be able to submit the\nform (perform submit event on click). If set to <code>button</code>, only the specified <code>(click)</code> action will be\nexecuted.</p>\n",
                    "line": 24,
                    "type": "\"button\" | \"submit\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'secondary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStyle variant of the button.\n",
                    "description": "<p>Style variant of the button.</p>\n",
                    "line": 17,
                    "type": "\"primary\" | \"secondary\" | \"important\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLButtonElement>",
                    "optional": false,
                    "description": "<p>Reference to native button element.</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nReference to native button element.\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'btn'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFocus the native button element.\n",
                    "description": "<p>Focus the native button element.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Button component to visualize the general clickable elements on the page.</p>\n",
            "rawdescription": "\n\nButton component to visualize the general clickable elements on the page.\n",
            "type": "component",
            "sourceCode": "import { FocusableOption } from '@angular/cdk/a11y';\nimport { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\n/**\n * Button component to visualize the general clickable elements on the page.\n */\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent implements FocusableOption {\n  /**\n   * Style variant of the button.\n   */\n  @Input() variant: 'primary' | 'secondary' | 'important' = 'secondary';\n\n  /**\n   * Button behavior in forms. If this property is set to `submit`, this button will be able to submit the\n   * form (perform submit event on click). If set to `button`, only the specified `(click)` action will be\n   * executed.\n   */\n  @Input() type: 'button' | 'submit' = 'submit';\n\n  /**\n   * Information about the pending. If button is pending the loader icon will be shown.\n   */\n  @Input() pending?: boolean = false;\n\n  /**\n   * Icon to display on the button.\n   */\n  @Input() icon?: string | IconDefinition;\n\n  /**\n   * Reference to native button element.\n   */\n  @ViewChild('btn') elementRef!: ElementRef<HTMLButtonElement>;\n\n  /**\n   * Focus the native button element.\n   */\n  focus() {\n    setTimeout(() => {\n      this.elementRef.nativeElement.focus();\n    }, 200);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\nbutton mat-spinner,\r\nbutton app-icon {\r\n  opacity: 1;\r\n  transform: scale(1);\r\n  transition: opacity 0.2s;\r\n}\r\n\r\nbutton mat-spinner.hide,\r\nbutton app-icon.hide {\r\n  opacity: 0;\r\n}\r\n\r\nbutton .prefix {\r\n  position: relative;\r\n  display: flex;\r\n  width: 24px;\r\n  height: 24px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: width 0.2s, margin-right 0.2s;\r\n\r\n  > * {\r\n    position: absolute;\r\n  }\r\n}\r\n\r\nbutton:not(.button-with-icon) .prefix:not(.pending) {\r\n  width: 0;\r\n  margin-right: 0;\r\n}\r\n\r\nbutton {\r\n  @include typo-title;\r\n\r\n  position: relative;\r\n  display: flex;\r\n  min-width: 80px;\r\n  height: 42px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0.8125rem 1.25rem;\r\n  border-radius: var(--border-radius);\r\n  box-shadow: 0 4px 4px rgb(0 0 0 / 25%);\r\n  color: var(--color-text);\r\n  outline: 0 !important;\r\n  transition: background-color 0.2s ease;\r\n\r\n  > * {\r\n    margin-right: 0.75rem;\r\n  }\r\n\r\n  &::before {\r\n    $offset: 4px;\r\n\r\n    position: absolute;\r\n    top: #{-$offset};\r\n    right: #{-$offset};\r\n    bottom: #{-$offset};\r\n    left: #{-$offset};\r\n    border-radius: calc(var(--border-radius) * 1.5);\r\n    content: '';\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    transition: opacity 0.1s ease;\r\n  }\r\n\r\n  &:focus {\r\n    &::before {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    box-shadow: 0 1px 1px rgb(0 0 0 / 25%);\r\n  }\r\n\r\n  &.primary {\r\n    background-color: var(--color-button-primary-background);\r\n\r\n    &::before {\r\n      border: 2px solid var(--color-button-primary-border-active);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: var(--color-button-primary-background-hover);\r\n    }\r\n\r\n    &:active {\r\n      background-color: var(--color-button-primary-background-active);\r\n    }\r\n  }\r\n\r\n  &.secondary {\r\n    background-color: var(--color-button-secondary-background);\r\n\r\n    &::before {\r\n      border: 2px solid var(--color-button-secondary-border-active);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: var(--color-button-secondary-background-hover);\r\n    }\r\n\r\n    &:active {\r\n      background-color: var(--color-button-secondary-background-active);\r\n    }\r\n  }\r\n\r\n  &.important {\r\n    background-color: var(--color-button-important-background);\r\n\r\n    &::before {\r\n      border: 2px solid var(--color-button-important-border-active);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: var(--color-button-important-background-hover);\r\n    }\r\n\r\n    &:active {\r\n      background-color: var(--color-button-important-background-active);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "FocusableOption"
            ],
            "templateData": "<button #btn [ngClass]=\"[variant]\" [type]=\"type\" [class.button-with-icon]=\"icon\">\r\n  <div class=\"prefix\" [class.pending]=\"pending\">\r\n    <mat-spinner diameter=\"18\" [class.hide]=\"!pending\"></mat-spinner>\r\n    <app-icon *ngIf=\"icon\" [icon]=\"icon\" [class.hide]=\"pending\" size=\"16px\"></app-icon>\r\n  </div>\r\n  <ng-content></ng-content>\r\n</button>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-4016ff42c023c7996c8214736fc308c595bb25f92a80d34900d58e476c36c92e3da01bc154fe0509f1c2336c9e47912dbeff70ed9f48b4f184d3cd48a876cae2",
            "file": "src/app/_main/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n:host {\r\n  &.important {\r\n    .card {\r\n      border: 1px solid var(--color-red-700);\r\n    }\r\n\r\n    .card-header-wrapper {\r\n      color: var(--color-red-700);\r\n    }\r\n  }\r\n}\r\n\r\n.card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 25px;\r\n  border: 1px solid var(--color-secondary-500);\r\n  border-radius: var(--border-radius);\r\n}\r\n\r\n.card-header-wrapper {\r\n  @include typo-title;\r\n\r\n  margin-bottom: 7px;\r\n  color: var(--color-text);\r\n}\r\n\r\n.card-content-wrapper {\r\n  @include typo-body;\r\n\r\n  margin-bottom: 15px;\r\n  color: var(--color-text);\r\n  opacity: 0.7;\r\n}\r\n\r\n.card-actions-wrapper {\r\n  @include typo-body;\r\n\r\n  color: var(--color-text);\r\n}\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"card\">\r\n  <div class=\"card-header-wrapper\">\r\n    <ng-content select=\".card-title\"></ng-content>\r\n  </div>\r\n  <div class=\"card-content-wrapper\">\r\n    <ng-content select=\".card-content\"></ng-content>\r\n  </div>\r\n  <div class=\"card-actions-wrapper\">\r\n    <ng-content select=\".card-actions\"></ng-content>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ChangePasswordPage",
            "id": "component-ChangePasswordPage-d3469878e019a9bc06d233ce903bf00ba64bc7489e97ea9160f4c99c0d4b2ecf1b987d3320a7b4c84c3c782e9e095c263179f3c118b3272636f3ac751fd18220",
            "file": "src/app/auth/pages/change-password/change-password.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-change-password",
            "styleUrls": [
                "./change-password.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./change-password.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    password: new FormControl('', [requiredValidator(), passwordValidator()], []),\n    repeatPassword: new FormControl(\n      '',\n      [\n        requiredValidator(),\n        passwordValidator(),\n        sameAsValidator('password', $localize`Given passwords are not the same `),\n      ],\n      [],\n    ),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for setting new password.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nForm group for setting new password.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNewPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { passwordValidator } from '@main/validators/password.validator';\nimport { requiredValidator } from '@main/validators/required.validator';\nimport { sameAsValidator } from '@main/validators/same-as.validator';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.page.html',\n  styleUrls: ['./change-password.page.scss'],\n})\nexport class ChangePasswordPage implements OnInit {\n  private token?: string;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    const { token } = this.activatedRoute.snapshot.queryParams;\n    this.token = token;\n  }\n\n  private resetSubscription?: Subscription;\n\n  /**\n   * Form group for setting new password.\n   */\n  public form = new FormGroup({\n    password: new FormControl('', [requiredValidator(), passwordValidator()], []),\n    repeatPassword: new FormControl(\n      '',\n      [\n        requiredValidator(),\n        passwordValidator(),\n        sameAsValidator('password', $localize`Given passwords are not the same `),\n      ],\n      [],\n    ),\n  });\n\n  setNewPassword() {\n    if (this.resetSubscription && !this.resetSubscription.closed) return;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.valid && this.token) {\n      this.resetSubscription = this.authService\n        .setNewPassword(this.token, this.form.value.password)\n        .subscribe(() => {\n          this.router.navigate(['/auth/login']);\n        });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\r\n  width: calc(100% - 80px);\r\n  height: 64px;\r\n  margin-top: 20px;\r\n  background-image: url('/assets/metadata/logo_with_name.svg');\r\n  background-position: 0 50%;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n}\r\n\r\n.main {\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-neutral-800);\r\n\r\n  .box {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .form-side {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      background-color: var(--color-gray-800);\r\n\r\n      form {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        justify-content: center;\r\n        padding: 4rem;\r\n\r\n        h2 {\r\n          margin-bottom: 0.5rem;\r\n        }\r\n\r\n        p {\r\n          margin-bottom: 1.5rem;\r\n        }\r\n\r\n        app-input {\r\n          width: 100%;\r\n        }\r\n\r\n        app-button {\r\n          align-self: flex-end;\r\n        }\r\n      }\r\n    }\r\n\r\n    .image-side {\r\n      background-color: var(--color-gray-700);\r\n    }\r\n  }\r\n}\r\n\r\n@screen sm {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen md {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen lg {\r\n  .main {\r\n    .box {\r\n      width: 950px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 450px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen xl {\r\n  .main {\r\n    .box {\r\n      width: 1240px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 520px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 720px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./change-password.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"main\">\r\n  <section class=\"box\">\r\n    <section class=\"form-side\">\r\n      <div class=\"logo\" routerLink=\"/\"></div>\r\n      <form [formGroup]=\"form\" (submit)=\"setNewPassword()\">\r\n        <div>\r\n          <h2 class=\"typo-heading-5\" i18n>Reset password</h2>\r\n          <p class=\"typo-body\" i18n>Enter your new password.</p>\r\n        </div>\r\n\r\n        <app-input formControlName=\"password\" type=\"password\" placeholder=\"●●●●●●●\" floatingLabel=\"Password\" i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n        <app-input formControlName=\"repeatPassword\" type=\"password\" placeholder=\"●●●●●●●\" floatingLabel=\"Repeat password\" i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n        <app-button variant=\"primary\" i18n>Set new password</app-button>\r\n\r\n      </form>\r\n    </section>\r\n    <section class=\"image-side\">\r\n\r\n    </section>\r\n  </section>\r\n</section>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-afb7aa225028f682bdbd19d84d404032e08a02876c547f3054128902bfef5b4c4a0fb073e55d1c7db376110c21f112b058b4a0d0e1e0e1b3b42c8dec5c64107c",
            "file": "src/app/_main/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "control to be used by the accessor",
                    "line": 83,
                    "rawdescription": "\n\nControl passed from DOM to the component, contains all the information about form control\n",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ControlAccessor } from '@main/classes/control-accessor.class';\n\n@Component({\n  selector: 'app-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss'],\n})\nexport class CheckboxComponent extends ControlAccessor {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  position: relative;\r\n}\r\n\r\nmat-checkbox.ng-invalid.ng-touched ~ mat-error {\r\n  // Set this to 'block' if you want to see mat-error label\r\n  display: none;\r\n}\r\n\r\nmat-error {\r\n  position: absolute;\r\n  bottom: -5px;\r\n  left: 28px;\r\n  display: none;\r\n  font-size: 12px;\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ControlAccessor",
            "templateData": "<mat-checkbox [formControl]=\"control\" [class.required]=\"required\" [name]=\"name\">\n  <ng-content></ng-content>\n</mat-checkbox>\n<mat-error>{{ control.errors | validationError }}</mat-error>\n"
        },
        {
            "name": "ControlAccessor",
            "id": "component-ControlAccessor-d6966228b803c97a1c8d06bbd883ae421e5acb8bb16b8ed8714d5f3a2c71334d481594fe151239985468f1a9d020b45ca1bd5451e68e92e895cb94c92279e132",
            "file": "src/app/_main/classes/control-accessor.class.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NgControl, useClass: TestNgControl }"
                }
            ],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "control to be used by the accessor",
                    "line": 83,
                    "rawdescription": "\n\nControl passed from DOM to the component, contains all the information about form control\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>A base class for creating custom control accessors like inputs, checkboxes, etc.</p>\n",
            "rawdescription": "\n\nA base class for creating custom control accessors like inputs, checkboxes, etc.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NgControl, ValidationErrors } from '@angular/forms';\nimport { TestNgControl } from '@tests/helpers/ng-control-testing-provider.helper';\nimport { Subject } from 'rxjs';\n\n/**\n * A base class for creating custom control accessors like inputs, checkboxes, etc.\n */\n@Component({\n  template: '',\n  providers: [{ provide: NgControl, useClass: TestNgControl }],\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class ControlAccessor implements OnDestroy, ControlValueAccessor {\n  /**\n   * Property that defines if field should prompt user how to fill it. For example\n   * in a form, if a field is email, it will give the user last used emails\n   */\n  @Input() autocomplete: 'on' | 'off' = 'off';\n\n  /**\n   * Property to describe if the control is required.\n   * @returns true if the control is required to fill in form.\n   */\n  public get required() {\n    return this._required;\n  }\n\n  public get name() {\n    return this.ngControl.name?.toString() || '';\n  }\n\n  /**\n   * Private property to set field as required\n   *\n   * @ignore\n   */\n  private _required: boolean = false;\n\n  /**\n   * Control that is used by the form.\n   */\n  public get control(): FormControl {\n    return (this.ngControl.control as FormControl) || new FormControl();\n  }\n\n  /**\n   * Observable that emits when the control is destroyed.\n   *\n   * @ignore\n   */\n  private destroy$: Subject<null> = new Subject();\n\n  /**\n   * Observable that emits when the control is touched.\n   *\n   * @ignore\n   */\n  private touched$: Subject<boolean> = new Subject();\n\n  /**\n   * Get the value of the control.\n   */\n  public get value(): any {\n    return this.control.value;\n  }\n\n  /**\n   * Get the errors of the control.\n   */\n  public get errors(): ValidationErrors | null {\n    return this.control.errors;\n  }\n\n  /**\n   * Accessor constructor to initialize component. Extended by child classes.\n   * @param ngControl control to be used by the accessor\n   */\n  constructor(\n    /**\n     * Control passed from DOM to the component, contains all the information about form control\n     */\n    public ngControl: NgControl,\n  ) {\n    this.ngControl.valueAccessor = this;\n\n    this._initCheckForTouch();\n    this._checkIfIsRequired();\n  }\n\n  /**\n   * Check if the control is required by provided validators.\n   *\n   * @ignore\n   */\n  private _checkIfIsRequired(): void {\n    if (!(this.control as any)._rawValidators) return;\n\n    for (const validator of (this.ngControl as any).control._rawValidators) {\n      if (validator.name === 'required') {\n        this._required = true;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Apply the touched observable on ngControl and control fields\n   *\n   * @ignore\n   */\n  private _initCheckForTouch(): void {\n    (this.control as any)._markAsTouched = this.control.markAsTouched;\n    this.control.markAsTouched = () => {\n      (this.control as any)._markAsTouched();\n      this.touched$.next(true);\n    };\n  }\n\n  /**\n   * Writes a new value to the element.\n   *\n   * This method is called by the forms API to write to the view when programmatic\n   * changes from model to view are requested.\n   *\n   * @param value The new value for the element\n   */\n  writeValue(value: any): void {}\n\n  /**\n   * Registers a callback function that is called when the control's value changes in the UI.\n   *\n   * This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n   * @param fn Callback to be called when the control value changes.\n   */\n  registerOnChange(fn: any): void {}\n\n  /**\n   * Registers a callback function that is called by the forms API on initialization to update the form model on blur.\n   *\n   * @param fn Callback to be called when the control is touched.\n   */\n  registerOnTouched(fn: any): void {}\n\n  /**\n   * Set disabled state on the control. If set to true, the control will be disabled.\n   * @param isDisabled State to set to the control\n   */\n  setDisabledState(isDisabled: boolean) {\n    if (isDisabled) {\n      this.control.disable();\n    } else {\n      this.control.enable();\n    }\n  }\n\n  /** @ignore */\n  ngOnDestroy(): void {\n    this.destroy$.next(null);\n    this.destroy$.complete();\n    this.touched$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Accessor constructor to initialize component. Extended by child classes.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "rawdescription": "\n\nAccessor constructor to initialize component. Extended by child classes.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1991,
                            "end": 2000,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "ngControl"
                        },
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1985,
                            "end": 1990,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>control to be used by the accessor</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "ControlValueAccessor"
            ],
            "accessors": {
                "required": {
                    "name": "required",
                    "getSignature": {
                        "name": "required",
                        "type": "",
                        "returnType": "",
                        "line": 25,
                        "rawdescription": "\n\nProperty to describe if the control is required.\n",
                        "description": "<p>Property to describe if the control is required.</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 887,
                                "end": 948,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 339,
                                "tagName": {
                                    "pos": 888,
                                    "end": 895,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "<p>true if the control is required to fill in form.</p>\n"
                            }
                        ]
                    }
                },
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "",
                        "returnType": "",
                        "line": 29
                    }
                },
                "control": {
                    "name": "control",
                    "getSignature": {
                        "name": "control",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 43,
                        "rawdescription": "\n\nControl that is used by the form.\n",
                        "description": "<p>Control that is used by the form.</p>\n"
                    }
                },
                "value": {
                    "name": "value",
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 64,
                        "rawdescription": "\n\nGet the value of the control.\n",
                        "description": "<p>Get the value of the control.</p>\n"
                    }
                },
                "errors": {
                    "name": "errors",
                    "getSignature": {
                        "name": "errors",
                        "type": "",
                        "returnType": "ValidationErrors | null",
                        "line": 71,
                        "rawdescription": "\n\nGet the errors of the control.\n",
                        "description": "<p>Get the errors of the control.</p>\n"
                    }
                }
            }
        },
        {
            "name": "CreateProjectMembersPage",
            "id": "component-CreateProjectMembersPage-6b6437c9d01100b2267ffc226c8f82786ae6f8096fc4d4ced38a5c245474f995027d0393165e7e742e48db19e673a41c7c16c0464bc31a29bfa660566e5b4707",
            "file": "src/app/dashboard/pages/create-project-members/create-project-members.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-project-members",
            "styleUrls": [
                "./create-project-members.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-project-members.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace creation.</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nSubscription to the workspace creation.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for the project creation.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nForm group for the project creation.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "memberList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "workspace$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openAddMembersDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.\n",
                    "description": "<p>Creates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.</p>\n"
                },
                {
                    "name": "submitCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AddMemberDialog } from '@dashboard/dialogs/add-member/add-member.dialog';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { MemberService } from '@dashboard/services/member.service';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DialogService } from '@main/services/dialog.service';\nimport { maxLengthValidator } from '@main/validators/max-length.validator';\nimport { Observable, Subscription } from 'rxjs';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { ProjectService } from '../../services/project.service';\nimport { WorkspaceService } from '../../services/workspace.service';\n\n@Component({\n  selector: 'app-create-project-members',\n  templateUrl: './create-project-members.page.html',\n  styleUrls: ['./create-project-members.page.scss'],\n})\nexport class CreateProjectMembersPage {\n  faPlus = faPlus;\n\n  /**\n   * Form group for the project creation.\n   */\n  public form = new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n  });\n\n  /**\n   * Subscription to the workspace creation.\n   */\n  public createSubscription?: Subscription;\n\n  public workspace$!: Observable<Workspace>;\n\n  private workspaceId!: number;\n\n  private memberList?: string[];\n\n  /**\n   * Default constructor. Injects the Workspace and Router service.\n   * @param workspaceService Workspace service\n   * @param router Router service\n   */\n  constructor(\n    private workspaceService: WorkspaceService,\n    private projectService: ProjectService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dialogService: DialogService,\n    private memberService: MemberService,\n  ) {\n    const { workspaceId } = this.activatedRoute.snapshot.params;\n    this.workspaceId = workspaceId;\n    this.workspace$ = this.workspaceService.get(workspaceId);\n    this.form.addControl('workspaceId', new FormControl(workspaceId));\n  }\n\n  /**\n   * Creates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\n   * Otherwise, displays an error message.\n   */\n\n  openAddMembersDialog() {\n    this.dialogService\n      .open(AddMemberDialog, {})\n      .afterClosed()\n      .subscribe((result) => {\n        this.memberList = result;\n      });\n  }\n\n  public submitCreate(): void {\n    if (!this.createSubscription?.closed && this.createSubscription) return;\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (this.form.invalid) return;\n\n    this.createSubscription = this.projectService.create(this.form.value).subscribe((response) => {\n      if (this.memberList) {\n        this.memberService.add(this.memberList, [response.id]).subscribe(() => {\n          this.router.navigate([this.workspaceId]).then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        this.router.navigate([this.workspaceId]).then(() => {\n          window.location.reload();\n        });\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n\r\nform {\r\n  padding-left: 10px;\r\n}\r\n\r\n.button {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  margin-top: -60px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.app-member-list {\r\n  padding-left: 10px;\r\n}\r\n\r\n.app-button {\r\n  display: flex;\r\n  margin-top: 2rem;\r\n}\r\n",
                    "styleUrl": "./create-project-members.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor. Injects the Workspace and Router service.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "rawdescription": "\n\nDefault constructor. Injects the Workspace and Router service.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1544,
                            "end": 1560,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "workspaceService"
                        },
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1538,
                            "end": 1543,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Workspace service</p>\n"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1591,
                            "end": 1597,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1585,
                            "end": 1590,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Router service</p>\n"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-view-options [title]='\"Creating new project\"'></app-view-options>\r\n\r\n<div class=\"button\">\r\n  <app-button [icon]=\"faPlus\" variant=\"primary\" (click)=\"openAddMembersDialog()\">Add member</app-button>\r\n</div>\r\n\r\n<app-member-list></app-member-list>\r\n"
        },
        {
            "name": "CreateProjectPage",
            "id": "component-CreateProjectPage-8350a01a51ba03ec3e250e2ecf59d7612c5710c24e0976853dad6928999566534d8e6b58b59e0e1e4ab71d33619966d8f907703a55f271daca3940bc1ae43cd2",
            "file": "src/app/dashboard/pages/create-project/create-project.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-project",
            "styleUrls": [
                "./create-project.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-project.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace creation.</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nSubscription to the workspace creation.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for the project creation.</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nForm group for the project creation.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "memberList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspace$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "openAddMembersDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.\n",
                    "description": "<p>Creates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AddMemberDialog } from '@dashboard/dialogs/add-member/add-member.dialog';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { MemberService } from '@dashboard/services/member.service';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DialogService } from '@main/services/dialog.service';\nimport { maxLengthValidator } from '@main/validators/max-length.validator';\nimport { Observable, Subscription } from 'rxjs';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { ProjectService } from '../../services/project.service';\nimport { WorkspaceService } from '../../services/workspace.service';\n\n@Component({\n  selector: 'app-create-project',\n  templateUrl: './create-project.page.html',\n  styleUrls: ['./create-project.page.scss'],\n})\nexport class CreateProjectPage {\n  /**\n   * Form group for the project creation.\n   */\n  public form = new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n  });\n\n  faPlus = faPlus;\n  /**\n   * Subscription to the workspace creation.\n   */\n  public createSubscription?: Subscription;\n\n  public workspace$!: Observable<Workspace>;\n\n  public workspaceId!: number;\n\n  public memberList: string[] = [];\n\n  /**\n   * Default constructor. Injects the Workspace and Router service.\n   * @param workspaceService Workspace service\n   * @param router Router service\n   */\n  constructor(\n    private workspaceService: WorkspaceService,\n    private projectService: ProjectService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dialogService: DialogService,\n    private memberService: MemberService,\n  ) {\n    const { workspaceId } = this.activatedRoute.snapshot.params;\n    this.workspaceId = workspaceId;\n    this.workspace$ = this.workspaceService.get(workspaceId);\n    this.form.addControl('workspaceId', new FormControl(workspaceId));\n  }\n\n  openAddMembersDialog() {\n    this.dialogService\n      .open(AddMemberDialog, {})\n      .afterClosed()\n      .subscribe((result) => {\n        this.memberList = [...this.memberList, ...result];\n      });\n  }\n\n  /**\n   * Creates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\n   * Otherwise, displays an error message.\n   */\n  public submitCreate(): void {\n    if (!this.createSubscription?.closed && this.createSubscription) return;\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (this.form.invalid) return;\n\n    this.createSubscription = this.projectService.create(this.form.value).subscribe((response) => {\n      if (this.memberList) {\n        this.memberService.add(this.memberList, [response.id]).subscribe(() => {\n          this.router.navigate([this.workspaceId]).then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        this.router.navigate([this.workspaceId]).then(() => {\n          window.location.reload();\n        });\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n\r\nform {\r\n  padding-left: 10px;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  margin-top: 1rem;\r\n\r\n  &>* {\r\n    display: block;\r\n    margin-right: 1rem;\r\n  }\r\n}\r\n\r\n.members {\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-top: 20px;\r\n\r\n  h2 {\r\n    margin: 0;\r\n  }\r\n\r\n  .button {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: flex-end;\r\n  }\r\n}\r\n\r\n.app-member-list {\r\n  padding-left: 10px;\r\n}\r\n",
                    "styleUrl": "./create-project.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor. Injects the Workspace and Router service.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "rawdescription": "\n\nDefault constructor. Injects the Workspace and Router service.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1514,
                            "end": 1530,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "workspaceService"
                        },
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1508,
                            "end": 1513,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Workspace service</p>\n"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1561,
                            "end": 1567,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1555,
                            "end": 1560,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Router service</p>\n"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form [formGroup]=\"form\" (submit)=\"submitCreate()\">\r\n  <div class=\"project-name\">\r\n    <h2 class=\"typo-heading-5 mb-5\" i18n>Workspace: {{ (workspace$ | async)?.name }}</h2>\r\n    <app-input formControlName=\"name\" type=\"text\" placeholder=\"New project\" floatingLabel=\"Project name\"\r\n      i18n-floatingLabel i18n-placeholder></app-input>\r\n  </div>\r\n\r\n  <div class=\"members\">\r\n    <h2 class=\"typo-heading-5 mb-5\">Members</h2>\r\n    <div class=\"button\">\r\n      <app-button type=\"button\" [icon]=\"faPlus\" variant=\"primary\" (click)=\"openAddMembersDialog()\">Add member\r\n      </app-button>\r\n    </div>\r\n  </div>\r\n  <app-member-list *ngIf=\"(memberList !== [])\" type='create' [addedMembers]=\"memberList\"></app-member-list>\r\n\r\n  <div class=\"buttons\">\r\n    <app-button variant=\"primary\" [pending]=\"createSubscription && !createSubscription.closed\" i18n>Save</app-button>\r\n    <app-button variant=\"secondary\" type=\"button\" [routerLink]=\"['/', workspaceId]\" i18n>Cancel</app-button>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "CreateWorkspacePage",
            "id": "component-CreateWorkspacePage-bddee5e38d2bc83c69c8e190a608ba30f1c36190bdaa1299689c022eeee90f9730a6336e50c25d93282a7a7347f4c5c3a7eb74d456f30e2c07e9c6c7baa9d964",
            "file": "src/app/dashboard/pages/create-workspace/create-workspace.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-workspace-page",
            "styleUrls": [
                "./create-workspace.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./create-workspace.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace creation.</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nSubscription to the workspace creation.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for the workspace creation.</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nForm group for the workspace creation.\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "submitCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.\n",
                    "description": "<p>Creates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Create workspace page component.</p>\n",
            "rawdescription": "\n\nCreate workspace page component.\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { maxLengthValidator } from '@main/validators/max-length.validator';\nimport { Subscription } from 'rxjs';\nimport { Page } from 'src/app/_main/decorators/page.decorator';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { WorkspaceService } from '../../services/workspace.service';\n\n/**\n * Create workspace page component.\n */\n@Page()\n@Component({\n  selector: 'app-create-workspace-page',\n  templateUrl: './create-workspace.page.html',\n  styleUrls: ['./create-workspace.page.scss'],\n})\nexport class CreateWorkspacePage {\n  /**\n   * Form group for the workspace creation.\n   */\n  public form = new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n  });\n\n  /**\n   * Subscription to the workspace creation.\n   */\n  public createSubscription?: Subscription;\n\n  /**\n   * Default constructor. Injects the Workspace and Router service.\n   * @param workspaceService Workspace service\n   * @param router Router service\n   */\n  constructor(private workspaceService: WorkspaceService, private router: Router) {}\n\n  /**\n   * Creates a new workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\n   * Otherwise, displays an error message.\n   */\n  public submitCreate(): void {\n    if (!this.createSubscription?.closed && this.createSubscription) return;\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (this.form.invalid) return;\n\n    this.createSubscription = this.workspaceService.create(this.form.value).subscribe(() => {\n      this.router.navigate(['/']).then(() => {\n        window.location.reload();\n      });\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n  padding: 4rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  margin-top: 1rem;\r\n\r\n  &>* {\r\n    display: block;\r\n    margin-right: 1rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./create-workspace.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor. Injects the Workspace and Router service.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "rawdescription": "\n\nDefault constructor. Injects the Workspace and Router service.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1073,
                            "end": 1089,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "workspaceService"
                        },
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1067,
                            "end": 1072,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Workspace service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1120,
                            "end": 1126,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1114,
                            "end": 1119,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Router service</p>\n"
                    }
                ]
            },
            "templateData": "<form [formGroup]=\"form\" (submit)=\"submitCreate()\">\r\n  <h2 class=\"typo-heading-5 mb-5\" i18n>Create new workspace</h2>\r\n  <app-input formControlName=\"name\" type=\"text\" placeholder=\"New workspace\" floatingLabel=\"Workspace name\"\r\n    i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n  <div class=\"buttons\">\r\n    <app-button variant=\"primary\" [pending]=\"createSubscription && !createSubscription.closed\" i18n>Save</app-button>\r\n    <app-button variant=\"secondary\" type=\"button\" routerLink=\"/\" i18n>Cancel</app-button>\r\n  </div>\r\n\r\n</form>\r\n"
        },
        {
            "name": "DeleteAccountPage",
            "id": "component-DeleteAccountPage-9da66e716084ece0adaacf83b8385db182061270e597e3faa1b0f1d4b3334acc5842e5c33f1e215da72ab894176c9526aac3e4ded340acbeed8230f4bcd2d2a0",
            "file": "src/app/auth/pages/delete-account/delete-account.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-account.page",
            "styleUrls": [
                "./delete-account.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-account.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteAccount",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-delete-account.page',\n  templateUrl: './delete-account.page.html',\n  styleUrls: ['./delete-account.page.scss'],\n})\nexport class DeleteAccountPage implements OnInit {\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    const { token } = this.activatedRoute.snapshot.queryParams;\n    this.deleteAccount(token);\n  }\n\n  deleteAccount(token: string) {\n    if (token) {\n      this.authService.deleteAccountConfirmation(token).subscribe(() => {});\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\r\n  width: calc(100% - 80px);\r\n  height: 64px;\r\n  margin-top: 20px;\r\n  background-image: url('/assets/metadata/logo_with_name.svg');\r\n  background-position: 0 50%;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n}\r\n\r\n.main {\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-neutral-800);\r\n\r\n  .box {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .form-side {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      padding: 4rem;\r\n      background-color: var(--color-gray-800);\r\n\r\n      h2 {\r\n        margin-bottom: 0.5rem;\r\n      }\r\n\r\n      p {\r\n        margin-bottom: 1.5rem;\r\n      }\r\n\r\n      app-input {\r\n        width: 100%;\r\n      }\r\n\r\n      app-button {\r\n        align-self: flex-end;\r\n      }\r\n\r\n      a {\r\n        color: var(--color-link);\r\n        cursor: pointer;\r\n        transition: color 0.2s ease;\r\n\r\n        &:hover {\r\n          color: var(--color-link-hover);\r\n        }\r\n      }\r\n    }\r\n\r\n    .image-side {\r\n      background-color: var(--color-gray-700);\r\n    }\r\n  }\r\n}\r\n\r\n@screen sm {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen md {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen lg {\r\n  .main {\r\n    .box {\r\n      width: 950px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 450px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen xl {\r\n  .main {\r\n    .box {\r\n      width: 1240px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 520px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 720px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./delete-account.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"main\">\r\n  <section class=\"box\">\r\n    <section class=\"form-side\">\r\n      <div class=\"logo\" routerLink=\"/\"></div>\r\n      <div>\r\n        <h2 class=\"typo-heading-5\" i18n>Your account has been deleted.</h2>\r\n        <p class=\"typo-body\" i18n>If you are going to revive your account, you can log in to your account <a\r\n            routerLink=\"/auth/login\">click here to log in</a> </p>\r\n      </div>\r\n    </section>\r\n    <section class=\"image-side\">\r\n\r\n    </section>\r\n  </section>\r\n</section>\r\n"
        },
        {
            "name": "DialogOutletComponent",
            "id": "component-DialogOutletComponent-1befe28ba027db4214eba7919fc57a5295340868a91cbd5ef5ebcae4f163e71dce1a8d4762ef0ba90b37fd446f8ac56d6996b4383840dae46ab68849ae0389bc",
            "file": "src/app/_main/components/dialog-outlet/dialog-outlet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-outlet",
            "styleUrls": [
                "./dialog-outlet.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-outlet.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "outlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "DialogOutlet",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "host",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerDirective",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "ViewContainerDirective, {static: true}"
                        }
                    ]
                },
                {
                    "name": "width",
                    "defaultValue": "'0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.width'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createInjector",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dialogRef",
                            "type": "DialogRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dialogRef",
                            "type": "DialogRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadComponent",
                    "args": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "injector",
                            "type": "Injector",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderDialog",
                    "args": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.width",
                    "defaultValue": "'0px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Injector, Input, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogRef } from '@main/classes/dialog-ref.class';\nimport { ViewContainerDirective } from '@main/directives/view-container.directive';\nimport { DialogOutlet, DialogService } from '@main/services/dialog.service';\nimport { take } from 'rxjs';\n\n@Component({\n  selector: 'app-dialog-outlet',\n  templateUrl: './dialog-outlet.component.html',\n  styleUrls: ['./dialog-outlet.component.scss'],\n})\nexport class DialogOutletComponent {\n  @ViewChild(ViewContainerDirective, { static: true }) host!: ViewContainerDirective;\n  @Input() set outlet(outlet: DialogOutlet) {\n    this.dialogService.registerOutlet(outlet, this);\n  }\n  @HostBinding('style.width') width = '0px';\n\n  constructor(private dialogService: DialogService, private injector: Injector) {}\n\n  renderDialog(component: any, data: any): DialogRef {\n    const dialogRef = new DialogRef();\n    const injector = this.createInjector(data, dialogRef);\n\n    dialogRef\n      .beforeClosed()\n      .pipe(take(1))\n      .subscribe(() => {\n        this.clearComponent();\n      });\n\n    this.loadComponent(component, injector);\n    return dialogRef;\n  }\n\n  private loadComponent(component: any, injector: Injector) {\n    const viewContainerRef = this.host.viewContainerRef;\n    viewContainerRef.clear();\n\n    const _componentRef = viewContainerRef.createComponent(component, { injector });\n    this.show();\n  }\n\n  private clearComponent() {\n    this.hide();\n    setTimeout(() => {\n      const viewContainerRef = this.host.viewContainerRef;\n      viewContainerRef.clear();\n    }, 500);\n  }\n\n  private createInjector(data: any, dialogRef: DialogRef) {\n    return Injector.create({\n      providers: [\n        { provide: MAT_DIALOG_DATA, useValue: data },\n        { provide: MatDialogRef, useValue: dialogRef },\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private show() {\n    this.width = '450px';\n  }\n\n  private hide() {\n    this.width = '0px';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  overflow: hidden;\r\n  width: 0;\r\n  flex-shrink: 0;\r\n  transition: width .4s ease;\r\n}\r\n\r\n.dialog-outlet {\r\n  width: 450px;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n}",
                    "styleUrl": "./dialog-outlet.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "outlet": {
                    "name": "outlet",
                    "setSignature": {
                        "name": "outlet",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "outlet",
                                "type": "DialogOutlet",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "outlet",
                                "type": "DialogOutlet",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"dialog-outlet\">\r\n  <ng-template view-container></ng-template>\r\n</div>"
        },
        {
            "name": "EditProjectMembersPage",
            "id": "component-EditProjectMembersPage-70d636747ecc2287ff202fc3fe31c229e12c1f4726853c5ad9eed8341280bd3b34b925109048f4c97f0fed61cfe54b56ec337147157d94a4b44b5137b5bd3261",
            "file": "src/app/dashboard/pages/edit-project-members/edit-project-members.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-project-members",
            "styleUrls": [
                "./edit-project-members.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-project-members.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n    newWorkspaceId: new FormControl(null),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for the workspace editing.</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nForm group for the workspace editing.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace getting.</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nSubscription to the workspace getting.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "project$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace updating.</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nSubscription to the workspace updating.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "workspaceList$",
                    "defaultValue": "this.workspaceService.list()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace[]>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "editProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editProjectWithWorkspace",
                    "args": [
                        {
                            "name": "newWorkspaceId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newWorkspaceId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads project data from the project service.\n",
                    "description": "<p>Loads project data from the project service.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2711,
                                "end": 2713,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2705,
                                "end": 2710,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project id</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttach to lifecycle hook to unsubscribe from all subscriptions.\n",
                    "description": "<p>Attach to lifecycle hook to unsubscribe from all subscriptions.</p>\n"
                },
                {
                    "name": "openAddMembersDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.\n",
                    "description": "<p>Updates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  AddMemberDialog,\n  AddMemberDialogData,\n} from '@dashboard/dialogs/add-member/add-member.dialog';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { MemberService } from '@dashboard/services/member.service';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DialogService } from '@main/services/dialog.service';\nimport { maxLengthValidator } from '@main/validators/max-length.validator';\nimport { Observable, Subscription } from 'rxjs';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { ProjectService } from '../../services/project.service';\nimport { WorkspaceService } from '../../services/workspace.service';\n\n@Component({\n  selector: 'app-edit-project-members',\n  templateUrl: './edit-project-members.page.html',\n  styleUrls: ['./edit-project-members.page.scss'],\n})\nexport class EditProjectMembersPage {\n  faPlus = faPlus;\n\n  /**\n   * Form group for the workspace editing.\n   */\n  public form = new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n    newWorkspaceId: new FormControl(null),\n  });\n\n  public project$!: Observable<Project>;\n  public workspaceList$: Observable<Workspace[]> = this.workspaceService.list();\n  // public workspace: Workspace = this.workspaceService.get(id);\n\n  /**\n   * Subscription to the workspace updating.\n   */\n  public updateSubscription?: Subscription;\n  /**\n   * Subscription to the workspace getting.\n   */\n  private getSubscription?: Subscription;\n\n  private workspaceId!: number;\n  public projectId!: number;\n\n  /**\n   * Default constructor. Injects the Workspace, Router service and ActivatedRoute service.\n   * @param workspaceService Workspace service\n   * @param router Router service\n   * @param activatedRoute ActivatedRoute service\n   */\n  constructor(\n    private workspaceService: WorkspaceService,\n    private projectService: ProjectService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dialogService: DialogService,\n    private memberService: MemberService,\n  ) {\n    const { workspaceId, projectId } = this.activatedRoute.snapshot.params;\n\n    this.workspaceId = workspaceId;\n    this.projectId = projectId;\n\n    this.form.addControl('workspaceId', new FormControl(workspaceId));\n    this.form.addControl('id', new FormControl(projectId));\n\n    this.loadProject(projectId);\n  }\n\n  /**\n   * Loads project data from the project service.\n   * @param id project id\n   */\n  public loadProject(id: number) {\n    this.project$ = this.projectService.get(id);\n    this.getSubscription = this.project$.subscribe((workspace) => {\n      this.form.patchValue(workspace);\n    });\n  }\n\n  /**\n   * Updates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\n   * Otherwise, displays an error message.\n   */\n  public submitUpdate() {\n    if (!this.updateSubscription?.closed && this.updateSubscription) return;\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (this.form.invalid) return;\n\n    let newWorkspaceId: number = this.form.get('newWorkspaceId')?.value;\n\n    if (this.workspaceId != newWorkspaceId && newWorkspaceId != null) {\n      this.editProjectWithWorkspace(newWorkspaceId);\n    } else {\n      this.editProject();\n    }\n  }\n\n  public editProjectWithWorkspace(newWorkspaceId: number) {\n    this.updateSubscription = this.projectService\n      .changeWorkspace(this.projectId, newWorkspaceId)\n      .subscribe(() => {\n        this.updateSubscription = this.projectService.update(this.form.value).subscribe(() => {\n          this.router.navigate(['/', newWorkspaceId]);\n        });\n      });\n  }\n\n  public editProject() {\n    this.updateSubscription = this.projectService.update(this.form.value).subscribe(() => {\n      this.router.navigate(['/', this.workspaceId]);\n    });\n  }\n\n  openAddMembersDialog() {\n    this.dialogService\n      .open(AddMemberDialog, {\n        projectId: this.projectId,\n      } as AddMemberDialogData)\n      .afterClosed()\n      .subscribe((result) => {\n        if (result) {\n          this.memberService.add(result, [this.projectId]).subscribe(() => {\n            location.reload();\n          });\n        }\n      });\n  }\n\n  /**\n   * Attach to lifecycle hook to unsubscribe from all subscriptions.\n   */\n  ngOnDestroy(): void {\n    if (this.getSubscription) this.getSubscription.unsubscribe();\n    if (this.updateSubscription) this.updateSubscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n\r\nform {\r\n  padding-left: 10px;\r\n}\r\n\r\n.button {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  margin-top: -60px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.app-member-list {\r\n  padding-left: 10px;\r\n}\r\n\r\n.app-button {\r\n  display: flex;\r\n  margin-top: 2rem;\r\n}\r\n",
                    "styleUrl": "./edit-project-members.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor. Injects the Workspace, Router service and ActivatedRoute service.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "rawdescription": "\n\nDefault constructor. Injects the Workspace, Router service and ActivatedRoute service.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1933,
                            "end": 1949,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "workspaceService"
                        },
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1927,
                            "end": 1932,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Workspace service</p>\n"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1980,
                            "end": 1986,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1974,
                            "end": 1979,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Router service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 2014,
                            "end": 2028,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "activatedRoute"
                        },
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2008,
                            "end": 2013,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ActivatedRoute service</p>\n"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-view-options title=\"Edit project: \" [project]=\"(project$ | async)!\"></app-view-options>\r\n\r\n<div class=\"button\">\r\n  <app-button [icon]=\"faPlus\" variant=\"primary\" (click)=\"openAddMembersDialog()\">Add member</app-button>\r\n</div>\r\n\r\n<app-member-list></app-member-list>\r\n"
        },
        {
            "name": "EditProjectPage",
            "id": "component-EditProjectPage-a9433d5fd0bb21a49490e2a8147c2b24045ab21599d9c791c0fe23736acdb3c6927224ee6e717c2da19d01a1ae5404d98f69f12d24c7956544fec1ddf185e01d",
            "file": "src/app/dashboard/pages/edit-project/edit-project.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-project",
            "styleUrls": [
                "./edit-project.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-project.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n    newWorkspaceId: new FormControl(null),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for the workspace editing.</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nForm group for the workspace editing.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace getting.</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nSubscription to the workspace getting.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "project$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace updating.</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nSubscription to the workspace updating.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceList$",
                    "defaultValue": "this.workspaceService.list()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace[]>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "editProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "editProjectWithWorkspace",
                    "args": [
                        {
                            "name": "newWorkspaceId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "newWorkspaceId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads project data from the project service.\n",
                    "description": "<p>Loads project data from the project service.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2323,
                                "end": 2325,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2317,
                                "end": 2322,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>project id</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAttach to lifecycle hook to unsubscribe from all subscriptions.\n",
                    "description": "<p>Attach to lifecycle hook to unsubscribe from all subscriptions.</p>\n"
                },
                {
                    "name": "submitUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.\n",
                    "description": "<p>Updates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { maxLengthValidator } from '@main/validators/max-length.validator';\nimport { Observable, Subscription } from 'rxjs';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { ProjectService } from '../../services/project.service';\nimport { WorkspaceService } from '../../services/workspace.service';\n\n@Component({\n  selector: 'app-edit-project',\n  templateUrl: './edit-project.page.html',\n  styleUrls: ['./edit-project.page.scss'],\n})\nexport class EditProjectPage implements OnDestroy {\n  /**\n   * Form group for the workspace editing.\n   */\n  public form = new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n    newWorkspaceId: new FormControl(null),\n  });\n\n  public project$!: Observable<Project>;\n  public workspaceList$: Observable<Workspace[]> = this.workspaceService.list();\n  // public workspace: Workspace = this.workspaceService.get(id);\n\n  /**\n   * Subscription to the workspace updating.\n   */\n  public updateSubscription?: Subscription;\n  /**\n   * Subscription to the workspace getting.\n   */\n  private getSubscription?: Subscription;\n\n  public workspaceId!: number;\n  public projectId!: number;\n\n  /**\n   * Default constructor. Injects the Workspace, Router service and ActivatedRoute service.\n   * @param workspaceService Workspace service\n   * @param router Router service\n   * @param activatedRoute ActivatedRoute service\n   */\n  constructor(\n    private workspaceService: WorkspaceService,\n    private projectService: ProjectService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) {\n    const { workspaceId, projectId } = this.activatedRoute.snapshot.params;\n\n    this.workspaceId = Number(workspaceId);\n    this.projectId = Number(projectId);\n\n    this.form.addControl('workspaceId', new FormControl(workspaceId));\n    this.form.addControl('id', new FormControl(projectId));\n\n    this.loadProject(projectId);\n  }\n\n  /**\n   * Loads project data from the project service.\n   * @param id project id\n   */\n  public loadProject(id: number) {\n    this.project$ = this.projectService.get(id);\n    this.getSubscription = this.project$.subscribe((project) => {\n      this.form.patchValue(project);\n    });\n\n    this.workspaceList$.subscribe((workspaces) => {\n      const workspace = workspaces.find((workspace) => workspace.id === this.workspaceId);\n      if (workspace) {\n        this.form.patchValue({\n          newWorkspaceId: workspace.id,\n        });\n      }\n    });\n  }\n\n  /**\n   * Updates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\n   * Otherwise, displays an error message.\n   */\n  public submitUpdate() {\n    if (!this.updateSubscription?.closed && this.updateSubscription) return;\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (this.form.invalid) return;\n\n    let newWorkspaceId: number = this.form.get('newWorkspaceId')?.value;\n\n    if (this.workspaceId != newWorkspaceId && newWorkspaceId != null) {\n      this.editProjectWithWorkspace(newWorkspaceId);\n    } else {\n      this.editProject();\n    }\n  }\n\n  public editProjectWithWorkspace(newWorkspaceId: number) {\n    this.updateSubscription = this.projectService\n      .changeWorkspace(this.projectId, newWorkspaceId)\n      .subscribe(() => {\n        this.updateSubscription = this.projectService.update(this.form.value).subscribe(() => {\n          this.router.navigate(['/', newWorkspaceId]).then(() => {\n            location.reload();\n          });\n        });\n      });\n  }\n\n  public editProject() {\n    this.updateSubscription = this.projectService.update(this.form.value).subscribe(() => {\n      this.router.navigate(['/', this.workspaceId]);\n    });\n  }\n\n  /**\n   * Attach to lifecycle hook to unsubscribe from all subscriptions.\n   */\n  ngOnDestroy(): void {\n    if (this.getSubscription) this.getSubscription.unsubscribe();\n    if (this.updateSubscription) this.updateSubscription.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n\r\nform {\r\n  padding-left: 10px;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  margin-top: 1rem;\r\n\r\n  &>* {\r\n    display: block;\r\n    margin-right: 1rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./edit-project.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor. Injects the Workspace, Router service and ActivatedRoute service.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "rawdescription": "\n\nDefault constructor. Injects the Workspace, Router service and ActivatedRoute service.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1613,
                            "end": 1629,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "workspaceService"
                        },
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1607,
                            "end": 1612,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Workspace service</p>\n"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1660,
                            "end": 1666,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1654,
                            "end": 1659,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Router service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1694,
                            "end": 1708,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "activatedRoute"
                        },
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1688,
                            "end": 1693,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ActivatedRoute service</p>\n"
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<app-view-options title=\"Edit project: \" [project]=\"(project$ | async)!\"></app-view-options>\r\n\r\n<form [formGroup]=\"form\" (submit)=\"submitUpdate()\">\r\n  <div>\r\n    <app-input formControlName=\"name\" type=\"text\" placeholder=\"New project\" floatingLabel=\"Project name\"\r\n      i18n-floatingLabel i18n-placeholder></app-input>\r\n  </div>\r\n\r\n  <div>\r\n    <h2 class=\"typo-heading-5 mb-5\" i18n>Workspace:</h2>\r\n    <app-select formControlName=\"newWorkspaceId\" floatingLabel=\"Workspace\" i18n-floatingLabel>\r\n      <app-option *ngFor=\"let workspace of workspaceList$ | async\" [value]=\"workspace.id\">{{ workspace.name }}\r\n      </app-option>\r\n    </app-select>\r\n  </div>\r\n\r\n  <div class=\"modules\">\r\n    <h2 class=\"typo-heading-5 mb-5\" i18n>Modules</h2>\r\n  </div>\r\n  <app-integration-github [projectId]=\"projectId\"></app-integration-github>\r\n  <div class=\"buttons\">\r\n    <app-button variant=\"primary\" [pending]=\"updateSubscription && !updateSubscription.closed\" i18n>Save</app-button>\r\n    <app-button variant=\"secondary\" type=\"button\" [routerLink]=\"['/', workspaceId, projectId]\" i18n>Cancel</app-button>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "EditWorkspacePage",
            "id": "component-EditWorkspacePage-9c8c5b3ed59ff70728d36f3cae16c8a65941553c031d599ee2bdb3bc3fcd2ab3b3dfdc8a78b539cd77d46a4324439ce34f405518c7a649a59ede52e497488531",
            "file": "src/app/dashboard/pages/edit-workspace/edit-workspace.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-workspace-page",
            "styleUrls": [
                "./edit-workspace.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-workspace.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n    id: new FormControl(-1),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for the workspace editing.</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nForm group for the workspace editing.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace getting.</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nSubscription to the workspace getting.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "<p>Subscription to the workspace updating.</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nSubscription to the workspace updating.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspace$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadWorkspace",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads workspace data from the workspace service.\n",
                    "description": "<p>Loads workspace data from the workspace service.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1732,
                                "end": 1734,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1726,
                                "end": 1731,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Workspace id</p>\n"
                        }
                    ]
                },
                {
                    "name": "submitUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.\n",
                    "description": "<p>Updates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\nOtherwise, displays an error message.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Edit workspace page component.</p>\n",
            "rawdescription": "\n\nEdit workspace page component.\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { maxLengthValidator } from '@main/validators/max-length.validator';\nimport { Observable, Subscription } from 'rxjs';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { WorkspaceService } from '../../services/workspace.service';\n\n/**\n * Edit workspace page component.\n */\n@Component({\n  selector: 'app-edit-workspace-page',\n  templateUrl: './edit-workspace.page.html',\n  styleUrls: ['./edit-workspace.page.scss'],\n})\nexport class EditWorkspacePage {\n  /**\n   * Form group for the workspace editing.\n   */\n  public form = new FormGroup({\n    name: new FormControl('', [requiredValidator(), maxLengthValidator(50)], []),\n    id: new FormControl(-1),\n  });\n\n  public workspace$!: Observable<Workspace>;\n\n  /**\n   * Subscription to the workspace updating.\n   */\n  public updateSubscription?: Subscription;\n  /**\n   * Subscription to the workspace getting.\n   */\n  private getSubscription?: Subscription;\n\n  /**\n   * Default constructor. Injects the Workspace, Router service and ActivatedRoute service.\n   * @param workspaceService Workspace service\n   * @param router Router service\n   * @param activatedRoute ActivatedRoute service\n   */\n  constructor(\n    private workspaceService: WorkspaceService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) {\n    const { workspaceId } = this.activatedRoute.snapshot.params;\n\n    this.loadWorkspace(workspaceId);\n  }\n\n  /**\n   * Loads workspace data from the workspace service.\n   * @param id Workspace id\n   */\n  public loadWorkspace(id: number) {\n    this.workspace$ = this.workspaceService.get(id);\n    this.getSubscription = this.workspace$.subscribe((workspace) => {\n      this.form.patchValue(workspace);\n    });\n  }\n\n  /**\n   * Updates a workspace. Passes the form data to the workspace service. Then navigates to the workspace list if form was valid.\n   * Otherwise, displays an error message.\n   */\n  public submitUpdate() {\n    if (!this.updateSubscription?.closed && this.updateSubscription) return;\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (this.form.invalid) return;\n\n    this.updateSubscription = this.workspaceService.update(this.form.value).subscribe(() => {\n      this.router.navigate(['/']).then(() => {\n        window.location.reload();\n      });\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n  padding: 4rem;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  margin-top: 1rem;\r\n\r\n  &>* {\r\n    display: block;\r\n    margin-right: 1rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./edit-workspace.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor. Injects the Workspace, Router service and ActivatedRoute service.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "rawdescription": "\n\nDefault constructor. Injects the Workspace, Router service and ActivatedRoute service.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1286,
                            "end": 1302,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "workspaceService"
                        },
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1280,
                            "end": 1285,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Workspace service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1333,
                            "end": 1339,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1327,
                            "end": 1332,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Router service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1367,
                            "end": 1381,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "activatedRoute"
                        },
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1361,
                            "end": 1366,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>ActivatedRoute service</p>\n"
                    }
                ]
            },
            "templateData": "<form [formGroup]=\"form\" (submit)=\"submitUpdate()\">\r\n  <h2 class=\"typo-heading-5 mb-5\" i18n>Edit workspace: {{ (workspace$ | async)?.name }}</h2>\r\n  <app-input formControlName=\"name\" type=\"text\" placeholder=\"New workspace\" floatingLabel=\"Workspace name\"\r\n    i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n  <div class=\"buttons\">\r\n    <app-button variant=\"primary\" [pending]=\"updateSubscription && !updateSubscription.closed\" i18n>Save</app-button>\r\n    <app-button variant=\"secondary\" type=\"button\" routerLink=\"/\" i18n>Cancel</app-button>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "FiltersComponent",
            "id": "component-FiltersComponent-02d43ea810e1be1671f663ad673d3847f611c5116de2bd26eb9817ff36806f5db4962ea9ae5c2be0378f56e59800da2a6bc959a459632188e021efdaf9bca594",
            "file": "src/app/_main/components/filters/filters.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-filters",
            "styleUrls": [
                "./filters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filters.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Filter[]",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_filters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormArray",
                    "optional": true,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        158
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getControl",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormArray, FormControl, NgControl } from '@angular/forms';\nimport { ControlAccessor } from '@main/classes/control-accessor.class';\nimport { Filter } from '@main/interfaces/filters.interface';\n\n@Component({\n  selector: 'app-filters',\n  templateUrl: './filters.component.html',\n  styleUrls: ['./filters.component.scss'],\n})\nexport class FiltersComponent extends ControlAccessor {\n  @Input() set filters(filters: Filter[]) {\n    this.form = new FormArray(\n      filters.map((filter) => {\n        return new FormControl(filter.value);\n      }),\n    );\n    this._filters = filters;\n  }\n\n  public get filters() {\n    return this._filters;\n  }\n\n  private _filters: Filter[] = [];\n  public form?: FormArray;\n\n  constructor(public override ngControl: NgControl) {\n    super(ngControl);\n  }\n\n  public getControl(index: number) {\n    const control = (this.form?.controls[index] || new FormControl()) as FormControl;\n    return control;\n  }\n\n  public saveFilters() {\n    if (!this.form) return;\n\n    let formValue: Filter[] = [];\n\n    for (const [index, filter] of this.filters.entries()) {\n      const filterValue = Number(this.form?.controls[index].value) as 0 | 1;\n      filter.value = filterValue;\n      formValue.push(filter);\n    }\n\n    this.control.setValue(formValue);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filters {\r\n  width: 100%;\r\n\r\n  app-button {\r\n    width: 100%;\r\n\r\n    ::ng-deep button {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./filters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ControlAccessor",
            "accessors": {
                "filters": {
                    "name": "filters",
                    "setSignature": {
                        "name": "filters",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "filters",
                                "type": "Filter[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 12,
                        "jsdoctags": [
                            {
                                "name": "filters",
                                "type": "Filter[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "filters",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                }
            },
            "templateData": "<div class=\"filters\">\r\n  <ng-container *ngFor=\"let filter of filters; index as i\">\r\n    <ng-container [ngSwitch]=\"filter.type\">\r\n      <div class=\"filter\" *ngSwitchCase=\"'checkbox'\">\r\n        <app-checkbox [formControl]=\"getControl(i)\">{{ filter.label }}</app-checkbox>\r\n      </div>\r\n      <p *ngSwitchDefault>Unknown filter type: {{ filter.type }}</p>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <app-button variant=\"primary\" (click)=\"saveFilters()\" i18n>Save filters</app-button>\r\n</div>"
        },
        {
            "name": "ForgotPasswordPage",
            "id": "component-ForgotPasswordPage-5e27b0a04e05b478fc68887df9daa78f7e081866da03d46343453196928f2839f232e13c36c0ac214967841aa1fbb16702f5a546ce5b3ea779e4dab989b2e2b3",
            "file": "src/app/auth/pages/forgot-password/forgot-password.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-page",
            "styleUrls": [
                "./forgot-password.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faAngleDown",
                    "defaultValue": "faAngleDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [requiredValidator()], []),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for reset password.</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nForm group for reset password.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resetSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport { requiredValidator } from '@main/validators/required.validator';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-forgot-page',\n  templateUrl: './forgot-password.page.html',\n  styleUrls: ['./forgot-password.page.scss'],\n})\nexport class ForgotPasswordPage {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  faAngleDown = faAngleDown;\n\n  private resetSubscription?: Subscription;\n\n  /**\n   * Form group for reset password.\n   */\n  public form = new FormGroup({\n    email: new FormControl('', [requiredValidator()], []),\n  });\n\n  resetPassword() {\n    if (this.resetSubscription && !this.resetSubscription.closed) return;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.valid) {\n      this.resetSubscription = this.authService.resetPassword(this.form.value).subscribe();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\r\n  width: calc(100% - 80px);\r\n  height: 64px;\r\n  margin-top: 20px;\r\n  background-image: url('/assets/metadata/logo_with_name.svg');\r\n  background-position: 0 50%;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n}\r\n\r\n.main {\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-neutral-800);\r\n\r\n  .box {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .return-button {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      align-self: flex-start;\r\n      margin: 0 0 0 40px;\r\n\r\n      &:hover {\r\n        a {\r\n          color: var(--color-link-hover);\r\n        }\r\n\r\n        app-icon {\r\n          color: var(--color-link-hover);\r\n        }\r\n      }\r\n\r\n      app-icon {\r\n        display: inline-block;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin-right: 5px;\r\n        color: var(--color-link);\r\n        transform: rotate(90deg);\r\n      }\r\n\r\n      a {\r\n        color: var(--color-link);\r\n        cursor: pointer;\r\n        transition: color 0.2s ease;\r\n      }\r\n    }\r\n\r\n    .form-side {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      background-color: var(--color-gray-800);\r\n\r\n      form {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        justify-content: center;\r\n        padding: 4rem;\r\n\r\n        h2 {\r\n          margin-bottom: 0.5rem;\r\n        }\r\n\r\n        p {\r\n          margin-bottom: 1.5rem;\r\n        }\r\n\r\n        app-input {\r\n          width: 100%;\r\n        }\r\n\r\n        app-button {\r\n          align-self: flex-end;\r\n        }\r\n      }\r\n    }\r\n\r\n    .image-side {\r\n      background-color: var(--color-gray-700);\r\n    }\r\n  }\r\n}\r\n\r\n@screen sm {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen md {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen lg {\r\n  .main {\r\n    .box {\r\n      width: 950px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 450px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen xl {\r\n  .main {\r\n    .box {\r\n      width: 1240px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 520px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 720px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./forgot-password.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section class=\"main\">\r\n  <section class=\"box\">\r\n    <section class=\"form-side\">\r\n      <div class=\"logo\" routerLink=\"/\"></div>\r\n      <div class=\"return-button\" routerLink=\"/auth/login\">\r\n        <app-icon [icon]=\"faAngleDown\" size=\"16px\"></app-icon>\r\n        <a>Back to login page</a>\r\n      </div>\r\n      <form [formGroup]=\"form\" (submit)=\"resetPassword()\">\r\n        <div>\r\n          <h2 class=\"typo-heading-5\" i18n>Reset password</h2>\r\n          <p class=\"typo-body\" i18n>When you enter your email address, you will receive an email with a link to reset your password.</p>\r\n        </div>\r\n\r\n        <app-input formControlName=\"email\" type=\"email\" placeholder=\"name@example.com\" floatingLabel=\"Email\" i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n        <app-button variant=\"primary\" i18n>Reset password</app-button>\r\n\r\n      </form>\r\n    </section>\r\n    <section class=\"image-side\">\r\n\r\n    </section>\r\n  </section>\r\n</section>\r\n"
        },
        {
            "name": "GithubIntegrationPage",
            "id": "component-GithubIntegrationPage-ba483071655d90d593b6af4f16950843550d00e6a09344278e0413f124d9c1fb30c3e27154a8c398afe31634fcd1cf0a0adbe732d9a4bd8ef6e71d221e51db43",
            "file": "src/app/dashboard/pages/github-integration/github-integration.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-github-integration-page",
            "styleUrls": [
                "./github-integration.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./github-integration.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { GitIntegrationService } from '@dashboard/services/git-integration.service';\n\n@Component({\n  selector: 'app-github-integration-page',\n  templateUrl: './github-integration.page.html',\n  styleUrls: ['./github-integration.page.scss'],\n})\nexport class GithubIntegrationPage implements OnInit {\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private gitIntegrationService: GitIntegrationService,\n  ) {}\n\n  ngOnInit() {\n    const { installation_id, setup_action } = this.activatedRoute.snapshot.queryParams;\n\n    console.log(installation_id, setup_action, setup_action !== 'update');\n\n    if (installation_id && setup_action && setup_action !== 'update') {\n      this.gitIntegrationService.postGitHubIntegration(installation_id).subscribe();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  height: 100%;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\nh2 {\r\n  color: var(--color-text);\r\n  font-size: 1.5rem;\r\n}\r\n\r\np {\r\n  color: var(--color-text);\r\n  opacity: 0.75;\r\n}\r\n",
                    "styleUrl": "./github-integration.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 i18n>\r\n  GitHub connection success\r\n</h2>\r\n<p i18n>\r\n  Now you can close this page\r\n</p>\r\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-2452ebf909c3eabf54783f5eaf884cea120132a9cf947a3f7bdeb9a782c4138df5bc457ee539020aa6b8efa536e10a5423899711330ede4253c91d4d295acdb7",
            "file": "src/app/_main/components/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon to display. Can be a string or an icon definition.\nFor example:\n\nFor the icon \"fa fa-question\" you can use:\n```html\n<app-icon [icon]=\"faQuestion\"></app-icon>\n```\n\nFor the icon \"mat search\" you can use:\n```html\n<app-icon icon=\"matSearch\"></app-icon>\n```\n",
                    "description": "<p>Icon to display. Can be a string or an icon definition.\nFor example:</p>\n<p>For the icon &quot;fa fa-question&quot; you can use:</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;app-icon [icon]=&quot;faQuestion&quot;&gt;&lt;/app-icon&gt;</code></pre></div><p>For the icon &quot;mat search&quot; you can use:</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;app-icon icon=&quot;matSearch&quot;&gt;&lt;/app-icon&gt;</code></pre></div>",
                    "line": 35,
                    "type": "string | IconDefinition",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'24px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIcon size. Defaults to 1.5em. Supports all CSS units.\nFor example: 24px, 1.5em, etc.\n",
                    "description": "<p>Icon size. Defaults to 1.5em. Supports all CSS units.\nFor example: 24px, 1.5em, etc.</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | IconDefinition",
                    "optional": false,
                    "description": "<p>Private icon variable to use getter and setter for props.</p>\n",
                    "line": 95,
                    "rawdescription": "\n\nPrivate icon variable to use getter and setter for props.\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "'question'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconName",
                    "optional": false,
                    "description": "<p>Name getter</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nName getter\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "prefix",
                    "defaultValue": "'fas'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconPrefix",
                    "optional": false,
                    "description": "<p>Prefix getter</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nPrefix getter\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBinding to the hosts height attribute to use the size input.\n",
                    "description": "<p>Binding to the hosts height attribute to use the size input.</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBinding to hosts width attribute to use the size input.\n",
                    "description": "<p>Binding to hosts width attribute to use the size input.</p>\n",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "<p>Icon component. Supports material icons and font-awesome icons.</p>\n",
            "rawdescription": "\n\nIcon component. Supports material icons and font-awesome icons.\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\nimport { IconName, IconPrefix } from '@fortawesome/fontawesome-svg-core';\nimport { Utils } from '../../classes/utils.class';\nimport { faQuestion, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\n/**\n * Icon component. Supports material icons and font-awesome icons.\n */\n@Component({\n  selector: 'app-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n})\nexport class IconComponent {\n  /**\n   * Icon size. Defaults to 1.5em. Supports all CSS units.\n   * For example: 24px, 1.5em, etc.\n   */\n  @Input() size: string = '24px';\n\n  /**\n   * Icon to display. Can be a string or an icon definition.\n   * For example:\n   *\n   * For the icon \"fa fa-question\" you can use:\n   * ```html\n   * <app-icon [icon]=\"faQuestion\"></app-icon>\n   * ```\n   *\n   * For the icon \"mat search\" you can use:\n   * ```html\n   * <app-icon icon=\"matSearch\"></app-icon>\n   * ```\n   */\n  @Input() set icon(value: string | IconDefinition) {\n    this._icon = value;\n\n    if (typeof value === 'string') {\n      const splitIndex = Utils.regexIndexOf(value, /[A-Z]/);\n\n      this.prefix = value.substring(0, splitIndex) as IconPrefix;\n      this.name = value.substring(splitIndex) as IconName;\n    } else {\n      this.prefix = value.prefix as IconPrefix;\n      this.name = value.iconName as IconName;\n    }\n  }\n\n  /**\n   * Icon getter\n   */\n  public get icon(): string | IconDefinition {\n    return this._icon;\n  }\n\n  /**\n   * Binding to hosts width attribute to use the size input.\n   */\n  @HostBinding('style.width') get width() {\n    return this.size;\n  }\n\n  /**\n   * Binding to the hosts height attribute to use the size input.\n   */\n  @HostBinding('style.height') get height() {\n    return this.size;\n  }\n\n  /**\n   * Getter to the icon definition. If no icon is found it returns the question icon.\n   */\n  public get iconDefinition(): IconDefinition {\n    if (typeof this._icon === 'string') {\n      return faQuestion;\n    }\n    return this._icon as IconDefinition;\n  }\n\n  /**\n   * Style host binding to set the icon size.\n   */\n  public get style() {\n    return {\n      'font-size': this.size,\n      width: this.size,\n      height: this.size,\n      'line-height': this.size,\n    };\n  }\n\n  /**\n   * Private icon variable to use getter and setter for props.\n   */\n  private _icon: string | IconDefinition = '';\n\n  /**\n   * Prefix getter\n   */\n  public prefix: IconPrefix = 'fas';\n\n  /**\n   * Name getter\n   */\n  public name: IconName = 'question';\n\n  /**\n   * Getter to get the icon name in snake case.\n   * For example:\n   *\n   * for `ShoppingCart` this function will return `shopping_cart`\n   */\n  public get snakeCaseName(): IconName {\n    return Utils.snakeCase(this.name) as IconName;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 24px;\r\n  height: 24px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 0;\r\n\r\n  fa-icon {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 24px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "icon": {
                    "name": "icon",
                    "setSignature": {
                        "name": "icon",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | IconDefinition",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "rawdescription": "\n\nIcon to display. Can be a string or an icon definition.\nFor example:\n\nFor the icon \"fa fa-question\" you can use:\n```html\n<app-icon [icon]=\"faQuestion\"></app-icon>\n```\n\nFor the icon \"mat search\" you can use:\n```html\n<app-icon icon=\"matSearch\"></app-icon>\n```\n",
                        "description": "<p>Icon to display. Can be a string or an icon definition.\nFor example:</p>\n<p>For the icon &quot;fa fa-question&quot; you can use:</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;app-icon [icon]=&quot;faQuestion&quot;&gt;&lt;/app-icon&gt;</code></pre></div><p>For the icon &quot;mat search&quot; you can use:</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">&lt;app-icon icon=&quot;matSearch&quot;&gt;&lt;/app-icon&gt;</code></pre></div>",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | IconDefinition",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "string | IconDefinition",
                        "line": 52,
                        "rawdescription": "\n\nIcon getter\n",
                        "description": "<p>Icon getter</p>\n"
                    }
                },
                "width": {
                    "name": "width",
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "",
                        "line": 59,
                        "rawdescription": "\n\nBinding to hosts width attribute to use the size input.\n",
                        "description": "<p>Binding to hosts width attribute to use the size input.</p>\n"
                    }
                },
                "height": {
                    "name": "height",
                    "getSignature": {
                        "name": "height",
                        "type": "",
                        "returnType": "",
                        "line": 66,
                        "rawdescription": "\n\nBinding to the hosts height attribute to use the size input.\n",
                        "description": "<p>Binding to the hosts height attribute to use the size input.</p>\n"
                    }
                },
                "iconDefinition": {
                    "name": "iconDefinition",
                    "getSignature": {
                        "name": "iconDefinition",
                        "type": "",
                        "returnType": "IconDefinition",
                        "line": 73,
                        "rawdescription": "\n\nGetter to the icon definition. If no icon is found it returns the question icon.\n",
                        "description": "<p>Getter to the icon definition. If no icon is found it returns the question icon.</p>\n"
                    }
                },
                "style": {
                    "name": "style",
                    "getSignature": {
                        "name": "style",
                        "type": "",
                        "returnType": "",
                        "line": 83,
                        "rawdescription": "\n\nStyle host binding to set the icon size.\n",
                        "description": "<p>Style host binding to set the icon size.</p>\n"
                    }
                },
                "snakeCaseName": {
                    "name": "snakeCaseName",
                    "getSignature": {
                        "name": "snakeCaseName",
                        "type": "",
                        "returnType": "IconName",
                        "line": 113,
                        "rawdescription": "\n\nGetter to get the icon name in snake case.\nFor example:\n\nfor `ShoppingCart` this function will return `shopping_cart`\n",
                        "description": "<p>Getter to get the icon name in snake case.\nFor example:</p>\n<p>for <code>ShoppingCart</code> this function will return <code>shopping_cart</code></p>\n"
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"prefix\">\r\n  <ng-container *ngSwitchCase=\"'fas'\">\r\n    <fa-icon [icon]=\"iconDefinition\" [ngStyle]=\"style\"></fa-icon>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'fab'\">\r\n    <fa-icon [icon]=\"iconDefinition\" [ngStyle]=\"style\"></fa-icon>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'mat'\">\r\n    <mat-icon [ngStyle]=\"style\">{{ snakeCaseName }}</mat-icon>\r\n  </ng-container>\r\n  <ng-container *ngSwitchCase=\"'cu'\">\r\n    <img [ngStyle]=\"style\" [src]=\"'assets/icons/' + snakeCaseName + '.svg'\" />\r\n  </ng-container>\r\n  <ng-container *ngSwitchDefault>\r\n    <mat-icon [ngStyle]=\"style\">question_mark</mat-icon>\r\n  </ng-container>\r\n</ng-container>"
        },
        {
            "name": "InputAssigneeComponent",
            "id": "component-InputAssigneeComponent-eb40f7d08f15b0452eab098cbd5d8e90b8f40344013aa1cab3d9482b5dba0a394c6022e3cdca754fc8eed86004bdeafef2cf81b9f087594f9d12e2bc106fc728",
            "file": "src/app/tasks/components/input-assignee/input-assignee.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NgControl, useClass: TestNgControl }"
                }
            ],
            "selector": "app-input-assignee",
            "styleUrls": [
                "./input-assignee.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-assignee.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "assignee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ProjectMember | null",
                    "decorators": []
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "Map | []",
                    "decorators": []
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_assignee",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectMember | null",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "assigneeColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Color",
                    "optional": true,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isOpen$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "members$",
                    "defaultValue": "new BehaviorSubject<(ProjectMember & { color: Color })[]>([] as any)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123,
                        158
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'overlay'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "member",
                            "type": "ProjectMember | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "member",
                            "type": "ProjectMember | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { UserUtils } from '@dashboard/classes/user.class';\nimport { ProjectMember } from '@dashboard/interfaces/project-member.interface';\nimport { ControlAccessor } from '@main/classes/control-accessor.class';\nimport { TaskService } from '@tasks/services/task.service';\nimport { TestNgControl } from '@tests/helpers/ng-control-testing-provider.helper';\nimport * as Color from 'color';\nimport { BehaviorSubject, filter, fromEvent, take } from 'rxjs';\n\n@Component({\n  selector: 'app-input-assignee',\n  templateUrl: './input-assignee.component.html',\n  styleUrls: ['./input-assignee.component.scss'],\n  providers: [{ provide: NgControl, useClass: TestNgControl }],\n})\nexport class InputAssigneeComponent extends ControlAccessor {\n  @Input() set assignee(assignee: ProjectMember | null) {\n    this._assignee = assignee;\n\n    if (assignee) {\n      this.assigneeColor = UserUtils.getColorById(assignee?.user.id);\n    } else {\n      this.assigneeColor = undefined;\n    }\n  }\n  public get assignee(): ProjectMember | null {\n    return this._assignee;\n  }\n\n  @Input() set members(members: Map<number, ProjectMember> | ProjectMember[]) {\n    if (Array.isArray(members)) {\n      for (const member of members) {\n        (member as any).color = UserUtils.getColorById(member.user.id);\n      }\n      this.members$.next(members as any);\n    } else if (members) {\n      const membersArray = [...members.values()];\n      for (const member of membersArray) {\n        (member as any).color = UserUtils.getColorById(member.user.id);\n      }\n      this.members$.next(membersArray as any);\n    }\n  }\n  @Input() taskId?: number;\n  @Input() projectId?: number;\n\n  @ViewChild('overlay') overlay!: ElementRef<HTMLElement>;\n\n  private _assignee: ProjectMember | null = null;\n\n  public members$ = new BehaviorSubject<(ProjectMember & { color: Color })[]>([] as any);\n  public readonly isOpen$ = new BehaviorSubject<boolean>(false);\n  public assigneeColor?: Color;\n\n  public set isOpen(val: boolean) {\n    this.isOpen$.next(val);\n  }\n\n  public get isOpen() {\n    return this.isOpen$.value;\n  }\n\n  constructor(public override ngControl: NgControl, private taskService: TaskService) {\n    super(ngControl);\n  }\n\n  public open() {\n    setTimeout(() => {\n      fromEvent(document, 'click')\n        .pipe(\n          take(1),\n          filter((e) => !this.overlay?.nativeElement.contains(e.target as Node)),\n        )\n        .subscribe(() => this.close());\n      this.isOpen$.next(true);\n    });\n  }\n\n  public close() {\n    this.isOpen$.next(false);\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      return this.close();\n    }\n    return this.open();\n  }\n\n  public select(member: ProjectMember | null) {\n    if (this.taskId && this.projectId)\n      this.taskService\n        .assign(member?.user.id || null, this.taskId, this.projectId)\n        .subscribe(() => {\n          this.close();\n          location.reload();\n        });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n.assignee {\r\n  display: flex;\r\n  width: 40px;\r\n  height: 40px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-secondary-400);\r\n  border-radius: 50%;\r\n  color: var(--color-text);\r\n  cursor: pointer;\r\n  transition: background-color 0.4s ease;\r\n\r\n  &:not(.add) {\r\n    @include typo-title;\r\n\r\n    background-color: var(--color-primary-500);\r\n  }\r\n\r\n  &:not(.add):hover {\r\n    background-color: var(--color-secondary-300);\r\n  }\r\n}\r\n\r\n.members-overlay {\r\n  padding: 1rem;\r\n  padding: 0.5rem 0;\r\n  background-color: var(--color-secondary-600);\r\n  border-radius: var(--border-radius);\r\n  box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.1);\r\n\r\n  li {\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 0.75rem 2rem;\r\n    color: var(--color-text);\r\n\r\n    &:not(.line) {\r\n      cursor: pointer;\r\n      transition: background-color 0.4s ease;\r\n\r\n      &:hover {\r\n        background-color: var(--color-secondary-500);\r\n      }\r\n    }\r\n\r\n    &.line {\r\n      position: relative;\r\n\r\n      &::before {\r\n        position: absolute;\r\n        top: calc(50% - 1px);\r\n        left: 10%;\r\n        width: 80%;\r\n        height: 1px;\r\n        background-color: var(--color-secondary-500);\r\n        content: '';\r\n      }\r\n    }\r\n\r\n    &.entry-remove {\r\n      span {\r\n        opacity: 0.75;\r\n      }\r\n    }\r\n\r\n    .avatar {\r\n      @include typo-title;\r\n\r\n      display: flex;\r\n      width: 36px;\r\n      height: 36px;\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin-right: 1rem;\r\n      border-radius: 50%;\r\n      color: var(--color-text);\r\n    }\r\n\r\n    .avatar-remove {\r\n      display: flex;\r\n      width: 36px;\r\n      height: 36px;\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin-right: 1rem;\r\n      background-color: var(--color-secondary-400);\r\n      border-radius: 50%;\r\n      color: var(--color-text);\r\n      opacity: 0.5;\r\n    }\r\n\r\n    .details {\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      .username {\r\n        opacity: 0.5;\r\n      }\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./input-assignee.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ControlAccessor",
            "accessors": {
                "assignee": {
                    "name": "assignee",
                    "setSignature": {
                        "name": "assignee",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "assignee",
                                "type": "ProjectMember | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 18,
                        "jsdoctags": [
                            {
                                "name": "assignee",
                                "type": "ProjectMember | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "assignee",
                        "type": "",
                        "returnType": "ProjectMember | null",
                        "line": 27
                    }
                },
                "members": {
                    "name": "members",
                    "setSignature": {
                        "name": "members",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "members",
                                "type": "Map<number | ProjectMember> | ProjectMember[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "members",
                                "type": "Map<number | ProjectMember> | ProjectMember[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isOpen": {
                    "name": "isOpen",
                    "setSignature": {
                        "name": "isOpen",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isOpen",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<!-- This button triggers the overlay and is it's origin -->\r\n<button (click)=\"toggle()\" type=\"button\" class=\"assignee\" [class.add]=\"!assignee\" cdkOverlayOrigin\r\n  #trigger=\"cdkOverlayOrigin\" [style.background-color]=\"assigneeColor?.rgb()?.string()\"\r\n  matTooltip=\"{{ assignee?.user?.name }} {{ assignee?.user?.surname }}\">\r\n  {{ assignee ? assignee.user.name[0] : '+' }}\r\n</button>\r\n\r\n<ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"trigger\"\r\n  [cdkConnectedOverlayOpen]=\"(isOpen$ | async) || false\"\r\n  [cdkConnectedOverlayBackdropClass]=\"'cdk-overlay-transparent-backdrop'\" [cdkConnectedOverlayHasBackdrop]=\"true\">\r\n  <ul #overlay class=\"members-overlay\">\r\n    <li *ngFor=\"let member of members$ | async\" (click)=\"select(member)\">\r\n      <div class=\"avatar\" [style.background-color]=\"member.color?.rgb()?.string()\">{{ member.user.name[0] }}</div>\r\n      <div class=\"details\">\r\n        <span class=\"full-name\">{{ member.user.name }} {{ member.user.surname }}</span>\r\n        <span class=\"username\">@{{ member.user.username }}</span>\r\n      </div>\r\n    </li>\r\n    <li class=\"line\"></li>\r\n    <li class=\"entry-remove\" (click)=\"select(null)\">\r\n      <div class=\"avatar-remove\">-</div>\r\n      <span i18n>Remove assignee</span>\r\n    </li>\r\n  </ul>\r\n</ng-template>"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-cce68108ea76f1dbae2246b463e4d26652095a99465a693c9a9c8227a6b38804729836bb7c3f146775e91896eeb51bbb9c794afe7b41cf027f4e59602e837c80",
            "file": "src/app/_main/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "floatingLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFloating label text to display\n",
                    "description": "<p>Floating label text to display</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHint to display beneath the input to provide additional information of how to use the input\n",
                    "description": "<p>Hint to display beneath the input to provide additional information of how to use the input</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput placeholder text\n",
                    "description": "<p>Input placeholder text</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "staticLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStatic label text to display\n",
                    "description": "<p>Static label text to display</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of the input\n",
                    "description": "<p>Type of the input</p>\n",
                    "line": 18,
                    "type": "\"text\" | \"number\" | \"email\" | \"password\"",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.focused'"
                        }
                    ]
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        158
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.focused",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "<p>Default text input component</p>\n",
            "rawdescription": "\n\nDefault text input component\n",
            "type": "component",
            "sourceCode": "import { AutofillMonitor } from '@angular/cdk/text-field';\nimport { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ControlAccessor } from '../../classes/control-accessor.class';\n\n/**\n * Default text input component\n */\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n})\nexport class InputComponent extends ControlAccessor {\n  /**\n   * Type of the input\n   */\n  @Input() type: 'text' | 'number' | 'email' | 'password' = 'text';\n\n  /**\n   * Floating label text to display\n   */\n  @Input() floatingLabel?: string;\n\n  /**\n   * Static label text to display\n   */\n  @Input() staticLabel?: string;\n\n  /**\n   * Input placeholder text\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Hint to display beneath the input to provide additional information of how to use the input\n   */\n  @Input() hint?: string;\n\n  @HostBinding('class.focused') focused = false;\n\n  @ViewChild('input') input!: ElementRef<HTMLInputElement>;\n\n  constructor(public override ngControl: NgControl, private autofillMonitor: AutofillMonitor) {\n    super(ngControl);\n  }\n\n  onFocus() {\n    this.focused = true;\n  }\n\n  onBlur() {\n    this.focused = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n.form-field {\r\n  display: flex;\r\n  max-width: 400px;\r\n  flex-direction: column;\r\n  margin-bottom: 0.5rem;\r\n\r\n  > label {\r\n    @include typo-title;\r\n\r\n    margin-bottom: 0.4rem;\r\n    color: var(--color-input-text);\r\n\r\n    &.required::after {\r\n      margin-left: 0.2rem;\r\n      color: var(--color-input-text);\r\n      content: '*';\r\n    }\r\n  }\r\n}\r\n\r\n$padding-left: 1rem;\r\n$height: 55px;\r\n\r\n// New input\r\n.input-form-field {\r\n  position: relative;\r\n  height: $height;\r\n  margin-bottom: 2rem;\r\n\r\n  // Static label for input\r\n  .static-label {\r\n    @include typo-title;\r\n\r\n    margin-bottom: 0.4rem;\r\n    color: var(--color-input-text);\r\n\r\n    &.required::after {\r\n      margin-left: 0.2rem;\r\n      color: var(--color-input-text);\r\n      content: '*';\r\n    }\r\n  }\r\n\r\n  // Floating label for input\r\n  .floating-label {\r\n    @include typo-body;\r\n\r\n    padding: 0 0.4rem;\r\n    color: var(--color-text);\r\n    transition: transform 0.2s ease, font-size 0.2s ease;\r\n  }\r\n\r\n  // Fragments\r\n  .fragment-left,\r\n  .fragment-middle,\r\n  .fragment-right {\r\n    z-index: 1;\r\n    height: 100%;\r\n    border: 2px solid var(--color-input-border);\r\n    pointer-events: none;\r\n  }\r\n\r\n  .fragment-left {\r\n    width: $padding-left;\r\n    border-right-width: 0;\r\n    border-bottom-left-radius: var(--border-radius);\r\n    border-top-left-radius: var(--border-radius);\r\n  }\r\n\r\n  .fragment-middle {\r\n    display: flex;\r\n    align-items: center;\r\n    border-right-width: 0;\r\n    border-left-width: 0;\r\n  }\r\n\r\n  .fragment-right {\r\n    flex-grow: 1;\r\n    border-left-width: 0;\r\n    border-bottom-right-radius: var(--border-radius);\r\n    border-top-right-radius: var(--border-radius);\r\n  }\r\n\r\n  .input-wrapper {\r\n    position: relative;\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: var(--color-input-background);\r\n    border-radius: var(--border-radius);\r\n    transition: background-color 0.2s ease-in-out;\r\n\r\n    &:hover {\r\n      background-color: var(--color-input-background-hover);\r\n    }\r\n  }\r\n\r\n  input {\r\n    @include typo-body;\r\n\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding-left: calc($padding-left + 0.4rem);\r\n    background-color: var(--color-input-background);\r\n    background-color: transparent;\r\n    border-radius: var(--border-radius);\r\n    color: var(--color-text);\r\n  }\r\n}\r\n\r\n.has-value,\r\n:host.focused {\r\n  .floating-label {\r\n    font-size: 0.75em;\r\n    transform: translateY(calc($height / -2));\r\n  }\r\n\r\n  .fragment-middle {\r\n    border-top-width: 0;\r\n  }\r\n}\r\n\r\n:host:not(.focused) {\r\n  input::placeholder {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n:host.ng-touched.ng-invalid {\r\n  .fragment-left,\r\n  .fragment-middle,\r\n  .fragment-right {\r\n    border-color: var(--color-red-500);\r\n  }\r\n}\r\n\r\n:host.focused .input-form-field {\r\n  .fragment-left,\r\n  .fragment-middle,\r\n  .fragment-right {\r\n    border-color: var(--color-primary-500);\r\n  }\r\n}\r\n\r\n.required {\r\n  .static-label::after,\r\n  .floating-label::after {\r\n    margin-left: 0.2rem;\r\n    color: var(--color-red-500);\r\n    content: '*';\r\n  }\r\n}\r\n\r\n.error {\r\n  position: absolute;\r\n  margin-top: 0.2rem;\r\n  color: var(--color-red-500);\r\n  font-size: 12px;\r\n  line-height: 0.8rem;\r\n}\r\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "autofillMonitor",
                        "type": "AutofillMonitor",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "autofillMonitor",
                        "type": "AutofillMonitor",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ControlAccessor",
            "templateData": "<div class=\"input-form-field\" [class.required]=\"required\" [class.has-value]=\"!!control.value\">\r\n  <label *ngIf=\"staticLabel\" class=\"static-label\">{{ staticLabel }}</label>\r\n  <div class=\"input-wrapper\">\r\n    <div class=\"fragment-left\"></div>\r\n    <div class=\"fragment-middle\">\r\n      <label *ngIf=\"floatingLabel\" class=\"floating-label\">{{ floatingLabel }}</label>\r\n    </div>\r\n    <div class=\"fragment-right\">\r\n      <ng-content select=\"suffix\"></ng-content>\r\n    </div>\r\n    <input #input [name]=\"name\" [type]=\"type\" [placeholder]=\"placeholder\" [formControl]=\"control\"\r\n      [autocomplete]=\"autocomplete\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\r\n  </div>\r\n  <div *ngIf=\"control.touched && control.invalid\" class=\"error\">{{ control?.errors | validationError }}</div>\r\n</div>\r\n"
        },
        {
            "name": "InputDateTimeComponent",
            "id": "component-InputDateTimeComponent-948616555cab5ef02d50386f08b0c1d2147558bdc926e5945a1e9a8c0bc1549851fa3f2b016a015c6cb243329276125c7c409e2faa87ff131e74efa8b1f6b3e0",
            "file": "src/app/_main/components/input-date-time/input-date-time.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-date-time",
            "styleUrls": [
                "./input-date-time.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-date-time.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "floatingLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "changedDate",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        158
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "picker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input-date-time'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        158
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, NgControl } from '@angular/forms';\nimport { ControlAccessor } from '@main/classes/control-accessor.class';\nimport * as dayjs from 'dayjs';\n\n@Component({\n  selector: 'app-input-date-time',\n  templateUrl: './input-date-time.component.html',\n  styleUrls: ['./input-date-time.component.scss'],\n})\nexport class InputDateTimeComponent extends ControlAccessor implements OnInit {\n  @Input()\n  placeholder: string = '';\n\n  @Input()\n  floatingLabel?: string;\n\n  public changedDate: FormControl = new FormControl();\n\n  @ViewChild('input-date-time') picker!: ElementRef<HTMLInputElement>;\n\n  constructor(public override ngControl: NgControl) {\n    super(ngControl);\n  }\n\n  ngOnInit(): void {\n    this.changedDate.valueChanges.subscribe((date) =>\n      this.control.setValue(this.changeDate(date), { emitEvent: false }),\n    );\n  }\n\n  override writeValue(value: any): void {\n    this.changedDate.setValue(this.changeDate(value));\n  }\n\n  changeDate(date: number) {\n    let sessionDate = dayjs(date);\n\n    return sessionDate.format('YYYY-MM-DD');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .mat-focused .mat-form-field-label {\r\n  /* change color of label */\r\n  color: white !important;\r\n}\r\n\r\n::ng-deep.mat-form-field-underline {\r\n  /* change color of underline */\r\n  background-color: var(--color-purple-300) !important;\r\n}\r\n\r\n::ng-deep.mat-form-field-ripple {\r\n  /* change color of underline when focused */\r\n  background-color: white !important;\r\n}\r\n\r\n::ng-deep .mat-form-field-label {\r\n  /* change color of label */\r\n  color: white !important;\r\n}\r\n\r\nmat-datepicker-toggle {\r\n  color: var(--color-purple-300) !important;\r\n}\r\n",
                    "styleUrl": "./input-date-time.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ControlAccessor",
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field class=\"form\" appearance=\"fill\">\r\n  <mat-label *ngIf=\"floatingLabel\"> {{floatingLabel}}\r\n  </mat-label>\r\n  <input matInput [placeholder]=\"placeholder\" [matDatepicker]=\"picker\" [formControl]=\"changedDate\">\r\n  <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n  <mat-datepicker #picker></mat-datepicker>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "IntegrationEntryComponent",
            "id": "component-IntegrationEntryComponent-c5cf56a08cb6615bdb6f95ebec1366a21c008a3072b25148cc9f45841c70de50484520d3fc2d09b1e6e15c0333262b9df4b90f91eda8bf646fe9e3c643988e43",
            "file": "src/app/settings/components/integration-entry/integration-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-integration-entry",
            "styleUrls": [
                "./integration-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./integration-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "integration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "suspended",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "disconnect",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-integration-entry',\n  templateUrl: './integration-entry.component.html',\n  styleUrls: ['./integration-entry.component.scss'],\n})\nexport class IntegrationEntryComponent implements OnInit {\n  @Input() integration?: any;\n  @Input() label!: string;\n  @Input() description?: string | null;\n  @Input() suspended: boolean = false;\n\n  @Output() disconnect = new EventEmitter<any>();\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".integration-entry {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 15px;\r\n  border: 1px solid var(--color-secondary-300);\r\n  border-radius: var(--border-radius);\r\n\r\n  &.suspended {\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .labels {\r\n    display: flex;\r\n    width: 100%;\r\n    align-items: center;\r\n    margin-bottom: 0;\r\n\r\n    .description {\r\n      display: block;\r\n      padding-left: 0.5rem;\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./integration-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"integration-entry\" [class.suspended]=\"suspended\">\r\n  <div class=\"labels\">\r\n    <p class=\"typo-body label\">\r\n      {{ label }}\r\n    </p>\r\n    <p class=\"typo-body description\">\r\n      {{ description }}\r\n    </p>\r\n  </div>\r\n  <div class=\"actions\">\r\n    <app-button variant=\"secondary\" (click)=\"disconnect.emit(integration)\" i18n>Disconnect</app-button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "IntegrationGithubComponent",
            "id": "component-IntegrationGithubComponent-e25f88b6c3ef39270a9feff1f2c0b4425a0fc122c1440b25289da837c875dec11ac8a58d1f6d4d1d3e5615206dca86844525f85859df36dbf7e469c5334eeaa2",
            "file": "src/app/dashboard/components/integration-github/integration-github.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-integration-github",
            "styleUrls": [
                "./integration-github.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./integration-github.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    repository: new FormControl(null, [requiredValidator()]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "repositoryList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GitRepository[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "repositoryListLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addRepository",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "connectToGithub",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadRepositories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { GitRepository } from '@dashboard/interfaces/git-integration.interface';\nimport { GitIntegrationService } from '@dashboard/services/git-integration.service';\nimport { requiredValidator } from '@main/validators/required.validator';\n\n@Component({\n  selector: 'app-integration-github',\n  templateUrl: './integration-github.component.html',\n  styleUrls: ['./integration-github.component.scss'],\n})\nexport class IntegrationGithubComponent implements OnInit {\n  @Input()\n  projectId!: number;\n\n  repositoryList: GitRepository[] = [];\n  public repositoryListLoaded = false;\n\n  constructor(private gitIntegrationService: GitIntegrationService) {}\n\n  public form = new FormGroup({\n    repository: new FormControl(null, [requiredValidator()]),\n  });\n\n  connectToGithub() {\n    this.gitIntegrationService.startGitHubIntegration().subscribe(() => {\n      this.loadRepositories();\n    });\n  }\n\n  loadRepositories() {\n    this.repositoryListLoaded = false;\n    this.gitIntegrationService.getGitHubIntegration().subscribe((integration) => {\n      this.repositoryList = integration.gitRepositories;\n      this.repositoryListLoaded = true;\n    });\n  }\n\n  addRepository() {\n    this.gitIntegrationService\n      .attachGitHubIntegration(this.projectId, this.form.value.repository)\n      .subscribe();\n  }\n\n  ngOnInit() {\n    this.loadRepositories();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "main {\r\n  padding: 20px;\r\n  background-color: var(--color-secondary-600);\r\n  border-radius: var(--border-radius);\r\n  color: var(--color-text);\r\n\r\n  section {\r\n    display: flex;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    color: var(--color-text);\r\n\r\n    .github {\r\n      width: 100%;\r\n    }\r\n\r\n    app-button {\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./integration-github.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<main>\r\n  <section>\r\n    <div class=\"github\">\r\n      <h2 class=\"typo-heading-5 mb-5\">Github</h2>\r\n    </div>\r\n    <app-button (click)='connectToGithub()' type='button'  variant=\"secondary\" i18n>Connect to Github</app-button>\r\n  </section>\r\n\r\n  <form [formGroup]=\"form\" autocomplete=\"off\">\r\n\r\n    <!-- Project -->\r\n    <ng-container *ngIf=\"repositoryListLoaded\">\r\n      <app-select formControlName=\"repository\" floatingLabel=\"Repository\" i18n-floatingLabel>\r\n        <app-option *ngFor=\"let repository of repositoryList\" [value]=\"repository.fullName\">{{repository.fullName}}\r\n        </app-option>\r\n      </app-select>\r\n      <app-button variant=\"secondary\" (click)='addRepository()' i18n>Add repository</app-button>\r\n    </ng-container>\r\n\r\n  </form>\r\n</main>\r\n\r\n"
        },
        {
            "name": "LandingPageComponent",
            "id": "component-LandingPageComponent-a0b8a9d921554afea98ce97c9f6f12e511f5ce16492256d97e52e4d534b9a58e6b6dcd12317ebdef61e6afeaebc148a51a0c09ba375032475043f63b867bce24",
            "file": "src/app/landing-page/landing-page/landing-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing-page",
            "styleUrls": [
                "./landing-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.scss'],\n})\nexport class LandingPageComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<img [src]=\"'assets/landing-page/Landing-page.svg'\" />\r\n"
        },
        {
            "name": "ListGroupComponent",
            "id": "component-ListGroupComponent-cdced3d92be5704b0d50b4728ab563538677f6710a454ab1c0e2d91584be52816138ac147ddb4c804f39e845ce9fdbe15e2cb8eba4c883eebdd4aee2abcae5bf",
            "file": "src/app/settings/components/list-group/list-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-group",
            "styleUrls": [
                "./list-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-list-group',\n  templateUrl: './list-group.component.html',\n  styleUrls: ['./list-group.component.scss'],\n})\nexport class ListGroupComponent implements OnInit {\n  @Input() label!: string;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h4 {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 5px 0;\r\n  border-bottom: 1px solid var(--color-secondary-300);\r\n  color: var(--color-secondary-300);\r\n  font-weight: bold;\r\n}\r\n",
                    "styleUrl": "./list-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h4 class=\"typo-label\">\r\n  {{ label }}\r\n</h4>\r\n"
        },
        {
            "name": "LoginPage",
            "id": "component-LoginPage-2358f4548a89fb1527f9264d2693c29d622c5173a4235aaea75eda5e88a89cb60a36ac467853b973559379fb27e70596c784092de87a01f55a486baa11bb0628",
            "file": "src/app/auth/pages/login/login.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [requiredValidator()], []),\n    password: new FormControl('', [requiredValidator()], []),\n    remember: new FormControl('', [], []),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for login.</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nForm group for login.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loginSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '@auth/services/user.service';\nimport { catchError, EMPTY, Subscription } from 'rxjs';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n  constructor(\n    private authService: AuthService,\n    private userService: UserService,\n    private router: Router,\n  ) {}\n\n  private loginSubscription?: Subscription;\n  public error?: string;\n\n  /**\n   * Form group for login.\n   */\n  public form = new FormGroup({\n    email: new FormControl('', [requiredValidator()], []),\n    password: new FormControl('', [requiredValidator()], []),\n    remember: new FormControl('', [], []),\n  });\n\n  ngOnInit() {\n    this.userService.getMyself().subscribe(() => {\n      localStorage.setItem('logged', 'true');\n      this.router.navigate(['/']);\n    });\n  }\n\n  login() {\n    if (this.loginSubscription && !this.loginSubscription.closed) return;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.valid) {\n      this.loginSubscription = this.authService\n        .login(this.form.value)\n        .pipe(\n          catchError((e) => {\n            this.handleError(e);\n            return EMPTY;\n          }),\n        )\n        .subscribe((response) => {\n          if (response.deleted) {\n            this.router.navigate(['/auth/restore-account']);\n          } else {\n            localStorage.setItem('logged', 'true');\n            this.router.navigate(['/']);\n          }\n        });\n    }\n  }\n\n  handleError(error: any) {\n    switch (error.status) {\n      case 403:\n        this.error = $localize`User is already logged`;\n        break;\n      case 404:\n        this.error = $localize`Wrong username or password`;\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\r\n  width: calc(100% - 80px);\r\n  height: 64px;\r\n  margin-top: 20px;\r\n  background-image: url('/assets/metadata/logo_with_name.svg');\r\n  background-position: 0 50%;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n}\r\n\r\n.main {\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-neutral-800);\r\n\r\n  .box {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .form-side {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      background-color: var(--color-gray-800);\r\n\r\n      form {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        justify-content: center;\r\n        padding: 4rem;\r\n\r\n        h2 {\r\n          margin-bottom: 0.5rem;\r\n        }\r\n\r\n        p {\r\n          margin-bottom: 1.5rem;\r\n        }\r\n\r\n        .remember-me {\r\n          margin-bottom: 1.5rem;\r\n        }\r\n\r\n        app-input {\r\n          width: 100%;\r\n        }\r\n\r\n        app-button {\r\n          align-self: flex-end;\r\n        }\r\n\r\n        a {\r\n          color: var(--color-link);\r\n          cursor: pointer;\r\n          transition: color 0.2s ease;\r\n\r\n          &:hover {\r\n            color: var(--color-link-hover);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .image-side {\r\n      background-color: var(--color-gray-700);\r\n    }\r\n  }\r\n}\r\n\r\n@screen sm {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen md {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen lg {\r\n  .main {\r\n    .box {\r\n      width: 950px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 450px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen xl {\r\n  .main {\r\n    .box {\r\n      width: 1240px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 520px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 720px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"main\">\n  <section class=\"box\">\n    <section class=\"form-side\">\n      <div class=\"logo\" routerLink=\"/\"></div>\n      <form [formGroup]=\"form\" (submit)=\"login()\">\n        <div>\n          <h2 class=\"typo-heading-5\" i18n>Login to system</h2>\n          <p class=\"typo-body\" i18n>This is a secure site. Please enter your login information to enter or <a\n              routerLink=\"/auth/register\">click here</a> to register.</p>\n        </div>\n\n        <div *ngIf=\"error\" class=\"error-box\">\n          {{ error }}\n        </div>\n\n        <app-input formControlName=\"email\" type=\"email\" placeholder=\"name@example.com\" floatingLabel=\"Email or Username\"\n          i18n-floatingLabel i18n-placeholder></app-input>\n\n        <app-input formControlName=\"password\" type=\"password\" placeholder=\"●●●●●●●\" floatingLabel=\"Password\"\n          i18n-floatingLabel i18n-placeholder></app-input>\n\n        <p class=\"typo-body\" i18n>Forgot your password? <a routerLink=\"/auth/password-reset\">Reset password</a>.</p>\n\n        <div class=\"remember-me\">\n          <app-checkbox formControlName=\"remember\" i18n>Remember me</app-checkbox>\n        </div>\n\n        <app-button variant=\"primary\" i18n>Log in</app-button>\n\n      </form>\n    </section>\n    <section class=\"image-side\">\n\n    </section>\n  </section>\n</section>\n"
        },
        {
            "name": "MainViewComponent",
            "id": "component-MainViewComponent-385cb1c7423856026a070c79318ef286531eb04894b568077c045d6303c3e7a885dc3170579e9ab1e8b8e2de2d7633800b6ae2995156f73c557d2578f6ba88b4",
            "file": "src/app/_main/components/main-view/main-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-view",
            "styleUrls": [
                "./main-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "DialogOutlet",
                    "defaultValue": "DialogOutlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "version",
                    "defaultValue": "environment.version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DialogOutlet } from '@main/services/dialog.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-main-view',\n  templateUrl: './main-view.component.html',\n  styleUrls: ['./main-view.component.scss'],\n})\nexport class MainViewComponent implements OnInit {\n  public version = environment.version;\n\n  public DialogOutlet = DialogOutlet;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: var(--color-secondary-700);\r\n}\r\n\r\nsection {\r\n  display: flex;\r\n  height: 100%;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  overflow-x: hidden;\r\n\r\n  .content {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    flex-direction: row;\r\n\r\n    main {\r\n      width: 100%;\r\n      height: 100%;\r\n      overflow-x: hidden;\r\n      overflow-y: auto;\r\n    }\r\n  }\r\n}\r\n\r\n.version {\r\n  position: absolute;\r\n  bottom: 1rem;\r\n  left: 1em;\r\n  color: var(--color-text);\r\n  opacity: 0.5;\r\n}",
                    "styleUrl": "./main-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-sidebar-navigation></app-sidebar-navigation>\r\n\r\n<section>\r\n  <app-upper-navigation></app-upper-navigation>\r\n\r\n  <app-snackbar-outlet></app-snackbar-outlet>\r\n\r\n  <section class=\"content\">\r\n    <main>\r\n      <router-outlet></router-outlet>\r\n    </main>\r\n\r\n    <app-dialog-outlet [outlet]=\"DialogOutlet.CONTENT_RIGHT\"></app-dialog-outlet>\r\n  </section>\r\n</section>\r\n\r\n<span class=\"version\">{{ version }}</span>"
        },
        {
            "name": "MemberListComponent",
            "id": "component-MemberListComponent-7b9549225ac002c01a54e5ef2bb45c604368f74b1815a2bebf2158c0e0936d1ce4eab539da4325058735a9bb8c6bf744cbbd929eec0bfc2f314dea8ce591d717",
            "file": "src/app/dashboard/components/member-list/member-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-member-list",
            "styleUrls": [
                "./member-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./member-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addedMembers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "memberList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ProjectMember[]",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'edit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "\"create\" | \"edit\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "memberList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProjectMember[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteMember",
                    "args": [
                        {
                            "name": "id",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProjectMember } from '@dashboard/interfaces/project-member.interface';\nimport { MemberService } from '@dashboard/services/member.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-member-list',\n  templateUrl: './member-list.component.html',\n  styleUrls: ['./member-list.component.scss'],\n})\nexport class MemberListComponent implements OnInit {\n  public projectId!: number;\n\n  public memberList$!: Observable<ProjectMember[]>;\n\n  @Input()\n  addedMembers?: string[];\n\n  @Input()\n  type: 'create' | 'edit' = 'edit';\n\n  @Input()\n  memberList!: ProjectMember[];\n\n  constructor(private memberService: MemberService, private activatedRoute: ActivatedRoute) {\n    const { workspaceId, projectId } = this.activatedRoute.snapshot.params;\n    this.projectId = projectId;\n\n    this.memberList$ = this.memberService.list(projectId);\n  }\n\n  deleteMember(id: number[]) {\n    this.memberService.remove(this.projectId, id).subscribe(() => {\n      location.reload();\n    });\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./member-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Table -->\r\n<table *ngIf=\"type!=='create'\" mat-table [dataSource]=\"(memberList$ | async) || []\">\r\n\r\n  <!-- Name column -->\r\n  <ng-container matColumnDef=\"username\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Username</th>\r\n    <td mat-cell *matCellDef=\"let row\"> {{ row.user.username }} </td>\r\n  </ng-container>\r\n\r\n  <!-- Statistics column -->\r\n  <ng-container matColumnDef=\"email\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Email</th>\r\n    <td mat-cell *matCellDef=\"let row\"> {{ row.user.email }} </td>\r\n  </ng-container>\r\n\r\n  <!-- Name column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Name</th>\r\n    <td mat-cell *matCellDef=\"let row\"> {{ row.user.name }} </td>\r\n  </ng-container>\r\n\r\n  <!-- Name column -->\r\n  <ng-container matColumnDef=\"surname\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Surname</th>\r\n    <td mat-cell *matCellDef=\"let row\"> {{ row.user.surname }} </td>\r\n  </ng-container>\r\n\r\n  <!-- Actions column -->\r\n  <ng-container matColumnDef=\"actions\">\r\n    <th mat-header-cell *matHeaderCellDef i18n></th>\r\n    <td mat-cell *matCellDef=\"let row\" class=\"action-cell\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"flex items-center\">\r\n        <app-icon icon=\"matMoreVert\"></app-icon>\r\n      </button>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item class=\"important\" (click)=\"deleteMember([row.user.id])\">\r\n          <span i18n>Delete member</span>\r\n        </button>\r\n      </mat-menu>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"['username', 'email', 'name', 'surname', 'actions']\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: ['username', 'email', 'name', 'surname', 'actions'];\"></tr>\r\n</table>\r\n\r\n<table *ngIf=\"type==='create'\" mat-table [dataSource]=\"(addedMembers) || []\">\r\n\r\n  <!-- Username or email column -->\r\n  <ng-container matColumnDef=\"username\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Username or Email</th>\r\n    <td mat-cell *matCellDef=\"let row\"> {{ row }} </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"['username']\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: ['username'];\"></tr>\r\n</table>\r\n"
        },
        {
            "name": "MockPage",
            "id": "component-MockPage-865f6eb0c96c63b17b6e46014552756a890e80d900961cd9d0b3d287fed05ecc624545d2b4de51e82a09880279684e6e6f72b653e81e8560ef760b744a1591b9",
            "file": "src/app/_main/pages/mock/mock.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mock",
            "styleUrls": [
                "./mock.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mock.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-mock',\n  templateUrl: './mock.page.html',\n  styleUrls: ['./mock.page.scss'],\n})\nexport class MockPage implements OnInit {\n  constructor(private activatedRoute: ActivatedRoute) {}\n\n  public image: string = '';\n\n  ngOnInit() {\n    this.activatedRoute.data.subscribe(({ image }) => {\n      this.image = image;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "img {\r\n  width: 100%;\r\n  border: 4px solid #f39c12;\r\n}\r\n\r\n:host {\r\n  position: relative;\r\n  display: block;\r\n  text-align: center;\r\n\r\n  &::after {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    display: block;\r\n    padding: 1rem 4rem;\r\n    background-color: #f39c12;\r\n    border-radius: var(--border-radius);\r\n    color: #222;\r\n    content: 'Work in progress';\r\n    font-weight: bold;\r\n    text-align: center;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n}\r\n",
                    "styleUrl": "./mock.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<img [src]=\"image\" />\r\n"
        },
        {
            "name": "NavElementComponent",
            "id": "component-NavElementComponent-a569d8f03df1a64a5b8090450ca7273a6083fbd365543f0524790532e11ea52a8fb2dd8540f975e11a0810664458d8cf49908ce283618c5e1a7d25e0592240c2",
            "file": "src/app/_main/components/nav-element/nav-element.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-element",
            "styleUrls": [
                "./nav-element.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-element.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faAngleDown",
                    "defaultValue": "faAngleDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "listElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'elementList'"
                        }
                    ]
                },
                {
                    "name": "showArrow$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNavElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openNavElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleNavElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ElementRef, ViewChild, AfterViewInit } from '@angular/core';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'app-nav-element',\n  templateUrl: './nav-element.component.html',\n  styleUrls: ['./nav-element.component.scss'],\n})\nexport class NavElementComponent implements AfterViewInit {\n  @Input()\n  public routerLink?: string;\n\n  @Input()\n  public showOptions?: boolean;\n\n  public active: boolean = false;\n\n  public showArrow$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  @ViewChild('elementList')\n  listElement?: ElementRef;\n\n  faAngleDown = faAngleDown;\n\n  constructor() {}\n\n  public openNavElement() {\n    this.active = true;\n  }\n  public closeNavElement() {\n    this.active = false;\n  }\n  public toggleNavElement() {\n    if (!this.active) {\n      this.openNavElement();\n    } else {\n      this.closeNavElement();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.showArrow$.next(Boolean(this.listElement?.nativeElement.children.length));\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n:host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n}\r\n\r\nsection {\r\n  @include typo-title;\r\n\r\n  display: flex;\r\n  width: 100%;\r\n  height: 46px;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  color: var(--color-neutral-300);\r\n  cursor: pointer;\r\n  transition: color 0.2s ease-in-out;\r\n\r\n  .element {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    align-items: center;\r\n    padding: 0 0 0 20px;\r\n  }\r\n\r\n  .icons {\r\n    display: flex;\r\n    height: 100%;\r\n    align-items: center;\r\n\r\n    .options {\r\n      display: flex;\r\n      height: 100%;\r\n      align-items: center;\r\n      padding: 0 5px 0 0;\r\n    }\r\n\r\n    .open-below {\r\n      display: flex;\r\n      height: 100%;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 0 5px;\r\n\r\n      // padding: 0 5px;\r\n\r\n      app-icon {\r\n        display: flex;\r\n        justify-content: center;\r\n\r\n        &.active {\r\n          transform: scaleY(-1);\r\n        }\r\n      }\r\n    }\r\n\r\n    .options button {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    color: var(--color-text);\r\n  }\r\n}\r\n\r\n.list {\r\n  display: none;\r\n  width: 100%;\r\n  cursor: pointer;\r\n\r\n  &.active {\r\n    display: block;\r\n    justify-content: center;\r\n    background-color: var(--color-secondary-600);\r\n  }\r\n}\r\n\r\n.hidden {\r\n  visibility: hidden;\r\n}\r\n",
                    "styleUrl": "./nav-element.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<section>\r\n  <div class=\"element\" (click)=\"toggleNavElement()\">\r\n    <fa-icon></fa-icon>\r\n    <ng-content></ng-content>\r\n  </div>\r\n  <div class=\"icons\">\r\n    <div class=\"open-below\" [class.hidden]=\"(showArrow$ | async) === false\" (click)=\"toggleNavElement()\">\r\n      <app-icon [icon]=\"faAngleDown\" size=\"16px\" [class.active]=\"active\"></app-icon>\r\n    </div>\r\n    <div class=\"options\" [class.hidden]=\"!showOptions\" [matMenuTriggerFor]=\"menu\">\r\n      <button mat-icon-button aria-label=\"Menu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <ng-content select=\".options\"></ng-content>\r\n      </mat-menu>\r\n    </div>\r\n  </div>\r\n</section>\r\n<div class=\"list\" #elementList [class.active]=\"active\">\r\n  <ng-content select=\".open-below\"></ng-content>\r\n</div>\r\n"
        },
        {
            "name": "NavElementWorkspaceComponent",
            "id": "component-NavElementWorkspaceComponent-0b4f54ee4144d38cb07ec26d4eb86d8666e0f5aa1357d0af31e37268b1cfab30ce57e8f931e1f93762af59134d56bf052091c02524272ba6af260595356751d0",
            "file": "src/app/_main/components/nav-element-workspace/nav-element-workspace.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav-element-workspace",
            "styleUrls": [
                "./nav-element-workspace.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-element-workspace.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "workspace",
                    "defaultValue": "{ id: -1 } as unknown as Workspace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Workspace",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeWorkspace",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faAngleDown",
                    "defaultValue": "faAngleDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "listElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": true,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'elementList'"
                        }
                    ]
                },
                {
                    "name": "showArrow$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openWithLocalVSCode",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openWithLocalVSCodeInsiders",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openWithVSCode",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "routeToProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "routeToWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport { BehaviorSubject } from 'rxjs';\nimport { Project } from 'src/app/dashboard/interfaces/project.interface';\nimport { Workspace } from 'src/app/dashboard/interfaces/workspace.interface';\nimport { ProjectService } from 'src/app/dashboard/services/project.service';\nimport { WorkspaceService } from 'src/app/dashboard/services/workspace.service';\nimport { DialogService } from '../../services/dialog.service';\n\n@Component({\n  selector: 'app-nav-element-workspace',\n  templateUrl: './nav-element-workspace.component.html',\n  styleUrls: ['./nav-element-workspace.component.scss'],\n})\nexport class NavElementWorkspaceComponent implements AfterViewInit {\n  @Input()\n  public routerLink?: string;\n\n  @Input()\n  public workspace: Workspace = { id: -1 } as unknown as Workspace;\n\n  faAngleDown = faAngleDown;\n  public activeWorkspace: boolean = false;\n\n  public showArrow$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  @ViewChild('elementList')\n  listElement?: ElementRef;\n\n  constructor(\n    private workspaceService: WorkspaceService,\n    private dialogService: DialogService,\n    private projectService: ProjectService,\n    private router: Router,\n  ) {}\n\n  public openWorkspace() {\n    this.activeWorkspace = true;\n  }\n  public closeWorkspace() {\n    this.activeWorkspace = false;\n  }\n  public toggleWorkspace() {\n    if (!this.activeWorkspace) {\n      this.openWorkspace();\n    } else {\n      this.closeWorkspace();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      this.showArrow$.next(Boolean(this.listElement?.nativeElement.children.length));\n    });\n  }\n\n  routeToWorkspace() {\n    this.router\n      .navigateByUrl('/', { skipLocationChange: true })\n      .then(() => this.router.navigate(['/', this.workspace.id]));\n  }\n\n  routeToProject(project: Project) {\n    this.router\n      .navigateByUrl('/', { skipLocationChange: true })\n      .then(() => this.router.navigate(['/', this.workspace.id, project.id]));\n  }\n\n  createProject() {\n    this.router\n      .navigateByUrl('/', { skipLocationChange: true })\n      .then(() => this.router.navigate(['/', this.workspace.id, 'create']));\n  }\n\n  editProject(project: Project) {\n    this.router\n      .navigateByUrl('/', { skipLocationChange: true })\n      .then(() => this.router.navigate(['/', this.workspace.id, project.id, 'edit']));\n  }\n\n  deleteProject(project: Project) {\n    this.dialogService.confirmProjectDelete(project).subscribe(() => {\n      this.projectService.delete(project.id).subscribe(() => {\n        window.location.reload();\n      });\n    });\n  }\n\n  editWorkspace() {\n    this.router\n      .navigateByUrl('/', { skipLocationChange: true })\n      .then(() => this.router.navigate(['/', this.workspace.id, 'edit']));\n  }\n\n  deleteWorkspace() {\n    this.dialogService.confirmWorkspaceDelete(this.workspace).subscribe(() => {\n      this.workspaceService.delete(this.workspace.id).subscribe(() => {\n        window.location.reload();\n      });\n    });\n  }\n\n  openWithVSCode(project: Project) {\n    window.open(`https://github.dev/${project.gitHubIntegration}`, '_blank');\n  }\n\n  openWithLocalVSCode(project: Project) {\n    window.open(\n      `vscode://vscode.git/clone?url=https://github.com/${project.gitHubIntegration}`,\n      '_blank',\n    );\n  }\n\n  openWithLocalVSCodeInsiders(project: Project) {\n    window.open(\n      `vscode-insiders://vscode.git/clone?url=https://github.com/${project.gitHubIntegration}`,\n      '_blank',\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n:host {\r\n  @include typo-title;\r\n\r\n  background-color: var(--color-secondary-600);\r\n}\r\n\r\nli {\r\n  background-color: var(--color-secondary-700);\r\n}\r\n\r\n.workspace {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 46px;\r\n  justify-content: space-between;\r\n  border-radius: var(--border-radius);\r\n  color: var(--color-neutral-300);\r\n  cursor: pointer;\r\n  transition: background-color 0.2s ease-in-out;\r\n\r\n  .element {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    align-items: center;\r\n    padding: 0 0 0 30px;\r\n  }\r\n\r\n  .icons {\r\n    display: flex;\r\n    height: 100%;\r\n    align-items: center;\r\n\r\n    .options {\r\n      display: flex;\r\n      height: 100%;\r\n      align-items: center;\r\n      padding: 0 5px 0 0;\r\n    }\r\n\r\n    .open-below {\r\n      display: flex;\r\n      height: 100%;\r\n      align-items: center;\r\n      justify-content: center;\r\n      padding: 0 5px;\r\n\r\n      app-icon {\r\n        display: flex;\r\n        justify-content: center;\r\n\r\n        &.active {\r\n          transform: scaleY(-1);\r\n        }\r\n      }\r\n    }\r\n\r\n    .options button {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    background-color: var(--color-secondary-500);\r\n  }\r\n}\r\n\r\n.project {\r\n  display: none;\r\n  width: 100%;\r\n  cursor: pointer;\r\n\r\n  &.active {\r\n    display: block;\r\n    justify-content: center;\r\n    background-color: var(--color-secondary-600);\r\n    color: var(--color-neutral-300);\r\n    transition: background-color 0.2s ease-in-out;\r\n\r\n    li {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 46px;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      border-radius: var(--border-radius);\r\n\r\n      .sub-element {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        align-items: center;\r\n        padding: 0 0 0 40px;\r\n      }\r\n\r\n      .icons {\r\n        display: flex;\r\n        height: 100%;\r\n        align-items: center;\r\n        padding: 0 5px 0 0;\r\n      }\r\n\r\n      &:hover {\r\n        background-color: var(--color-secondary-500);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nbutton {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.hidden {\r\n  visibility: hidden;\r\n}\r\n",
                    "styleUrl": "./nav-element-workspace.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<section>\r\n  <div class=\"workspace\">\r\n    <div class=\"element\" (click)=\"toggleWorkspace()\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n    <div class=\"icons\">\r\n      <div class=\"open-below\" [class.hidden]=\"(showArrow$ | async) === false\" (click)=\"toggleWorkspace()\">\r\n        <app-icon [icon]=\"faAngleDown\" size=\"16px\" [class.active]=\"activeWorkspace\"></app-icon>\r\n      </div>\r\n      <div class=\"options\">\r\n        <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Menu\">\r\n          <mat-icon>more_vert</mat-icon>\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n          <button mat-menu-item (click)=\"createProject()\">\r\n            <span i18n>Create project</span>\r\n          </button>\r\n          <button mat-menu-item (click)=\"routeToWorkspace()\">\r\n            <span i18n>Manage projects</span>\r\n          </button>\r\n          <button mat-menu-item (click)=\"editWorkspace()\">\r\n            <span i18n>Edit workspace</span>\r\n          </button>\r\n          <button mat-menu-item class=\"important\" (click)=\"deleteWorkspace()\">\r\n            <span i18n>Delete workspace</span>\r\n          </button>\r\n        </mat-menu>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"project\" [class.active]=\"activeWorkspace\">\r\n    <ul #elementList>\r\n      <li *ngFor=\"let projectWithPriv of workspace.projectsWithPrivileges\">\r\n        <div class=\"sub-element\" (click)=\"routeToProject(projectWithPriv.project)\">{{projectWithPriv.project.name}}</div>\r\n        <div class=\"icons\" [matMenuTriggerFor]=\"menu\">\r\n          <div class=\"options\">\r\n            <button mat-icon-button aria-label=\"Menu\">\r\n              <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item *ngIf=\"projectWithPriv.project.gitHubIntegration\"\r\n                (click)=\"openWithVSCode(projectWithPriv.project)\">\r\n                <span i18n>Open in github.dev</span>\r\n              </button>\r\n              <button mat-menu-item *ngIf=\"projectWithPriv.project.gitHubIntegration\"\r\n                (click)=\"openWithLocalVSCode(projectWithPriv.project)\">\r\n                <span i18n>Open in Visual Studio Code</span>\r\n              </button>\r\n              <button mat-menu-item *ngIf=\"projectWithPriv.project.gitHubIntegration\"\r\n                (click)=\"openWithLocalVSCodeInsiders(projectWithPriv.project)\">\r\n                <span i18n>Open in Visual Studio Code Insiders</span>\r\n              </button>\r\n              <button mat-menu-item (click)=\"editProject(projectWithPriv.project)\">\r\n                <span i18n>Edit project</span>\r\n              </button>\r\n              <button mat-menu-item class=\"important\" (click)=\"deleteProject(projectWithPriv.project)\">\r\n                <span i18n>Delete project</span>\r\n              </button>\r\n            </mat-menu>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <ng-content select=\".options\"></ng-content>\r\n</section>\r\n"
        },
        {
            "name": "OptionComponent",
            "id": "component-OptionComponent-0754852035e1d144807a4fb1023c909acaee6399dd8922f735919567fada3747e5f4f3386bb5873d3fb661c97e3523fc0e0b68b68884d13fd1b2dc307fc8cd4f",
            "file": "src/app/_main/components/option/option.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-option",
            "styleUrls": [
                "./option.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./option.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string | IconDefinition",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faQuestion",
                    "defaultValue": "faQuestion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input } from '@angular/core';\nimport { faQuestion, IconDefinition } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-option',\n  templateUrl: './option.component.html',\n  styleUrls: ['./option.component.scss'],\n})\nexport class OptionComponent {\n  @Input() value!: any;\n  @Input() icon?: string | IconDefinition;\n\n  faQuestion = faQuestion;\n\n  public get viewValue(): string {\n    return this.ref.nativeElement.innerText;\n  }\n\n  constructor(private ref: ElementRef) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./option.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "viewValue": {
                    "name": "viewValue",
                    "getSignature": {
                        "name": "viewValue",
                        "type": "string",
                        "returnType": "string",
                        "line": 15
                    }
                }
            },
            "templateData": "<mat-option [value]=\"value\">\r\n  <ng-content></ng-content>\r\n</mat-option>\r\n"
        },
        {
            "name": "ProjectsListPage",
            "id": "component-ProjectsListPage-d7b3f2f9892a315cb38e75cc65102c1dc429274327223ab977a28c0f6c3da56ffd0f4cfe3098b2b2db7311b76b60b24895902f290ecdbd4b0b0edaa907af7781",
            "file": "src/app/dashboard/pages/projects-list/projects-list.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-projects-list",
            "styleUrls": [
                "./projects-list.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projects-list.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projects$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "workspace$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { WorkspaceService } from '../../services/workspace.service';\nimport { map, Observable } from 'rxjs';\nimport { Project } from '../../interfaces/project.interface';\nimport { Workspace } from '../../interfaces/workspace.interface';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { DialogService } from 'src/app/_main/services/dialog.service';\nimport { ProjectService } from '../../services/project.service';\n\n@Component({\n  selector: 'app-projects-list',\n  templateUrl: './projects-list.page.html',\n  styleUrls: ['./projects-list.page.scss'],\n})\nexport class ProjectsListPage {\n  workspace$: Observable<Workspace>;\n  projects$: Observable<Project[]>;\n\n  faPlus = faPlus;\n\n  private workspaceId!: number;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private workspaceService: WorkspaceService,\n    private projectService: ProjectService,\n    private dialogService: DialogService,\n    private router: Router,\n  ) {\n    const { workspaceId } = this.activatedRoute.snapshot.params;\n\n    this.workspaceId = workspaceId;\n\n    this.workspace$ = this.workspaceService.get(workspaceId);\n    this.projects$ = this.workspace$.pipe(\n      map((workspace) => workspace.projectsWithPrivileges.map((project) => project.project)),\n    );\n  }\n\n  public editProject(project: Project) {\n    this.router.navigate(['/', this.workspaceId, project.id, 'edit']);\n  }\n\n  public openProject(project: Project) {\n    this.router.navigate(['/', this.workspaceId, project.id]);\n  }\n\n  deleteProject(project: Project) {\n    this.dialogService.confirmProjectDelete(project).subscribe(() => {\n      this.projectService.delete(project.id).subscribe(() => {\n        window.location.reload();\n      });\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n",
                    "styleUrl": "./projects-list.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<!-- Page header -->\r\n<section class=\"flex justify-between items-center\">\r\n  <h2 class=\"typo-heading-5\">{{ (workspace$ | async)?.name }}</h2>\r\n  <app-button variant=\"primary\" routerLink=\"create\" [icon]=\"faPlus\" i18n>New project</app-button>\r\n</section>\r\n\r\n<!-- Table -->\r\n<table mat-table [dataSource]=\"(projects$ | async) || []\">\r\n\r\n  <!-- Name column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Name</th>\r\n    <td mat-cell *matCellDef=\"let row\" class=\"clickable-cell\" (click)=\"openProject(row)\"> {{ row.name }} </td>\r\n  </ng-container>\r\n\r\n  <!-- Statistics column -->\r\n  <ng-container matColumnDef=\"statistics\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Statistics</th>\r\n    <td mat-cell *matCellDef=\"let row\"> - </td>\r\n  </ng-container>\r\n\r\n  <!-- Last update column -->\r\n  <ng-container matColumnDef=\"lastUpdate\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Last update</th>\r\n    <td mat-cell *matCellDef=\"let row\"> - </td>\r\n  </ng-container>\r\n\r\n  <!-- Actions column -->\r\n  <ng-container matColumnDef=\"actions\">\r\n    <th mat-header-cell *matHeaderCellDef i18n></th>\r\n    <td mat-cell *matCellDef=\"let row\" class=\"action-cell\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"flex items-center\">\r\n        <app-icon icon=\"matMoreVert\"></app-icon>\r\n      </button>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"editProject(row)\">\r\n          <span i18n>Edit project</span>\r\n        </button>\r\n        <button mat-menu-item class=\"important\" (click)=\"deleteProject(row)\">\r\n          <span i18n>Delete project</span>\r\n        </button>\r\n      </mat-menu>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"['name', 'statistics', 'lastUpdate', 'actions']\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: ['name', 'statistics', 'lastUpdate', 'actions'];\"></tr>\r\n</table>\r\n"
        },
        {
            "name": "RegisterPage",
            "id": "component-RegisterPage-a34c34c8c155824488dd64b47f62f8b92876f96938e5e8d5af63952e98e1c02c0dfcf4ead13d35836bd675d22cd722962b444ab77273356cb48b0485258c95f7",
            "file": "src/app/auth/pages/register/register.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', [requiredValidator(), emailValidator()], []),\n    password: new FormControl('', [requiredValidator(), passwordValidator()], []),\n    repeatPassword: new FormControl(\n      '',\n      [\n        requiredValidator(),\n        passwordValidator(),\n        sameAsValidator('password', $localize`Given passwords are not the same `),\n      ],\n      [],\n    ),\n    name: new FormControl('', [requiredValidator()], []),\n    surname: new FormControl('', [requiredValidator()], []),\n    username: new FormControl('', [requiredValidator()], []),\n    agreements: new FormControl('', [requiredValidator()], []),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Form group for register.</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nForm group for register.\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RegisterStage",
                    "defaultValue": "RegisterStage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "registerSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "stage",
                    "defaultValue": "RegisterStage.IMPORTANT_DATA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegisterStage",
                    "optional": true,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextStage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousStage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { emailValidator } from '@main/validators/email.validator';\nimport { passwordValidator } from '@main/validators/password.validator';\nimport { sameAsValidator } from '@main/validators/same-as.validator';\nimport { catchError, EMPTY, Subscription } from 'rxjs';\nimport { requiredValidator } from 'src/app/_main/validators/required.validator';\nimport { AuthService } from '../../services/auth.service';\n\nenum RegisterStage {\n  IMPORTANT_DATA,\n  PERSONAL_DATA,\n}\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  private registerSubscription?: Subscription;\n  public stage?: RegisterStage = RegisterStage.IMPORTANT_DATA;\n  RegisterStage = RegisterStage;\n\n  public error?: string;\n\n  /**\n   * Form group for register.\n   */\n  public form = new FormGroup({\n    email: new FormControl('', [requiredValidator(), emailValidator()], []),\n    password: new FormControl('', [requiredValidator(), passwordValidator()], []),\n    repeatPassword: new FormControl(\n      '',\n      [\n        requiredValidator(),\n        passwordValidator(),\n        sameAsValidator('password', $localize`Given passwords are not the same `),\n      ],\n      [],\n    ),\n    name: new FormControl('', [requiredValidator()], []),\n    surname: new FormControl('', [requiredValidator()], []),\n    username: new FormControl('', [requiredValidator()], []),\n    agreements: new FormControl('', [requiredValidator()], []),\n  });\n\n  nextStage() {\n    let formFields: string[] = ['email', 'password', 'repeatPassword', 'agreements'];\n    let correctData: boolean = true;\n    for (let field of formFields) {\n      this.form.get(field)?.markAsTouched();\n      this.form.get(field)?.updateValueAndValidity();\n      if (this.form.get(field)?.invalid) {\n        correctData = false;\n      }\n    }\n    if (correctData) {\n      this.stage = RegisterStage.PERSONAL_DATA;\n    }\n  }\n\n  previousStage() {\n    this.stage = RegisterStage.IMPORTANT_DATA;\n  }\n\n  register() {\n    if (this.registerSubscription && !this.registerSubscription.closed) return;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.valid) {\n      this.registerSubscription = this.authService\n        .register(this.form.value)\n        .pipe(\n          catchError((e) => {\n            this.handleError(e);\n            return EMPTY;\n          }),\n        )\n        .subscribe(() => {\n          this.router.navigate(['/']);\n        });\n    }\n  }\n\n  handleError(error: any) {\n    switch (error.status) {\n      case 422:\n        switch (error.error.message) {\n          case 'this email is already taken':\n            this.error = $localize`Email is already taken`;\n            break;\n          case 'this username is already taken':\n            this.error = $localize`Username is already taken`;\n        }\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\r\n  width: calc(100% - 80px);\r\n  height: 64px;\r\n  margin-top: 20px;\r\n  background-image: url('/assets/metadata/logo_with_name.svg');\r\n  background-position: 0 50%;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n}\r\n\r\n.main {\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-neutral-800);\r\n\r\n  .box {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .form-side {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      background-color: var(--color-gray-800);\r\n\r\n      form {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        justify-content: center;\r\n        padding: 4rem;\r\n\r\n        h2 {\r\n          margin-bottom: 0.5rem;\r\n        }\r\n\r\n        p {\r\n          margin-bottom: 1.5rem;\r\n        }\r\n\r\n        .agreements {\r\n          display: flex;\r\n        }\r\n\r\n        app-input {\r\n          width: 100%;\r\n        }\r\n\r\n        app-button {\r\n          align-self: flex-end;\r\n        }\r\n\r\n        a {\r\n          color: var(--color-link);\r\n          cursor: pointer;\r\n          transition: color 0.2s ease;\r\n\r\n          &:hover {\r\n            color: var(--color-link-hover);\r\n          }\r\n        }\r\n\r\n        .buttons {\r\n          display: flex;\r\n          width: 100%;\r\n          justify-content: space-between;\r\n        }\r\n      }\r\n    }\r\n\r\n    .image-side {\r\n      background-color: var(--color-gray-700);\r\n    }\r\n  }\r\n}\r\n\r\n@screen sm {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen md {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen lg {\r\n  .main {\r\n    .box {\r\n      width: 950px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 450px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen xl {\r\n  .main {\r\n    .box {\r\n      width: 1240px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 520px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 720px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./register.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section class=\"main\">\r\n  <section class=\"box\">\r\n    <section class=\"form-side\">\r\n      <div class=\"logo\" routerLink=\"/\"></div>\r\n      <form [formGroup]=\"form\" (submit)=\"register()\">\r\n        <div>\r\n          <h2 class=\"typo-heading-5\" i18n>Register</h2>\r\n          <p class=\"typo-body\" i18n>This is a secure site. Please enter your register information or if you have an\r\n            account already, <a routerLink=\"/auth/login\">click here</a> to login.</p>\r\n        </div>\r\n\r\n        <div *ngIf=\"error\" class=\"error-box\">\r\n          {{ error }}\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"stage===RegisterStage.IMPORTANT_DATA\">\r\n          <app-input formControlName=\"email\" type=\"email\" placeholder=\"name@example.com\" floatingLabel=\"Email\"\r\n            i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n          <app-input formControlName=\"password\" type=\"password\" placeholder=\"●●●●●●●\" floatingLabel=\"Password\"\r\n            i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n          <app-input formControlName=\"repeatPassword\" type=\"password\" placeholder=\"●●●●●●●\"\r\n            floatingLabel=\"Repeat password\" i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n          <div class=\"agreements\">\r\n            <app-checkbox formControlName=\"agreements\" i18n>\r\n              I agree to the <a>End User License Agreement</a> and <a>Privacy Statement</a>.\r\n            </app-checkbox>\r\n          </div>\r\n\r\n          <app-button variant=\"primary\" type=\"button\" (click)=\"nextStage()\" i18n>Next</app-button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"stage===RegisterStage.PERSONAL_DATA\">\r\n          <app-input formControlName=\"name\" type=\"text\" placeholder=\"John\" floatingLabel=\"Name\" i18n-floatingLabel=\"first name of a person\"\r\n            i18n-placeholder></app-input>\r\n\r\n          <app-input formControlName=\"surname\" type=\"text\" placeholder=\"Bayer\" floatingLabel=\"Surname\"\r\n            i18n-floatingLabel i18n-placeholder></app-input>\r\n\r\n          <app-input formControlName=\"username\" type=\"text\" placeholder=\"John98\" floatingLabel=\"Username\"\r\n            i18n-floatingLabel i18n-placeholder></app-input>\r\n          <div class=\"buttons\">\r\n            <app-button variant=\"primary\" type=\"button\" (click)=\"previousStage()\" i18n>Back</app-button>\r\n            <app-button variant=\"primary\" i18n>Register</app-button>\r\n          </div>\r\n        </ng-container>\r\n      </form>\r\n    </section>\r\n    <section class=\"image-side\">\r\n\r\n    </section>\r\n  </section>\r\n</section>\r\n"
        },
        {
            "name": "RestoreAccountPage",
            "id": "component-RestoreAccountPage-8c1017f8fd31488acac82841816b0c2d3691c1f116c1e37ba37be8600add8a5a26588e744be106623e6a151f5bcc346acd536972d84851bd1d0f6169cdde8a8f",
            "file": "src/app/auth/pages/restore-account/restore-account.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-restore-account-page",
            "styleUrls": [
                "./restore-account.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./restore-account.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '@auth/services/auth.service';\n\n@Component({\n  selector: 'app-restore-account-page',\n  templateUrl: './restore-account.page.html',\n  styleUrls: ['./restore-account.page.scss'],\n})\nexport class RestoreAccountPage {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  logOut() {\n    this.authService.logout().subscribe();\n  }\n\n  restore() {\n    this.authService.recoverAccount().subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".logo {\r\n  width: calc(100% - 80px);\r\n  height: 64px;\r\n  margin-top: 20px;\r\n  background-image: url('/assets/metadata/logo_with_name.svg');\r\n  background-position: 0 50%;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n}\r\n\r\n.main {\r\n  display: flex;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-neutral-800);\r\n\r\n  .box {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    .form-side {\r\n      display: flex;\r\n      width: 100%;\r\n      height: 100%;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      background-color: var(--color-gray-800);\r\n\r\n      form {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        justify-content: center;\r\n        padding: 4rem;\r\n\r\n        h2 {\r\n          margin-bottom: 0.5rem;\r\n        }\r\n\r\n        p {\r\n          margin-bottom: 1.5rem;\r\n        }\r\n\r\n        .actions {\r\n          display: flex;\r\n          width: 100%;\r\n          justify-content: flex-end;\r\n          margin-bottom: 1rem;\r\n\r\n          > *:not(:last-child) {\r\n            margin-right: 1rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .image-side {\r\n      background-color: var(--color-gray-700);\r\n    }\r\n  }\r\n}\r\n\r\n@screen sm {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen md {\r\n  .main {\r\n    .box {\r\n      width: 500px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen lg {\r\n  .main {\r\n    .box {\r\n      width: 950px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 500px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 450px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@screen xl {\r\n  .main {\r\n    .box {\r\n      width: 1240px;\r\n      height: 770px;\r\n\r\n      .form-side {\r\n        width: 520px;\r\n      }\r\n\r\n      .image-side {\r\n        width: 720px;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./restore-account.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section class=\"main\">\r\n  <section class=\"box\">\r\n    <section class=\"form-side\">\r\n      <div class=\"logo\" routerLink=\"/\"></div>\r\n      <form>\r\n        <div>\r\n          <h2 class=\"typo-heading-5\" i18n>Restore account</h2>\r\n          <p class=\"typo-body\" i18n>Your account has been deleted. You can restore your account within 7 days of\r\n            deletion.</p>\r\n        </div>\r\n\r\n        <div class=\"actions\">\r\n          <app-button variant=\"secondary\" (click)=\"logOut()\" i18n>Log out</app-button>\r\n          <app-button variant=\"primary\" (click)=\"restore()\" i18n>Restore</app-button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n    <section class=\"image-side\">\r\n\r\n    </section>\r\n  </section>\r\n</section>\r\n"
        },
        {
            "name": "SchedulePage",
            "id": "component-SchedulePage-9e65857e375ccaa27513d9210055928261c4604d0859ef25b238caa205e9bb831693ceaed21616fbcfd96f47cef03ef5b88200ff1acf0932574fb92232c43deb",
            "file": "src/app/tasks/pages/schedule/schedule.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule-page",
            "styleUrls": [
                "./schedule.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cursor",
                    "defaultValue": "dayjs().toDate()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "limitAfter",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "limitBefore",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "project$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "schedule$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Schedule>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { ProjectService } from '@dashboard/services/project.service';\nimport { Schedule } from '@tasks/interfaces/schedule.interface';\nimport { TaskService } from '@tasks/services/task.service';\nimport * as dayjs from 'dayjs';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-schedule-page',\n  templateUrl: './schedule.page.html',\n  styleUrls: ['./schedule.page.scss'],\n})\nexport class SchedulePage implements OnInit {\n  public schedule$: Observable<Schedule>;\n  public project$: Observable<Project>;\n\n  public cursor = dayjs().toDate();\n  public limitAfter = 20;\n  public limitBefore = 0;\n\n  public get dates() {\n    const { cursor, limitBefore, limitAfter } = this;\n\n    const dates = [];\n\n    for (let i = 0; i < limitBefore + limitAfter + 1; i++) {\n      dates.push(\n        dayjs(cursor)\n          .subtract(limitBefore - i, 'day')\n          .toDate(),\n      );\n    }\n\n    return dates;\n  }\n\n  constructor(\n    private taskService: TaskService,\n    private activatedRoute: ActivatedRoute,\n    private projectService: ProjectService,\n  ) {\n    const { projectId } = this.activatedRoute.snapshot.params;\n\n    this.schedule$ = this.taskService.schedule(projectId);\n    this.project$ = this.projectService.get(projectId);\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n:host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n\r\n.schedule {\r\n  display: flex;\r\n  width: 100%;\r\n  padding-left: 10px;\r\n\r\n  // Sections\r\n\r\n  .people-header {\r\n    width: 80px;\r\n    height: 100%;\r\n    flex-shrink: 0;\r\n    margin-right: 1rem;\r\n    background-color: var(--color-secondary-800);\r\n    border-radius: var(--border-radius);\r\n  }\r\n\r\n  .timeline {\r\n    width: 100%;\r\n    height: 100%;\r\n    flex-grow: 1;\r\n    background-color: var(--color-secondary-800);\r\n    border-radius: var(--border-radius);\r\n    overflow-x: auto;\r\n\r\n    .cell {\r\n      width: 130px;\r\n      border-right: 1px solid var(--color-secondary-600);\r\n    }\r\n\r\n    .group-event-row {\r\n      .cell {\r\n        border-top: 1px solid var(--color-secondary-600);\r\n      }\r\n    }\r\n\r\n    .single-person-row {\r\n      .cell {\r\n        border-top: 1px solid var(--color-secondary-600);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Rows\r\n  .header-event-row,\r\n  .group-event-row,\r\n  .single-person-row {\r\n    display: flex;\r\n  }\r\n\r\n  .header-row {\r\n    @include typo-title;\r\n\r\n    display: flex;\r\n    height: 64px;\r\n    color: var(--color-text);\r\n  }\r\n\r\n  .group-event-row {\r\n    display: flex;\r\n    height: 30px;\r\n  }\r\n\r\n  .single-person-row {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100px;\r\n  }\r\n\r\n  .cell {\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100%;\r\n    flex-direction: column;\r\n    flex-shrink: 0;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    .number {\r\n      @include typo-title;\r\n    }\r\n\r\n    .day-of-week {\r\n      @include typo-body;\r\n    }\r\n\r\n    .task {\r\n      width: 100%;\r\n      height: 100%;\r\n      padding: 10px;\r\n      background-color: var(--color-primary-500);\r\n      border-radius: var(--border-radius);\r\n      color: var(--color-text);\r\n    }\r\n  }\r\n}\r\n\r\n.avatar {\r\n  @include typo-heading-5;\r\n\r\n  display: flex;\r\n  width: 40px;\r\n  height: 40px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-primary-500);\r\n  border-radius: 50%;\r\n  color: var(--color-text);\r\n  text-transform: uppercase;\r\n}\r\n",
                    "styleUrl": "./schedule.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "dates": {
                    "name": "dates",
                    "getSignature": {
                        "name": "dates",
                        "type": "",
                        "returnType": "",
                        "line": 23
                    }
                }
            },
            "templateData": "<app-view-options [project]=\"(project$ | async)!\"></app-view-options>\r\n\r\n<div class=\"schedule\" *ngLet=\"schedule$ | async as schedule\">\r\n  <div class=\"people-header\">\r\n    <div class=\"header-row\">\r\n      <div class=\"cell\">\r\n        {{ cursor | date:'MMMM' }}\r\n      </div>\r\n    </div>\r\n    <div class=\"group-event-row\">\r\n      <!-- Nothing here, only spacing -->\r\n    </div>\r\n    <div *ngFor=\"let singleSchedule of schedule\" class=\"single-person-row\">\r\n      <!-- Person avatar here -->\r\n      <div class=\"cell\">\r\n        <div class=\"avatar\">\r\n          {{ singleSchedule.user.name.substring(0, 1) }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"timeline\">\r\n    <div class=\"header-row\">\r\n      <!-- Day names here -->\r\n      <div class=\"cell\" *ngFor=\"let date of dates\">\r\n        <span class=\"number\">{{ date | date:'d' }}</span>\r\n        <span class=\"day-of-week\">{{ date | date:'EEE' }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"group-event-row\">\r\n      <!-- Group event goes here -->\r\n      <div class=\"cell\" *ngFor=\"let date of dates\"></div>\r\n    </div>\r\n    <div class=\"single-person-row\" *ngFor=\"let singleSchedule of schedule\">\r\n      <!-- Personal events here -->\r\n      <div class=\"cell\" *ngFor=\"let date of dates\">\r\n        <ng-container *ngLet=\"singleSchedule.tasks.get(date | date:'YYYY-MM-dd') as task\">\r\n          <div class=\"task\" *ngIf=\"task\">\r\n            <span class=\"name\">\r\n              {{ task.name }}\r\n            </span>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-60be3f6c37a5e628117ce1374343b5bc0cb262b84176d5f0afbc8059019761e97a13051d2547180098e50d24836b9b180e7f0e17e7d38d4c79338b5bf9d8a8f9",
            "file": "src/app/_main/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "floatingLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "optionsMap",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<any | any>",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "queryOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<OptionComponent>",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "OptionComponent"
                        }
                    ]
                },
                {
                    "name": "selected$",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "yet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "control to be used by the accessor",
                    "line": 83,
                    "rawdescription": "\n\nControl passed from DOM to the component, contains all the information about form control\n",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ContentChildren, Input, OnInit, QueryList } from '@angular/core';\nimport { ControlAccessor } from '@main/classes/control-accessor.class';\nimport { Subject } from 'rxjs';\nimport { OptionComponent } from '../option/option.component';\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n})\nexport class SelectComponent extends ControlAccessor implements AfterViewInit, OnInit {\n  @ContentChildren(OptionComponent) queryOptions?: QueryList<OptionComponent>;\n  options?: any[];\n  optionsMap?: Map<any, any> = new Map();\n  @Input() floatingLabel: string = '';\n  yet: boolean = false;\n\n  selected$: Subject<any> = new Subject<any>();\n\n  get selected() {\n    return this.optionsMap?.get(this.control.value);\n  }\n\n  ngOnInit(): void {\n    this.control.valueChanges.subscribe((value) => {\n      console.log('Value changed to: ' + value);\n      this.optionsMap?.forEach((option, key) => {\n        const selected = key === value;\n        option.selected = selected;\n        if (selected) {\n          this.selected$.next(option);\n        }\n      });\n    });\n\n    this.selected$.subscribe((val) => {\n      console.log(val);\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.queryOptions?.changes.subscribe((options) => {\n      console.log('updated options');\n      this.updateOptions();\n    });\n    this.updateOptions();\n  }\n\n  updateOptions() {\n    console.log(this.control.value);\n\n    this.yet = false;\n    this.options = this.queryOptions?.map((x) => {\n      const option = { value: x.value, viewValue: x.viewValue, icon: x.icon };\n\n      this.optionsMap!.set(x.value, option);\n      return option;\n    });\n    setTimeout(() => {\n      this.selected$.next(this.optionsMap?.get(this.control.value));\n      this.yet = true;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ControlAccessor",
            "implements": [
                "AfterViewInit",
                "OnInit"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "",
                        "line": 20
                    }
                }
            },
            "templateData": "<mat-form-field appearance=\"outline\">\r\n  <mat-label>{{ floatingLabel }}</mat-label>\r\n  <mat-select [formControl]=\"control\" name=\"test\" disableOptionCentering=\"true\">\r\n    <mat-select-trigger *ngIf=\"(selected$ | async) as selectedItem\">\r\n      <app-icon *ngIf=\"selectedItem.icon\" [icon]=\"selectedItem.icon\" size=\"15.75px\"></app-icon>\r\n      {{ selectedItem.viewValue }}\r\n    </mat-select-trigger>\r\n    <ng-container *ngIf=\"yet\">\r\n      <mat-option *ngFor=\"let option of options\" [value]=\"option.value\">\r\n        <app-icon *ngIf=\"option.icon\" [icon]=\"option.icon\" size=\"15.75px\"></app-icon>\r\n        {{ option.viewValue }}\r\n      </mat-option>\r\n    </ng-container>\r\n  </mat-select>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "SettingsAccountPage",
            "id": "component-SettingsAccountPage-4b26602ea96e86ba4a94796cd6f203c9cca954b06089fae0ec418b7bcd8e9b595907f9b3ec2d6861945ca2c8b71932f2888c6c1246d112a1f55ba7c7939d376d",
            "file": "src/app/settings/pages/settings-account/settings-account.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-account-page",
            "styleUrls": [
                "./settings-account.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-account.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    email: new FormControl('', requiredValidator()),\n    name: new FormControl('', requiredValidator()),\n    surname: new FormControl('', requiredValidator()),\n    username: new FormControl('', requiredValidator()),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteAccountMailCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AuthService } from '@auth/services/auth.service';\nimport { UserService } from '@auth/services/user.service';\nimport { requiredValidator } from '@main/validators/required.validator';\n\n@Component({\n  selector: 'app-settings-account-page',\n  templateUrl: './settings-account.page.html',\n  styleUrls: ['./settings-account.page.scss'],\n})\nexport class SettingsAccountPage implements OnInit {\n  constructor(private userService: UserService, private authService: AuthService) {}\n\n  public form = new FormGroup({\n    email: new FormControl('', requiredValidator()),\n    name: new FormControl('', requiredValidator()),\n    surname: new FormControl('', requiredValidator()),\n    username: new FormControl('', requiredValidator()),\n  });\n\n  ngOnInit() {\n    this.userService.getMyself().subscribe((response) => {\n      this.form.patchValue(response);\n    });\n  }\n\n  submit() {\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (this.form.invalid) return;\n\n    this.userService.update(this.form.value).subscribe(() => {});\n  }\n\n  resetPassword() {\n    this.authService.resetPassword(this.form.value.email).subscribe(() => {\n      this.authService.logout().subscribe();\n    });\n  }\n\n  deleteAccountMailCheck() {\n    this.authService.deleteAccount().subscribe(() => {\n      // dodac popup czy na pewno zgadzamy sie na usuniecie konta, jesli tak to infomracja ze zostal wyslany link na maila dezaktywujacy konto i ze ma mozliwosc jego przywrocenia do 7 dni\n      this.authService.logout().subscribe();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  margin-bottom: 2rem;\r\n}\r\n",
                    "styleUrl": "./settings-account.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"typo-heading-5 mb-5\" i18n>Account</h2>\r\n<form [formGroup]=\"form\" (submit)=\"submit()\">\r\n\r\n  <!-- Email -->\r\n  <app-input formControlName=\"email\" type=\"email\" staticLabel=\"Email\" placeholder=\"test@example.com\" class=\"full-width\"\r\n    i18n-staticLabel i18n-placeholder>\r\n  </app-input>\r\n\r\n  <!-- Username -->\r\n  <app-input formControlName=\"username\" type=\"text\" staticLabel=\"Username\" placeholder=\"John98\" class=\"full-width\"\r\n    i18n-staticLabel i18n-placeholder>\r\n  </app-input>\r\n\r\n  <!-- Name -->\r\n  <app-input formControlName=\"name\" type=\"text\" staticLabel=\"Name\" placeholder=\"John\" class=\"full-width\"\r\n    i18n-staticLabel=\"first name of a person\" i18n-placeholder>\r\n  </app-input>\r\n\r\n  <!-- Surname -->\r\n  <app-input formControlName=\"surname\" type=\"text\" staticLabel=\"Surname\" placeholder=\"Smith\" class=\"full-width\"\r\n    i18n-staticLabel i18n-placeholder>\r\n  </app-input>\r\n\r\n  <!-- Actions section -->\r\n  <div class=\"actions\">\r\n    <app-button variant=\"primary\" i18n>Update profile</app-button>\r\n  </div>\r\n\r\n  <!-- Change password card -->\r\n  <app-card class=\"block mb-10\">\r\n    <div class=\"card-title\" i18n>Change password</div>\r\n    <div class=\"card-content\" i18n>It's highly recommended to change the password every 30 days. It will increase your\r\n      account security.</div>\r\n    <div class=\"card-actions\">\r\n      <app-button type=\"button\" (click)=\"resetPassword()\" variant=\"secondary\" i18n>Change password</app-button>\r\n    </div>\r\n  </app-card>\r\n\r\n  <!-- Delete account card -->\r\n  <app-card class=\"important\">\r\n    <div class=\"card-title\" i18n>Delete account</div>\r\n    <div class=\"card-content\" i18n>Delete your account permanently. All not shared owned projects will also be deleted.\r\n      This action is reversible in period of 7 days - you need to log in to your account in this time to revert your\r\n      account deletion.</div>\r\n    <div class=\"card-actions\">\r\n      <app-button type=\"button\" (click)=\"deleteAccountMailCheck()\" variant=\"important\" i18n>Delete account</app-button>\r\n    </div>\r\n  </app-card>\r\n\r\n</form>\r\n"
        },
        {
            "name": "SettingsIntegrationsPage",
            "id": "component-SettingsIntegrationsPage-07b33b2b7b64e525f50d5bb77e9fad3f257e57aaf89584400f6c70707ed8dd49c6ffcf420880274294706f224a4ba95bce9dfc9652ccf82b4224b638ad6cc6fe",
            "file": "src/app/settings/pages/settings-integrations/settings-integrations.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-integrations",
            "styleUrls": [
                "./settings-integrations.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-integrations.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "gitHubAccounts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GitAccountWithUsage[]>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "disconnect",
                    "args": [
                        {
                            "name": "account",
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConnectedProjects",
                    "args": [
                        {
                            "name": "account",
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "account",
                            "type": "GitAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadGitHubIntegration",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { GitAccount } from '@dashboard/interfaces/git-integration.interface';\nimport { GitIntegrationService } from '@dashboard/services/git-integration.service';\nimport { map, Observable, take } from 'rxjs';\n\ninterface GitAccountWithUsage {\n  account: GitAccount;\n  usage: Observable<string>;\n}\n\n@Component({\n  selector: 'app-settings-integrations',\n  templateUrl: './settings-integrations.page.html',\n  styleUrls: ['./settings-integrations.page.scss'],\n})\nexport class SettingsIntegrationsPage implements OnInit {\n  public gitHubAccounts$!: Observable<GitAccountWithUsage[]>;\n\n  constructor(private gitIntegrationService: GitIntegrationService) {}\n\n  ngOnInit() {\n    this.loadGitHubIntegration();\n  }\n\n  public loadGitHubIntegration(): void {\n    this.gitHubAccounts$ = this.gitIntegrationService.getConnectedGitHubAccounts().pipe(\n      map((accounts) => {\n        return accounts.map((account) => {\n          return {\n            account,\n            usage: this.getConnectedProjects(account).pipe(take(1)),\n          };\n        });\n      }),\n    );\n  }\n\n  public disconnect(account: GitAccount): void {\n    this.gitIntegrationService.deleteConnectedGitHubAccount(account.id).subscribe(({ link }) => {\n      window.open(link, '_blank');\n    });\n  }\n\n  public getConnectedProjects(account: GitAccount): Observable<string> {\n    return this.gitIntegrationService\n      .getGitHubAccountConnectedProjects(account)\n      .pipe(map((projects) => projects.map((project: any) => project.name).join(', ')));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list {\r\n  > * {\r\n    display: block;\r\n    margin-top: 1rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./settings-integrations.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"typo-heading-5 mb-5\" i18n>Integrations</h2>\r\n\r\n<!-- GitHub integrations list -->\r\n<ng-container>\r\n  <app-list-group label=\"GitHub\" i18n-label></app-list-group>\r\n  <div class=\"list\">\r\n    <app-integration-entry *ngFor=\"let o of gitHubAccounts$ | async\" [label]=\"o.account.gitHubUsername\"\r\n      [integration]=\"o.account\" (disconnect)=\"disconnect($event)\" [suspended]=\"o.account.suspended\"\r\n      [description]=\"o.usage | async\" i18n-label>\r\n    </app-integration-entry>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SettingsLocalizationPage",
            "id": "component-SettingsLocalizationPage-f7241af9ef8ee9777a9b80d94283651a11b3a2fe8cd88d5f23e592f5d8902078326549081010536368875e6d54671d91d7d4cae2cd8a5343534175da68fbb61f",
            "file": "src/app/settings/pages/settings-localization/settings-localization.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-localization-page",
            "styleUrls": [
                "./settings-localization.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-localization.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateFormats",
                    "defaultValue": "[\n    $localize`YYYY-MM-DD`,\n    $localize`DD-MM-YYYY`,\n    $localize`MM/DD/YYYY`,\n    $localize`DD.MM.YYYY`,\n  ].map((format) => ({\n    format,\n    example: dayjs().format(format),\n  }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    language: new FormControl('', requiredValidator()),\n    dateFormat: new FormControl(''),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languages",
                    "defaultValue": "[\n    {\n      code: 'de-DE',\n      name: 'Deutsch',\n    },\n    {\n      code: 'en-GB',\n      name: 'English (British)',\n    },\n    {\n      code: 'es-ES',\n      name: 'Español',\n    },\n    {\n      code: 'it-IT',\n      name: 'Italiano',\n    },\n    {\n      code: 'pl-PL',\n      name: 'Polski',\n    },\n    {\n      code: 'en-US',\n      name: 'English (American)',\n    },\n    {\n      code: 'uk-UA',\n      name: 'Українська',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { requiredValidator } from '@main/validators/required.validator';\nimport * as dayjs from 'dayjs';\n\n@Component({\n  selector: 'app-settings-localization-page',\n  templateUrl: './settings-localization.page.html',\n  styleUrls: ['./settings-localization.page.scss'],\n})\nexport class SettingsLocalizationPage {\n  public form = new FormGroup({\n    language: new FormControl('', requiredValidator()),\n    dateFormat: new FormControl(''),\n  });\n\n  languages = [\n    {\n      code: 'de-DE',\n      name: 'Deutsch',\n    },\n    {\n      code: 'en-GB',\n      name: 'English (British)',\n    },\n    {\n      code: 'es-ES',\n      name: 'Español',\n    },\n    {\n      code: 'it-IT',\n      name: 'Italiano',\n    },\n    {\n      code: 'pl-PL',\n      name: 'Polski',\n    },\n    {\n      code: 'en-US',\n      name: 'English (American)',\n    },\n    {\n      code: 'uk-UA',\n      name: 'Українська',\n    },\n  ];\n\n  dateFormats = [\n    $localize`YYYY-MM-DD`,\n    $localize`DD-MM-YYYY`,\n    $localize`MM/DD/YYYY`,\n    $localize`DD.MM.YYYY`,\n  ].map((format) => ({\n    format,\n    example: dayjs().format(format),\n  }));\n\n  constructor() {}\n\n  changeLanguage() {\n    location.href = `https://workflow.adiantek.ovh/${this.form.value.language}/settings/localization`;\n  }\n\n  submit() {\n    this.changeLanguage();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  margin-bottom: 1rem;\r\n}\r\n",
                    "styleUrl": "./settings-localization.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 56
            },
            "templateData": "<h2 class=\"typo-heading-5 mb-5\" i18n>Localization</h2>\r\n<form [formGroup]=\"form\" (submit)=\"submit()\">\r\n\r\n  <!-- Language -->\r\n  <app-select formControlName=\"language\" floatingLabel=\"Language\" class=\"full-width\" i18n-floatingLabel>\r\n    <app-option *ngFor=\"let language of languages\" [value]=\"language.code\">{{ language.name }}</app-option>\r\n  </app-select>\r\n\r\n  <!-- Date format -->\r\n  <app-select formControlName=\"dateFormat\" floatingLabel=\"Date format\" class=\"full-width\" i18n-floatingLabel>\r\n    <app-option *ngFor=\"let dateFormat of dateFormats\" [value]=\"dateFormat.format\">{{ dateFormat.example }}</app-option>\r\n  </app-select>\r\n\r\n  <!-- Actions section -->\r\n  <div class=\"actions\">\r\n    <app-button variant=\"primary\" i18n>Save settings</app-button>\r\n  </div>\r\n\r\n</form>"
        },
        {
            "name": "SettingsPage",
            "id": "component-SettingsPage-73c8a2e740f1a8d81a79a922243e6f0e0e1acf8b87af9ef7f1451c28fc6cd1ad57f4b78c8f85053b6c825ebc4668d02789f2e2d87c9af0efab677eac578952ae",
            "file": "src/app/settings/pages/settings/settings.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-page",
            "styleUrls": [
                "./settings.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faAddressCard",
                    "defaultValue": "faAddressCard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "faCircleNodes",
                    "defaultValue": "faCircleNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "faGlobe",
                    "defaultValue": "faGlobe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "faUser",
                    "defaultValue": "faUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { faAddressCard, faCircleNodes, faGlobe, faUser } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-settings-page',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage implements OnInit {\n  faUser = faUser;\n  faGlobe = faGlobe;\n  faCircleNodes = faCircleNodes;\n  faAddressCard = faAddressCard;\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\nsection {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.sidebar {\r\n  width: 315px;\r\n  height: 100%;\r\n  padding: 40px;\r\n\r\n  a {\r\n    @include typo-body;\r\n\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    padding: 8px 10px;\r\n    margin-bottom: 0.35rem;\r\n    border-radius: var(--border-radius);\r\n    color: var(--color-text);\r\n    transition: background-color 0.2s ease-in-out;\r\n\r\n    app-icon {\r\n      margin-right: 1rem;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: var(--color-secondary-500);\r\n    }\r\n\r\n    &.active {\r\n      background-color: var(--color-secondary-500);\r\n\r\n      &::before {\r\n        position: absolute;\r\n        top: 10%;\r\n        left: -10px;\r\n        width: 4px;\r\n        height: 80%;\r\n        background-color: var(--color-primary-700);\r\n        border-radius: var(--border-radius);\r\n        content: '';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.content {\r\n  width: 100%;\r\n  max-width: 800px;\r\n  padding: 40px;\r\n}\r\n",
                    "styleUrl": "./settings.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section>\r\n\r\n  <!-- Sidebar navigation -->\r\n  <nav class=\"sidebar\">\r\n    <ul>\r\n\r\n      <!-- Account settings -->\r\n      <li>\r\n        <a routerLink=\"/settings/account\" routerLinkActive=\"active\">\r\n          <app-icon [icon]=\"faUser\" size=\"16px\"></app-icon>\r\n          <span>Account</span>\r\n        </a>\r\n      </li>\r\n\r\n      <!-- Localization settings -->\r\n      <li>\r\n        <a routerLink=\"/settings/localization\" routerLinkActive=\"active\">\r\n          <app-icon [icon]=\"faGlobe\" size=\"16px\"></app-icon>\r\n          <span>Localization</span>\r\n        </a>\r\n      </li>\r\n\r\n      <!-- Integrations settings -->\r\n      <li>\r\n        <a routerLink=\"/settings/integrations\" routerLinkActive=\"active\">\r\n          <app-icon [icon]=\"faCircleNodes\" size=\"16px\"></app-icon>\r\n          <span>Integrations</span>\r\n        </a>\r\n      </li>\r\n\r\n      <!-- Sessions settings -->\r\n      <li>\r\n        <a routerLink=\"/settings/sessions\" routerLinkActive=\"active\">\r\n          <app-icon [icon]=\"faAddressCard\" size=\"16px\"></app-icon>\r\n          <span>Sessions</span>\r\n        </a>\r\n      </li>\r\n\r\n    </ul>\r\n  </nav>\r\n\r\n  <!-- Content of the settings page -->\r\n  <div class=\"content\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n\r\n</section>\r\n"
        },
        {
            "name": "SettingsSessionsPage",
            "id": "component-SettingsSessionsPage-90ee528774918b0a1bc12a51be2749b94c3c53f322db387339635a5582328bdb3123b8f6ac525c8e221ac513f614e57394890dd1db2e80f98a793fc61c3941c5",
            "file": "src/app/settings/pages/settings-sessions/settings-sessions.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-sessions",
            "styleUrls": [
                "./settings-sessions.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-sessions.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sessionsList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserSession[]>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "agentType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "agent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "agent",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSession",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport * as dayjs from 'dayjs';\nimport { Observable } from 'rxjs';\nimport * as UAParser from 'ua-parser-js';\nimport { UserSession } from '../../interfaces/session.interface';\nimport { SessionsService } from '../../services/sessions.service';\n\n@Component({\n  selector: 'app-settings-sessions',\n  templateUrl: './settings-sessions.page.html',\n  styleUrls: ['./settings-sessions.page.scss'],\n})\nexport class SettingsSessionsPage implements OnInit {\n  public sessionsList$!: Observable<UserSession[]>;\n\n  constructor(private sessionService: SessionsService) {}\n  ngOnInit() {\n    this.sessionsList$ = this.sessionService.list();\n  }\n\n  changeDate(date: number) {\n    let currentDate = dayjs();\n    let sessionDate = dayjs(date);\n\n    if (currentDate.year() != sessionDate.year()) {\n      if (currentDate.diff(sessionDate, 'month') > 0) {\n        return sessionDate.format('LL');\n      } else {\n        return sessionDate.format('LLL');\n      }\n    } else {\n      return sessionDate.format('MMMM D, h:mm A');\n    }\n  }\n\n  agentType(type: string, agent: string) {\n    let uaParser = new UAParser(agent);\n    let osName = uaParser.getOS().name || 'Unknown system';\n    let browser = uaParser.getBrowser().name || 'Unknown browser';\n    if (type == 'os') {\n      return osName;\n    }\n    if (type == 'browser') {\n      return browser;\n    }\n    return osName + ', ' + browser;\n  }\n\n  deleteSession(id: number) {\n    this.sessionService.delete(id).subscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list {\r\n  > * {\r\n    display: block;\r\n    margin-top: 1rem;\r\n  }\r\n}\r\n\r\n.sessions-entry {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 15px;\r\n  border: 1px solid var(--color-secondary-300);\r\n  border-radius: var(--border-radius);\r\n\r\n  .labels {\r\n    display: flex;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    margin-bottom: 0;\r\n\r\n    .agent,\r\n    .local {\r\n      display: flex;\r\n    }\r\n\r\n    mark {\r\n      display: block;\r\n      margin-left: 0.5rem;\r\n      background-color: transparent;\r\n      color: var(--color-purple-300);\r\n    }\r\n\r\n    .description {\r\n      display: block;\r\n      padding-left: 0.5rem;\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n}\r\n\r\n.actions {\r\n  flex-grow: 1;\r\n  flex-shrink: 0;\r\n}\r\n",
                    "styleUrl": "./settings-sessions.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionService",
                        "type": "SessionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "sessionService",
                        "type": "SessionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"typo-heading-5 mb-5\" i18n>Sessions</h2>\r\n\r\n<!-- Sessions list -->\r\n<ng-container>\r\n  <app-list-group label=\"Where You are logged in\" i18n-label></app-list-group>\r\n  <div class=\"list\">\r\n    <ul *ngFor=\"let session of sessionsList$ | async\" >\r\n      <li>\r\n        <div class=\"sessions-entry\">\r\n          <div class=\"labels\">\r\n            <div class=\"agent\">\r\n              <p class=\"typo-body label\">\r\n                {{ agentType(\"os\", session.userAgent) }},\r\n              </p>\r\n              <p class=\"typo-body description\">\r\n                {{ agentType(\"browser\", session.userAgent) }}\r\n              </p>\r\n            </div>\r\n            <div class=\"local\">\r\n              <p *ngIf=\"session.geoip\" class=\"typo-body\">\r\n                {{ session.geoip.city }}, {{ session.geoip.country }}\r\n              </p>\r\n              <p *ngIf=\"!session.current\" class=\"typo-body description\">\r\n                {{ changeDate(session.lastUsed) }}\r\n              </p>\r\n              <p *ngIf=\"session.current\" class=\"typo-body\">\r\n                <mark i18n>Active now</mark>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div *ngIf=\"!session.current\" class=\"actions\">\r\n            <app-button variant=\"secondary\" (click)=\"deleteSession(session.id)\" i18n>Log out</app-button>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</ng-container>\r\n"
        },
        {
            "name": "SidebarNavigationComponent",
            "id": "component-SidebarNavigationComponent-53b8fdfe3e01e6fa4cc0ce20bb43e3088c7a60de70f742da06e08d4e1e3bbd35d78de389c03bfda363efe062cabdb14af8cd30519cc216a64af0197107b6a657",
            "file": "src/app/_main/components/sidebar-navigation/sidebar-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar-navigation",
            "styleUrls": [
                "./sidebar-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "String",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "workspaceList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace[]>",
                    "optional": true,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { Workspace } from 'src/app/dashboard/interfaces/workspace.interface';\nimport { WorkspaceService } from 'src/app/dashboard/services/workspace.service';\n\n@Component({\n  selector: 'app-sidebar-navigation',\n  templateUrl: './sidebar-navigation.component.html',\n  styleUrls: ['./sidebar-navigation.component.scss'],\n})\nexport class SidebarNavigationComponent {\n  @Input()\n  public icon!: String;\n\n  public workspaceList?: Observable<Workspace[]>;\n\n  createWorkspace() {\n    this.router.navigate(['/', 'create']);\n  }\n\n  constructor(private workspaceService: WorkspaceService, private router: Router) {\n    this.workspaceList = this.workspaceService.list();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 250px;\r\n  height: 100%;\r\n  flex-direction: column;\r\n  flex-shrink: 0;\r\n  background-color: var(--color-secondary-800);\r\n}\r\n\r\n.logo {\r\n  width: calc(100% - 80px);\r\n  height: 64px;\r\n  margin: 10px 20px 0;\r\n  background-image: url('../../../../assets/metadata/logo_with_name.svg');\r\n  background-position: 0 50%;\r\n  background-repeat: no-repeat;\r\n  cursor: pointer;\r\n  transform-origin: 50% 25%;\r\n  transition: transform 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.02);\r\n  }\r\n}\r\n",
                    "styleUrl": "./sidebar-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section>\r\n  <div class=\"logo\" routerLink=\"/\"></div>\r\n  <div class=\"switch-navigation-width\"></div>\r\n</section>\r\n<app-nav-element [showOptions]=\"false\" routerLink=\"/dashboard\" i18n>Dashboard</app-nav-element>\r\n<app-nav-element [showOptions]=\"true\">\r\n  <div i18n>Workspaces</div>\r\n  <div class=\"open-below\">\r\n    <ul>\r\n      <app-nav-element-workspace *ngFor=\"let workspace of workspaceList|async\" [workspace]=\"workspace\">\r\n        {{workspace.name}}\r\n      </app-nav-element-workspace>\r\n    </ul>\r\n  </div>\r\n  <div class=\"options\">\r\n    <button mat-menu-item (click)=\"createWorkspace()\">\r\n      <span i18n>Create workspace</span>\r\n    </button>\r\n    <button mat-menu-item routerLink=\"/\">\r\n      <span i18n>Manage workspaces</span>\r\n    </button>\r\n  </div>\r\n</app-nav-element>\r\n<app-nav-element [showOptions]=\"false\" routerLink=\"/email\" i18n>Emails</app-nav-element>\r\n<app-nav-element [showOptions]=\"false\" routerLink=\"/messages\" i18n>Messages</app-nav-element>"
        },
        {
            "name": "SnackbarComponent",
            "id": "component-SnackbarComponent-79d818bc024d6af59f7a951aed9d63be9ba666f20c759aa87f78c2b4fbd3a53914faffcd3d58d090c951432ce0d49b51da8d42e3f0617a9b1b0d026d753809bb",
            "file": "src/app/_main/components/snackbar/snackbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snackbar",
            "styleUrls": [
                "./snackbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snackbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'gray'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "duration",
                    "defaultValue": "4000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animationName",
                    "defaultValue": "'open'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.animation-name'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faClose",
                    "defaultValue": "faClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAnimationName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.animation-name",
                    "defaultValue": "'open'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport { faClose } from '@fortawesome/free-solid-svg-icons';\nimport { SnackbarService } from '@main/services/snackbar.service';\nimport { SnackbarData } from './snackbar.interface';\n\n@Component({\n  selector: 'app-snackbar',\n  templateUrl: './snackbar.component.html',\n  styleUrls: ['./snackbar.component.scss'],\n})\nexport class SnackbarComponent implements OnInit {\n  faClose = faClose;\n\n  @Input()\n  public uid!: string;\n\n  @Input()\n  public message!: SnackbarData['message'];\n\n  @Input()\n  public duration: SnackbarData['duration'] = 4000;\n\n  @Input()\n  public color: SnackbarData['color'] = 'gray';\n\n  @HostBinding('style.animation-name')\n  public animationName: string = 'open';\n\n  public get colorStyle(): string {\n    switch (this.color) {\n      case 'gray':\n        return 'var(--color-gray-500)';\n      case 'green':\n        return '#00b300';\n    }\n  }\n\n  constructor(private snackbarService: SnackbarService) {}\n\n  ngOnInit() {\n    setTimeout(() => {\n      this.close();\n    }, this.duration);\n  }\n\n  close() {\n    this.setAnimationName('close');\n    setTimeout(() => {\n      this.snackbarService.close(this.uid);\n    }, 1000);\n  }\n\n  setAnimationName(name: string) {\n    this.animationName = name;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  overflow: visible;\r\n  animation: open 1s ease-in-out forwards;\r\n}\r\n\r\n.content {\r\n  display: flex;\r\n  padding: 1rem;\r\n  border-radius: var(--border-radius);\r\n\r\n  .message {\r\n    margin-right: 0.75rem;\r\n    color: var(--color-text);\r\n  }\r\n\r\n  .close-button {\r\n    position: relative;\r\n    width: 24px;\r\n    height: 24px;\r\n    color: var(--color-text);\r\n    cursor: pointer;\r\n\r\n    &::before,\r\n    &::after {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 50%;\r\n      display: block;\r\n      width: 1px;\r\n      height: 1rem;\r\n      margin-top: 0.25rem;\r\n      background-color: var(--color-text);\r\n      border-radius: 50%;\r\n      content: '';\r\n      transition: background-color 0.4s ease;\r\n    }\r\n\r\n    &::before {\r\n      transform: rotate(45deg);\r\n    }\r\n\r\n    &::after {\r\n      transform: rotate(-45deg);\r\n    }\r\n  }\r\n}\r\n\r\n@keyframes open {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateX(100%);\r\n  }\r\n\r\n  to {\r\n    opacity: 1;\r\n    transform: translateX(0%);\r\n  }\r\n}\r\n\r\n@keyframes close {\r\n  from {\r\n    opacity: 1;\r\n    transform: translateX(0%);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translateX(100%);\r\n  }\r\n}\r\n",
                    "styleUrl": "./snackbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "colorStyle": {
                    "name": "colorStyle",
                    "getSignature": {
                        "name": "colorStyle",
                        "type": "string",
                        "returnType": "string",
                        "line": 29
                    }
                }
            },
            "templateData": "<div class=\"content\" [style.background-color]=\"colorStyle\">\r\n  <p class=\"message\">\r\n    {{ message }}\r\n  </p>\r\n  <div class=\"close-button\" (click)=\"close()\"></div>\r\n</div>\r\n"
        },
        {
            "name": "SnackbarOutletComponent",
            "id": "component-SnackbarOutletComponent-8418bf9ed267c8371efa936b57b405a659bf64ea999106d87ce495e04c353b5f60be30e9f31b25a0c9eec7c9a603ef7e331ce6971a9a556e87e7d1be5efdc1f7",
            "file": "src/app/_main/components/snackbar-outlet/snackbar-outlet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snackbar-outlet",
            "styleUrls": [
                "./snackbar-outlet.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snackbar-outlet.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "snackbars$",
                    "defaultValue": "this.snackbarService.snackbars$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "trackSnackbarTuple",
                    "args": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "[string, SnackbarData]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "[string, SnackbarData]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { SnackbarService } from '@main/services/snackbar.service';\nimport { SnackbarData } from '../snackbar/snackbar.interface';\n\n@Component({\n  selector: 'app-snackbar-outlet',\n  templateUrl: './snackbar-outlet.component.html',\n  styleUrls: ['./snackbar-outlet.component.scss'],\n})\nexport class SnackbarOutletComponent {\n  public snackbars$ = this.snackbarService.snackbars$;\n\n  constructor(private snackbarService: SnackbarService) {}\n\n  trackSnackbarTuple(_index: number, [uid, _]: [string, SnackbarData]) {\n    return uid;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  position: absolute;\r\n  z-index: 50;\r\n  top: 74px;\r\n  right: 0;\r\n  display: flex;\r\n  overflow: hidden;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  padding-right: 10px;\r\n}\r\n\r\napp-snackbar:not(:last-child) {\r\n  margin-bottom: 0.5rem;\r\n}\r\n",
                    "styleUrl": "./snackbar-outlet.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-snackbar *ngFor=\"let entry of (snackbars$ | async)?.entries(); trackBy: trackSnackbarTuple\" [uid]=\"entry[0]\"\r\n  [message]=\"entry[1].message\"></app-snackbar>\r\n"
        },
        {
            "name": "StatusLabelComponent",
            "id": "component-StatusLabelComponent-c37c736ed84df09cff6dcc026c3475bec6bffe486379d07eb4630c3fb53581eb0c66b7ffd2e5251e9c6b24c25be230560858c3f3d2bdcdb21c8997bd92e0c258",
            "file": "src/app/tasks/components/status-label/status-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: NgControl, useClass: TestNgControl }"
                }
            ],
            "selector": "app-status-label",
            "styleUrls": [
                "./status-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "statuses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Status[]",
                    "decorators": []
                },
                {
                    "name": "statusId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"default\" | \"small\"",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpen$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123,
                        144
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        158
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'overlay'"
                        }
                    ]
                },
                {
                    "name": "statuses$",
                    "defaultValue": "new BehaviorSubject<Status[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusMap",
                    "defaultValue": "new Map<number, Status>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "Status",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ControlAccessor } from '@main/classes/control-accessor.class';\nimport { Status } from '@tasks/interfaces/status.interface';\nimport { TaskService } from '@tasks/services/task.service';\nimport { TestNgControl } from '@tests/helpers/ng-control-testing-provider.helper';\nimport { BehaviorSubject, filter, fromEvent, take } from 'rxjs';\n\n@Component({\n  selector: 'app-status-label',\n  templateUrl: './status-label.component.html',\n  styleUrls: ['./status-label.component.scss'],\n  providers: [{ provide: NgControl, useClass: TestNgControl }],\n})\nexport class StatusLabelComponent extends ControlAccessor {\n  @Input() variant: 'default' | 'small' = 'default';\n  @Input() projectId!: number;\n  @Input() statusId!: number;\n  @Input() taskId?: number;\n  @Input() set statuses(statuses: Status[]) {\n    this.statuses$.next(statuses);\n    this.statusMap = statuses.reduce((acc, status) => {\n      acc.set(status.id, status);\n      return acc;\n    }, new Map<number, Status>());\n  }\n\n  statusMap = new Map<number, Status>();\n\n  constructor(public override ngControl: NgControl, private taskService: TaskService) {\n    super(ngControl);\n  }\n\n  @ViewChild('overlay') overlay!: ElementRef<HTMLElement>;\n\n  public statuses$ = new BehaviorSubject<Status[]>([]);\n  public readonly isOpen$ = new BehaviorSubject<boolean>(false);\n\n  public set isOpen(val: boolean) {\n    this.isOpen$.next(val);\n  }\n\n  public get isOpen() {\n    return this.isOpen$.value;\n  }\n\n  public open() {\n    setTimeout(() => {\n      fromEvent(document, 'click')\n        .pipe(\n          take(1),\n          filter((e) => !this.overlay?.nativeElement.contains(e.target as Node)),\n        )\n        .subscribe(() => this.close());\n      this.isOpen$.next(true);\n    });\n  }\n\n  public close() {\n    this.isOpen$.next(false);\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      return this.close();\n    }\n    return this.open();\n  }\n\n  public select(status: Status) {\n    if (this.taskId && this.projectId)\n      this.taskService.changeStatus(status.id, this.taskId, this.projectId).subscribe(() => {\n        this.close();\n        location.reload();\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n:host {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0 1rem;\r\n  margin: 0 1rem;\r\n}\r\n\r\n.status {\r\n  @include typo-title;\r\n\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 250px;\r\n  height: 100%;\r\n  height: 40px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: var(--color-secondary-400);\r\n  border-radius: var(--border-radius);\r\n  text-transform: uppercase;\r\n\r\n  &.small {\r\n    width: auto;\r\n    height: auto;\r\n    padding: 0.25rem 0.75rem;\r\n  }\r\n}\r\n\r\n.statuses-overlay {\r\n  padding: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: var(--color-secondary-500);\r\n  border-radius: var(--border-radius);\r\n\r\n  li {\r\n    display: flex;\r\n    height: 40px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0.5rem 1rem;\r\n    background-color: var(--color-secondary-500);\r\n    border-radius: var(--border-radius);\r\n    color: var(--color-text);\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    transition: background-color 0.4s ease;\r\n\r\n    &:not(:last-child) {\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    &:hover {\r\n      background-color: var(--color-secondary-400);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./status-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "ngControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "ControlAccessor",
            "accessors": {
                "statuses": {
                    "name": "statuses",
                    "setSignature": {
                        "name": "statuses",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "statuses",
                                "type": "Status[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "statuses",
                                "type": "Status[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isOpen": {
                    "name": "isOpen",
                    "setSignature": {
                        "name": "isOpen",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isOpen",
                        "type": "",
                        "returnType": "",
                        "line": 43
                    }
                }
            },
            "templateData": "<!-- This button triggers the overlay and is it's origin -->\r\n<button (click)=\"toggle()\" [ngClass]=\"['button', variant]\" class=\"status\" cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\"\r\n  [style.background-color]=\"statusMap.get(statusId)?.name | statusColor\">\r\n  {{ statusMap.get(statusId)?.name }}\r\n</button>\r\n\r\n<ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"trigger\"\r\n  [cdkConnectedOverlayOpen]=\"(isOpen$ | async) || false\"\r\n  [cdkConnectedOverlayBackdropClass]=\"'cdk-overlay-transparent-backdrop'\" [cdkConnectedOverlayHasBackdrop]=\"true\">\r\n  <ul #overlay class=\"statuses-overlay\">\r\n    <li *ngFor=\"let status of statuses$ | async\" (click)=\"select(status)\"\r\n      [style.background-color]=\"statusMap.get(status.id)?.name | statusColor\">\r\n      <span>{{ status.name }}</span>\r\n    </li>\r\n  </ul>\r\n</ng-template>\r\n"
        },
        {
            "name": "TaskDialog",
            "id": "component-TaskDialog-f16c0c98722170a0663dc2757ac92cc567ac44b94af49712c25414a10c0b25417074a0da6d6637bda22523e5da6ff5379bdbab9d883639042c5b9a9d50d2f738",
            "file": "src/app/tasks/dialogs/task/task.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-dialog",
            "styleUrls": [
                "./task.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskDialogData",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\n    id: new FormControl(null),\n    parentTaskId: new FormControl(null),\n    type: new FormControl(TaskType.TASK, [requiredValidator()]),\n    name: new FormControl('', [requiredValidator()]),\n    statusId: new FormControl(null, [requiredValidator()]),\n    projectId: new FormControl(null, [requiredValidator()]),\n    workspaceId: new FormControl(null, [requiredValidator()]),\n    description: new FormControl(''),\n    priority: new FormControl(this.taskPriorities[2], [requiredValidator()]),\n    deadline: new FormControl(null),\n    estimatedDate: new FormControl(null),\n\n    // GitHub issue integration fields\n    connectWithIssueOnGitHub: new FormControl(false),\n    issueAttachGithub: new FormControl(false),\n    issue: new FormControl(null),\n\n    // Github pull requests integration fields\n    connectWithPullRequestOnGitHub: new FormControl(false),\n    pull: new FormControl(null),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isGitHubIntegrationAvailable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "issueList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GitIssue[]>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectList$",
                    "defaultValue": "new BehaviorSubject([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project[]>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "pullList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GitPull[]>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Status[]>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subTaskTypes",
                    "defaultValue": "Enum.entries(SubTaskType)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "TaskDialogVariant",
                    "defaultValue": "TaskDialogVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "taskPriorities",
                    "defaultValue": "Object.values(TaskPriority)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "taskTypes",
                    "defaultValue": "Enum.entries(TaskType)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace[]>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearGitHubIntegrationFields",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadParamsFromUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onProjectIdChange",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWorkspaceIdChange",
                    "args": [
                        {
                            "name": "workspaceId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workspaceId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { GitIssue, GitPull } from '@dashboard/interfaces/git-integration.interface';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { Workspace } from '@dashboard/interfaces/workspace.interface';\nimport { GitIntegrationService } from '@dashboard/services/git-integration.service';\nimport { WorkspaceService } from '@dashboard/services/workspace.service';\nimport { Enum } from '@main/classes/enum.class';\nimport { RouterExtensionsService } from '@main/services/router-extensions.service';\nimport { TaskPriority } from '@tasks/enums/task-priority.enum';\nimport { SubTaskType, TaskType } from '@tasks/enums/task-type.enum';\nimport { Status } from '@tasks/interfaces/status.interface';\nimport { StatusService } from '@tasks/services/status.service';\nimport { BehaviorSubject, map, Observable } from 'rxjs';\nimport { requiredValidator } from '../../../_main/validators/required.validator';\nimport { Task } from '../../interfaces/task.interface';\n\nexport enum TaskDialogVariant {\n  CREATE = 'create',\n  EDIT = 'edit',\n}\n\nexport interface TaskDialogData {\n  workspaceId: number;\n  projectId?: number;\n  variant: TaskDialogVariant;\n  task?: Partial<Task>;\n  subtask?: boolean;\n}\n\n@Component({\n  selector: 'app-task-dialog',\n  templateUrl: './task.dialog.html',\n  styleUrls: ['./task.dialog.scss'],\n})\nexport class TaskDialog implements OnInit {\n  TaskDialogVariant = TaskDialogVariant;\n\n  public taskTypes = Enum.entries(TaskType);\n  public subTaskTypes = Enum.entries(SubTaskType);\n  public taskPriorities = Object.values(TaskPriority);\n\n  public statusList$!: Observable<Status[]>;\n  public workspaceList$!: Observable<Workspace[]>;\n  public projectList$: Observable<Project[]> = new BehaviorSubject([]);\n  public issueList$!: Observable<GitIssue[]>;\n  public pullList$!: Observable<GitPull[]>;\n\n  public isGitHubIntegrationAvailable: boolean = false;\n\n  public form = new FormGroup({\n    id: new FormControl(null),\n    parentTaskId: new FormControl(null),\n    type: new FormControl(TaskType.TASK, [requiredValidator()]),\n    name: new FormControl('', [requiredValidator()]),\n    statusId: new FormControl(null, [requiredValidator()]),\n    projectId: new FormControl(null, [requiredValidator()]),\n    workspaceId: new FormControl(null, [requiredValidator()]),\n    description: new FormControl(''),\n    priority: new FormControl(this.taskPriorities[2], [requiredValidator()]),\n    deadline: new FormControl(null),\n    estimatedDate: new FormControl(null),\n\n    // GitHub issue integration fields\n    connectWithIssueOnGitHub: new FormControl(false),\n    issueAttachGithub: new FormControl(false),\n    issue: new FormControl(null),\n\n    // Github pull requests integration fields\n    connectWithPullRequestOnGitHub: new FormControl(false),\n    pull: new FormControl(null),\n  });\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: TaskDialogData,\n    private dialogRef: MatDialogRef<TaskDialog>,\n    private statusService: StatusService,\n    private workspaceService: WorkspaceService,\n    private gitIntegrationService: GitIntegrationService,\n    private routerExtensions: RouterExtensionsService,\n  ) {}\n\n  ngOnInit() {\n    this.loadParamsFromUrl();\n\n    const { workspaceId, projectId, task } = this.data;\n    this.form.patchValue({ workspaceId, projectId });\n    if (task) this.form.patchValue(task);\n\n    this.workspaceList$ = this.workspaceService.list();\n\n    this.form.get('workspaceId')?.valueChanges.subscribe(this.onWorkspaceIdChange.bind(this));\n    this.form.get('projectId')?.valueChanges.subscribe(this.onProjectIdChange.bind(this));\n\n    if (workspaceId) {\n      this.onWorkspaceIdChange(workspaceId);\n    }\n\n    if (projectId) {\n      this.onProjectIdChange(projectId);\n    }\n  }\n\n  onWorkspaceIdChange(workspaceId: number) {\n    this.projectList$ = this.projectList$ = this.workspaceService\n      .get(workspaceId)\n      .pipe(map((workspace) => workspace.projectsWithPrivileges.map((project) => project.project)));\n  }\n\n  onProjectIdChange(projectId: number) {\n    this.statusList$ = this.statusService.list(projectId);\n    this.clearGitHubIntegrationFields();\n\n    this.statusList$.subscribe((statuses) => {\n      const statusId = statuses.find((status) => status.begin)?.id;\n\n      if (!statusId) return;\n\n      this.form.patchValue({ statusId });\n    });\n\n    this.gitIntegrationService.hasGitHubIntegration(projectId!).subscribe((value) => {\n      this.isGitHubIntegrationAvailable = value;\n\n      if (this.isGitHubIntegrationAvailable) {\n        this.issueList$ = this.gitIntegrationService.gitHubIssueList(projectId);\n        this.pullList$ = this.gitIntegrationService.gitHubPullList(projectId);\n      } else {\n        this.issueList$ = new BehaviorSubject([]);\n        this.pullList$ = new BehaviorSubject([]);\n      }\n    });\n  }\n\n  loadParamsFromUrl() {\n    const { workspaceId, projectId } = this.routerExtensions.snapshot.params;\n    this.data.workspaceId = this.data.workspaceId || Number(workspaceId);\n    this.data.projectId = this.data.projectId || Number(projectId);\n  }\n\n  clearGitHubIntegrationFields() {\n    this.form.patchValue({\n      issueNumberGitHub: null,\n      issueAttachGithub: false,\n      connectWithIssueOnGitHub: false,\n    });\n  }\n\n  confirm() {\n    const formValues = this.form.value;\n\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n\n    if (this.form.invalid) return;\n\n    if (formValues.connectWithIssueOnGitHub && !formValues.issueAttachGithub) {\n      formValues.createIssue = true;\n    } else {\n      formValues.createIssue = false;\n    }\n\n    console.log(formValues);\n\n    this.dialogRef.close(formValues);\n  }\n\n  cancel() {\n    this.dialogRef.close(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n  > * {\r\n    width: 100%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./task.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "TaskDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routerExtensions",
                        "type": "RouterExtensionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "TaskDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<TaskDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gitIntegrationService",
                        "type": "GitIntegrationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routerExtensions",
                        "type": "RouterExtensionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title *ngIf=\"data.variant === TaskDialogVariant.EDIT\" i18n>Edit task: {{ data.task?.name }}</h1>\r\n<h1 mat-dialog-title *ngIf=\"data.variant === TaskDialogVariant.CREATE && !data.subtask\" i18n>Create new task</h1>\r\n<h1 mat-dialog-title *ngIf=\"data.subtask\" i18n>Create new subtask</h1>\r\n<div mat-dialog-content>\r\n  <form (submit)=\"confirm()\" [formGroup]=\"form\" autocomplete=\"off\">\r\n\r\n    <!-- Workspace -->\r\n    <app-select *ngIf=\"!data.subtask\" formControlName=\"workspaceId\" floatingLabel=\"Workspace\" i18n-floatingLabel>\r\n      <app-option *ngFor=\"let workspace of workspaceList$ | async\" [value]=\"workspace.id\">{{ workspace.name }}\r\n      </app-option>\r\n    </app-select>\r\n\r\n    <!-- Project -->\r\n    <ng-container *ngIf=\"!data.subtask && form.get('workspaceId')?.value\">\r\n      <app-select formControlName=\"projectId\" floatingLabel=\"Project\" i18n-floatingLabel>\r\n        <app-option *ngFor=\"let project of projectList$ | async\" [value]=\"project.id\">{{project.name}}\r\n        </app-option>\r\n      </app-select>\r\n    </ng-container>\r\n\r\n    <!-- Type field -->\r\n    <app-select formControlName=\"type\" floatingLabel=\"Type\" i18n-floatingLabel>\r\n      <app-option *ngFor=\"let type of (data.subtask ? subTaskTypes : taskTypes)\" [value]=\"type[1]\"\r\n        [icon]=\"type[0] | taskTypeIcon\">{{ type[0] | taskType\r\n        }}\r\n      </app-option>\r\n    </app-select>\r\n\r\n    <!-- Name field -->\r\n    <app-input floatingLabel=\"Name\" placeholder=\"New task\" formControlName=\"name\" i18n-floatingLabel i18n-placeholder>\r\n    </app-input>\r\n\r\n    <!-- Description field -->\r\n    <app-textarea floatingLabel=\"Description\" placeholder=\"Sample description...\" formControlName=\"description\"\r\n      i18n-floatingLabel i18n-placeholder [rows]=\"10\"></app-textarea>\r\n\r\n    <!-- Status -->\r\n    <app-select formControlName=\"statusId\" floatingLabel=\"Status\" i18n-floatingLabel>\r\n      <app-option *ngFor=\"let status of statusList$ | async\" [value]=\"status.id\">{{ status.name }}\r\n      </app-option>\r\n    </app-select>\r\n\r\n    <!-- Priorities -->\r\n    <app-select formControlName=\"priority\" floatingLabel=\"Priority\" i18n-floatingLabel>\r\n      <app-option *ngFor=\"let priority of taskPriorities\" [value]=\"priority\" [icon]=\"priority | taskPriorityIcon\">{{\r\n        priority | taskPriority }}</app-option>\r\n    </app-select>\r\n\r\n    <!-- Deadline -->\r\n    <app-input-date-time formControlName=\"deadline\" floatingLabel=\"Deadline\" placeholder=\"Choose a date\"\r\n      i18n-floatingLabel i18n-placeholder>\r\n    </app-input-date-time>\r\n\r\n    <!-- Estimate time -->\r\n    <app-input-date-time formControlName=\"estimatedDate\" floatingLabel=\"Estimated date\" placeholder=\"Choose a date\"\r\n      i18n-floatingLabel i18n-placeholder>\r\n    </app-input-date-time>\r\n\r\n    <!-- GitHub issue integration -->\r\n    <app-checkbox *ngIf=\"isGitHubIntegrationAvailable\" formControlName=\"connectWithIssueOnGitHub\" i18n>Create or attach\r\n      GitHub issue simultaneously</app-checkbox>\r\n\r\n    <div [class.hidden]=\"!form.get('connectWithIssueOnGitHub')?.value\" class=\"git-issue-connection\">\r\n      <app-select formControlName=\"issueAttachGithub\">\r\n        <app-option [value]=\"false\" i18n>Create</app-option>\r\n        <app-option [value]=\"true\" i18n>Attach</app-option>\r\n      </app-select>\r\n\r\n      <app-select [class.hidden]=\"!form.get('issueAttachGithub')?.value\" formControlName=\"issue\" floatingLabel=\"Issue\"\r\n        i18n-floatingLabel>\r\n        <app-option *ngFor=\"let issue of issueList$ | async\" [value]=\"issue\">{{issue.title}}</app-option>\r\n      </app-select>\r\n    </div>\r\n\r\n    <!-- Github pull request integration -->\r\n    <app-checkbox *ngIf=\"isGitHubIntegrationAvailable\" formControlName=\"connectWithPullRequestOnGitHub\" i18n>\r\n      Connect with GitHub pull request\r\n    </app-checkbox>\r\n\r\n    <div [class.hidden]=\"!form.get('connectWithPullRequestOnGitHub')?.value\" class=\"git-pull-connection\">\r\n      <app-select formControlName=\"pull\" floatingLabel=\"Pull request\" i18n-floatingLabel>\r\n        <app-option *ngFor=\"let pullRequest of pullList$ | async\" [value]=\"pullRequest\">{{pullRequest.title}}\r\n        </app-option>\r\n      </app-select>\r\n    </div>\r\n\r\n  </form>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <app-button mat-button (click)=\"cancel()\" i18n>Cancel</app-button>\r\n  <app-button *ngIf=\"data.variant === TaskDialogVariant.CREATE\" (click)=\"confirm()\" variant=\"primary\" i18n>Create\r\n  </app-button>\r\n  <app-button *ngIf=\"data.variant === TaskDialogVariant.EDIT\" (click)=\"confirm()\" variant=\"primary\" i18n>Save changes\r\n  </app-button>\r\n</div>\r\n"
        },
        {
            "name": "TaskListPage",
            "id": "component-TaskListPage-a21381c6645322960f650c3a165043e50907bb84fde6278f0b75a97c6a773c22d8ac4b4613e90aca24e9ab38af8b6ab6211c92cf1499efe013d80819630e01dd",
            "file": "src/app/tasks/pages/task-list/task-list.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [
                "./task-list.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./task-list.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "assigneeControl",
                    "defaultValue": "new FormControl(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "expandedSubtasks",
                    "defaultValue": "new ESet()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "faCheck",
                    "defaultValue": "faCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "faChevronRight",
                    "defaultValue": "faChevronRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "faCodeCommit",
                    "defaultValue": "faCodeCommit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "faCodePullRequest",
                    "defaultValue": "faCodePullRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Filter[]",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filtersControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isSubtasksRow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "members$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Map<number, ProjectMember>>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "project$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Status[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "statusList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Status[]>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "taskList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Task[]>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSubtask",
                    "args": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: Move this method to service\n",
                    "description": "<p>TODO: Move this method to service</p>\n",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editTask",
                    "args": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatus",
                    "args": [
                        {
                            "name": "statusId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "statusId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubtasksContainerHeight",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initAssigneeChanging",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "populateSubtasks",
                    "args": [
                        {
                            "name": "taskList",
                            "type": "Task[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskList",
                            "type": "Task[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { UserService } from '@auth/services/user.service';\nimport { ProjectMember } from '@dashboard/interfaces/project-member.interface';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { MemberService } from '@dashboard/services/member.service';\nimport { ProjectService } from '@dashboard/services/project.service';\nimport {\n  faCheck,\n  faChevronRight,\n  faCodeCommit,\n  faCodePullRequest,\n  faPlus,\n} from '@fortawesome/free-solid-svg-icons';\nimport { ESet } from '@main/classes/e-set.class';\nimport { Filters } from '@main/classes/filters.class';\nimport { Filter } from '@main/interfaces/filters.interface';\nimport { DialogService } from '@main/services/dialog.service';\nimport { TaskDialog, TaskDialogVariant } from '@tasks/dialogs/task/task.dialog';\nimport { Status } from '@tasks/interfaces/status.interface';\nimport { Task } from '@tasks/interfaces/task.interface';\nimport { StatusService } from '@tasks/services/status.service';\nimport { TaskService } from '@tasks/services/task.service';\nimport * as dayjs from 'dayjs';\nimport { map, Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.page.html',\n  styleUrls: ['./task-list.page.scss'],\n})\nexport class TaskListPage {\n  faPlus = faPlus;\n  faChevronRight = faChevronRight;\n  faCodeCommit = faCodeCommit;\n  faCodePullRequest = faCodePullRequest;\n  faCheck = faCheck;\n\n  public projectId!: number;\n\n  public taskList$!: Observable<Task[]>;\n  public statusList$!: Observable<Status[]>;\n  public project$!: Observable<Project>;\n  public members$!: Observable<Map<number, ProjectMember>>;\n  public assigneeControl = new FormControl(null);\n\n  public statusList: Status[] = [];\n\n  public filters: Filter[] = [];\n  public filtersControl = new FormControl();\n\n  isSubtasksRow = (i: number, row: Object) => row.hasOwnProperty('withSubtasks');\n  expandedSubtasks = new ESet();\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private taskService: TaskService,\n    private statusService: StatusService,\n    private projectService: ProjectService,\n    private dialogService: DialogService,\n    private memberService: MemberService,\n    private userService: UserService,\n  ) {\n    const { workspaceId, projectId } = this.activatedRoute.snapshot.params;\n\n    this.projectId = projectId;\n    this.project$ = this.projectService.get(projectId);\n\n    /**\n     * TODO: Use method from service\n     */\n    this.members$ = this.memberService.list(projectId).pipe(\n      map((members) =>\n        members.reduce((acc: Map<number, ProjectMember>, member: ProjectMember) => {\n          acc.set(member.user.id, member);\n          return acc;\n        }, new Map<number, ProjectMember>()),\n      ),\n    );\n    this.taskList$ = this.taskService.list(projectId);\n    this.statusList$ = this.statusService.list(projectId);\n    this.statusList$.subscribe((list) => {\n      this.statusList = list;\n    });\n    this.userService.getMyself().subscribe((user) => {\n      this.filters.push(Filters.ONLY_MY_TASKS(user.id));\n    });\n\n    this.filtersControl.valueChanges.subscribe((filters) => {\n      this.taskList$ = this.taskService.list(projectId, filters);\n    });\n  }\n\n  getStatus(statusId: number) {\n    return this.statusList.find((status) => status.id === statusId)?.name;\n  }\n\n  changeDate(date?: Date) {\n    if (!date) return '-';\n    let sessionDate = dayjs(date);\n    return sessionDate.format('YYYY-MM-DD, hh:mm A');\n  }\n\n  populateSubtasks(taskList: Task[]) {\n    const populatedTasks = [];\n    const tasks = taskList.filter((task) => !task.parentTaskId);\n\n    for (const task of tasks) {\n      populatedTasks.push(task);\n\n      if (task.subTasks && task.subTasks.length) {\n        populatedTasks.push({ ...task, withSubtasks: true });\n      }\n    }\n\n    return populatedTasks;\n  }\n\n  /**\n   * TODO: Move this method to service\n   */\n  createSubtask(task: Task) {\n    this.dialogService\n      .open(TaskDialog, {\n        variant: TaskDialogVariant.CREATE,\n        projectId: this.projectId,\n        subtask: true,\n        task: {\n          parentTaskId: task.id,\n        },\n      })\n      .afterClosed()\n      .subscribe((task) => {\n        if (!task) return;\n\n        this.taskService.create(this.projectId, task).subscribe(() => {\n          location.reload();\n        });\n      });\n  }\n\n  editTask(task: Task) {\n    this.taskService.openEditTaskDialog(this.projectId, task).subscribe(() => {\n      location.reload();\n    });\n  }\n\n  deleteTask(task: Task) {\n    this.taskService.deleteWithConfirmation(this.projectId, task).subscribe(() => {\n      location.reload();\n    });\n  }\n\n  initAssigneeChanging() {\n    this.assigneeControl.valueChanges.subscribe((assignee) => {});\n  }\n\n  public getSubtasksContainerHeight(taskId: number, element: HTMLElement) {\n    return `${Number(this.expandedSubtasks.has(taskId)) * element.scrollHeight}px`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/typography';\r\n\r\n:host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n  padding-left: 10px;\r\n}\r\n\r\n.table .row .cell .status {\r\n  @include typo-title;\r\n\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 250px;\r\n  height: 100%;\r\n  height: 40px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0 1rem;\r\n  margin: 0 1rem;\r\n  background-color: var(--color-secondary-400);\r\n  border-radius: var(--border-radius);\r\n}\r\n\r\n.task-title,\r\n.subtask-title {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 100%;\r\n  align-items: center;\r\n  padding-left: 0.5rem;\r\n\r\n  .task-id {\r\n    display: block;\r\n    margin-right: 1rem;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .task-property {\r\n    display: flex;\r\n    margin-left: 1rem;\r\n    cursor: pointer;\r\n    opacity: 0.5;\r\n    transition: opacity 0.2s ease;\r\n\r\n    &:hover {\r\n      opacity: 1;\r\n    }\r\n\r\n    .check {\r\n      margin-left: 5px;\r\n      color: #2ecc71;\r\n    }\r\n  }\r\n\r\n  &>app-icon {\r\n    margin-right: 1rem;\r\n    opacity: 0.5;\r\n    transition: transform .2s ease;\r\n  }\r\n}\r\n\r\n.subtasks {\r\n  position: relative;\r\n  overflow: hidden;\r\n  max-height: 0;\r\n  padding-left: 4rem;\r\n  transition: max-height 0.4s ease;\r\n\r\n  .subtask-title {\r\n    display: flex;\r\n  }\r\n\r\n  .subtask-id {\r\n    display: block;\r\n    margin-right: 1rem;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  .row {\r\n    position: relative;\r\n\r\n    &::before,\r\n    &::after {\r\n      position: absolute;\r\n      top: 0;\r\n      left: -2.5rem;\r\n      display: block;\r\n      content: '';\r\n    }\r\n\r\n    &:last-child {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    &:not(:last-child)::before {\r\n      width: 2px;\r\n      height: calc(100% + 1rem);\r\n      background-color: var(--color-secondary-400);\r\n    }\r\n\r\n    &::after {\r\n      width: 29px;\r\n      height: 29px;\r\n      border: 2px solid var(--color-secondary-400);\r\n      border-top-width: 0;\r\n      border-right-width: 0;\r\n      border-bottom-left-radius: 50%;\r\n    }\r\n  }\r\n}\r\n\r\n.row {\r\n  cursor: pointer;\r\n\r\n  &.expanded {\r\n    .task-title>app-icon {\r\n      transform: rotate(90deg);\r\n    }\r\n  }\r\n}\r\n\r\n.task-type {\r\n  width: 16px;\r\n  height: 16px;\r\n  margin-right: 1rem;\r\n  border-radius: 4px;\r\n}\r\n",
                    "styleUrl": "./task-list.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statusService",
                        "type": "StatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-view-options [project]=\"(project$ | async)!\" [filters]=\"filters\" [filtersControl]=\"filtersControl\">\r\n</app-view-options>\r\n\r\n<!-- Table -->\r\n<div class=\"table\" *ngLet=\"(members$ | async) as members\">\r\n\r\n  <!-- Header -->\r\n  <div class=\"header-row\">\r\n    <div class=\"header-cell w-full\">Title</div>\r\n    <div class=\"header-cell w-52\">Status</div>\r\n    <div class=\"header-cell w-52\">Assignee</div>\r\n    <div class=\"header-cell w-52\">Deadline</div>\r\n    <div class=\"header-cell action\">\r\n      <!-- Actions -->\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Body -->\r\n  <ng-container *ngFor=\"let task of taskList$ | async\">\r\n    <div class=\"row\" [class.expanded]=\"expandedSubtasks.has(task.id)\" (click)=\"expandedSubtasks.toggle(task.id)\">\r\n\r\n      <!-- Title cell -->\r\n      <div class=\"cell w-full\">\r\n        <div class=\"task-title\">\r\n          <app-icon [icon]=\"faChevronRight\" size=\"16px\" [class.invisible]=\"!task.subTasks?.length\"></app-icon>\r\n          <span class=\"task-type\" [style.background-color]=\"task.type | taskType:'color'\"></span>\r\n          <span class=\"task-id\">#{{ task.id }}</span>\r\n          <span>{{ task.name }}</span>\r\n          <a *ngIf=\"task.issue\" [href]=\"task.issue\" class=\"task-property\" target=\"_blank\" matTooltip=\"GitHub issue\"\r\n            i18n-matTooltip>\r\n            <app-icon [icon]=\"faCodeCommit\" size=\"14px\"></app-icon>\r\n          </a>\r\n          <a *ngIf=\"task.pull\" [href]=\"task.pull\" class=\"task-property\" target=\"_blank\" matTooltip=\"GitHub pull request\"\r\n            i18n-matTooltip>\r\n            <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n          </a>\r\n          <a *ngIf=\"task.mergedPullList\" [href]=\"task.mergedPullList[0]\" class=\"task-property\" target=\"_blank\"\r\n            matTooltip=\"GitHub pull request\" i18n-matTooltip>\r\n            <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n            <app-icon class=\"check\" [icon]=\"faCheck\" size=\"14px\"></app-icon>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Status cell -->\r\n      <div class=\"cell w-52 p-0\">\r\n        <app-status-label [projectId]=\"projectId\" [taskId]=\"task.id\" [statuses]=\"statusList\" [statusId]=\"task.statusId!\"\r\n          click-stop-propagation>\r\n        </app-status-label>\r\n      </div>\r\n\r\n      <!-- Assignee cell -->\r\n      <div class=\"cell w-52\">\r\n        <app-input-assignee [assignee]=\"task.assigneeId && members && members.get(task.assigneeId)\" [members]=\"members\"\r\n          [projectId]=\"projectId\" [taskId]=\"task.id\" click-stop-propagation>\r\n        </app-input-assignee>\r\n      </div>\r\n\r\n      <!-- Deadline cell -->\r\n      <div class=\"cell w-52\">{{changeDate(task.deadline)}}</div>\r\n\r\n      <!-- Actions cell -->\r\n      <div class=\"cell action justify-center\">\r\n        <button mat-icon-button click-stop-propagation [matMenuTriggerFor]=\"menu\" class=\"flex items-center\">\r\n          <app-icon icon=\"matMoreVert\"></app-icon>\r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n          <button mat-menu-item (click)=\"editTask(task)\">\r\n            <span i18n>Edit task</span>\r\n          </button>\r\n          <button mat-menu-item (click)=\"createSubtask(task)\">\r\n            <span i18n>Create subtask</span>\r\n          </button>\r\n          <button mat-menu-item (click)=\"deleteTask(task)\" class=\"important\">\r\n            <span i18n>Delete task</span>\r\n          </button>\r\n        </mat-menu>\r\n      </div>\r\n    </div>\r\n    <div #subtasks class=\"subtasks\" [style.maxHeight]=\"getSubtasksContainerHeight(task.id, subtasks)\">\r\n      <div *ngFor=\"let subtask of task.subTasks\" class=\"row\">\r\n\r\n        <!-- Title cell -->\r\n        <div class=\"cell w-full\">\r\n          <div class=\"subtask-title\">\r\n            <span class=\"subtask-id\">#{{ subtask.id }}</span>\r\n            <span class=\"task-type\" [style.background-color]=\"subtask.type | taskType:'color'\"></span>\r\n            <span>{{ subtask.name }}</span>\r\n            <a *ngIf=\"subtask.issue\" [href]=\"subtask.issue\" class=\"task-property\" target=\"_blank\"\r\n              matTooltip=\"GitHub issue\" i18n-matTooltip>\r\n              <app-icon [icon]=\"faCodeCommit\" size=\"14px\"></app-icon>\r\n            </a>\r\n            <a *ngIf=\"subtask.pull\" [href]=\"subtask.pull\" class=\"task-property\" target=\"_blank\"\r\n              matTooltip=\"GitHub pull request\" i18n-matTooltip>\r\n              <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n            </a>\r\n            <a *ngIf=\"subtask.mergedPullList\" [href]=\"subtask.mergedPullList[0]\" class=\"task-property\" target=\"_blank\"\r\n              matTooltip=\"GitHub pull request\" i18n-matTooltip>\r\n              <app-icon [icon]=\"faCodePullRequest\" size=\"14px\"></app-icon>\r\n              <app-icon class=\"check\" [icon]=\"faCheck\" size=\"14px\"></app-icon>\r\n            </a>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Status cell -->\r\n        <div class=\"cell w-52 p-0\">\r\n          <app-status-label [projectId]=\"projectId\" [taskId]=\"subtask.id\" [statuses]=\"statusList\"\r\n            [statusId]=\"subtask.statusId!\" click-stop-propagation></app-status-label>\r\n        </div>\r\n\r\n        <!-- Assignee cell -->\r\n        <div class=\"cell w-52\">\r\n          <app-input-assignee [assignee]=\"subtask.assigneeId && members && members.get(subtask.assigneeId)\"\r\n            [members]=\"members\" [projectId]=\"projectId\" [taskId]=\"subtask.id\" click-stop-propagation>\r\n          </app-input-assignee>\r\n        </div>\r\n\r\n        <!-- Deadline cell -->\r\n        <div class=\"cell w-52\">{{changeDate(subtask.deadline)}}</div>\r\n\r\n        <!-- Actions cell -->\r\n        <div class=\"cell action justify-center\">\r\n          <button mat-icon-button click-stop-propagation [matMenuTriggerFor]=\"menu\" class=\"flex items-center\">\r\n            <app-icon icon=\"matMoreVert\"></app-icon>\r\n          </button>\r\n          <mat-menu #menu=\"matMenu\">\r\n            <button mat-menu-item (click)=\"editTask(subtask)\">\r\n              <span i18n>Edit task</span>\r\n            </button>\r\n            <button mat-menu-item (click)=\"createSubtask(subtask)\">\r\n              <span i18n>Create subtask</span>\r\n            </button>\r\n            <button mat-menu-item (click)=\"deleteTask(subtask)\" class=\"important\">\r\n              <span i18n>Delete task</span>\r\n            </button>\r\n          </mat-menu>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-0f545916dff9a838681dc314c704a5eb85a9bb4915207f1e39c8d4e88cfa41dae59b9aff923ce96f70ecac95324708001e63056bd378103b2fd112e9ce399f02",
            "file": "src/app/_main/components/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cols",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "floatingLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFloating label text to display\n",
                    "description": "<p>Floating label text to display</p>\n",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHint to display beneath the input to provide additional information of how to use the input\n",
                    "description": "<p>Hint to display beneath the input to provide additional information of how to use the input</p>\n",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput placeholder text\n",
                    "description": "<p>Input placeholder text</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "staticLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStatic label text to display\n",
                    "description": "<p>Static label text to display</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProperty that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails\n",
                    "description": "<p>Property that defines if field should prompt user how to fill it. For example\nin a form, if a field is email, it will give the user last used emails</p>\n",
                    "line": 19,
                    "type": "\"on\" | \"off\"",
                    "decorators": [],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "monaco.editor.IStandaloneCodeEditor | null",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "faBold",
                    "defaultValue": "faBold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "faCode",
                    "defaultValue": "faCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "faItalic",
                    "defaultValue": "faItalic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "faLink",
                    "defaultValue": "faLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "faList",
                    "defaultValue": "faList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "faListNumeric",
                    "defaultValue": "faListNumeric",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "faQuoteLeft",
                    "defaultValue": "faQuoteLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "faUnderline",
                    "defaultValue": "faUnderline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "mode",
                    "defaultValue": "'editor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"editor\" | \"preview\"",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "output",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'output'"
                        }
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "control to be used by the accessor",
                    "line": 83,
                    "rawdescription": "\n\nControl passed from DOM to the component, contains all the information about form control\n",
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "applyBold",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyCode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyCodeBlock",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyItalic",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyListNumeric",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyQuote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyUnderline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleEndAndStartOfEachSelection",
                    "args": [
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "beforeSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "afterSelectionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called when the control's value changes in the UI.\n\nThis method is called by the forms API on initialization to update the form model when values propagate from the view to the model.\n",
                    "description": "<p>Registers a callback function that is called when the control&#39;s value changes in the UI.</p>\n<p>This method is called by the forms API on initialization to update the form model when values propagate from the view to the model.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3557,
                                "end": 3559,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3551,
                                "end": 3556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control value changes.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRegisters a callback function that is called by the forms API on initialization to update the form model on blur.\n\n",
                    "description": "<p>Registers a callback function that is called by the forms API on initialization to update the form model on blur.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3800,
                                "end": 3802,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "fn"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3794,
                                "end": 3799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Callback to be called when the control is touched.</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet disabled state on the control. If set to true, the control will be disabled.\n",
                    "description": "<p>Set disabled state on the control. If set to true, the control will be disabled.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4003,
                                "end": 4013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "isDisabled"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3997,
                                "end": 4002,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>State to set to the control</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWrites a new value to the element.\n\nThis method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.\n\n",
                    "description": "<p>Writes a new value to the element.</p>\n<p>This method is called by the forms API to write to the view when programmatic\nchanges from model to view are requested.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3226,
                                "end": 3231,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3220,
                                "end": 3225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>The new value for the element</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "ControlAccessor"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { ControlAccessor } from '@main/classes/control-accessor.class';\nimport * as monaco from 'monaco-editor';\n// eslint-disable-next-line unused-imports/no-unused-imports\nimport { darkTheme } from './textarea.theme';\nimport { marked } from 'marked';\nimport { markdownExample } from './markdown.example';\nimport hljs from 'highlight.js';\nimport { EmojiConvertor } from 'emoji-js';\nimport {\n  faBold,\n  faCode,\n  faItalic,\n  faLink,\n  faList,\n  faListNumeric,\n  faQuoteLeft,\n  faUnderline,\n} from '@fortawesome/free-solid-svg-icons';\nimport { MonacoExtended } from '@main/classes/monaco-extended.class';\n\nconsole.log(darkTheme);\n\n@Component({\n  selector: 'app-textarea',\n  templateUrl: './textarea.component.html',\n  styleUrls: ['./textarea.component.scss'],\n})\nexport class TextareaComponent extends ControlAccessor implements OnInit, AfterViewInit {\n  /**\n   * Floating label text to display\n   */\n  @Input() floatingLabel?: string;\n\n  /**\n   * Static label text to display\n   */\n  @Input() staticLabel?: string;\n\n  /**\n   * Input placeholder text\n   */\n  @Input() placeholder: string = '';\n\n  /**\n   * Hint to display beneath the input to provide additional information of how to use the input\n   */\n  @Input() hint?: string;\n\n  @Input() rows?: number = 4;\n\n  @Input() cols?: number = 50;\n\n  @ViewChild('input') input!: ElementRef<HTMLElement>;\n  @ViewChild('output') output!: ElementRef<HTMLElement>;\n\n  public mode: 'editor' | 'preview' = 'editor';\n  private editor: monaco.editor.IStandaloneCodeEditor | null = null;\n\n  private toggleEndAndStartOfEachSelection(\n    beforeSelectionText: string,\n    afterSelectionText: string = '',\n  ) {\n    const { editor } = this;\n    if (!editor) return;\n\n    return MonacoExtended.toggleEndAndStartOfEachSelection(\n      editor,\n      beforeSelectionText,\n      afterSelectionText,\n    );\n  }\n\n  faCode = faCode;\n  faUnderline = faUnderline;\n  faBold = faBold;\n  faItalic = faItalic;\n  faQuoteLeft = faQuoteLeft;\n  faList = faList;\n  faListNumeric = faListNumeric;\n  faLink = faLink;\n\n  ngOnInit(): void {\n    hljs.configure({ languages: [] });\n  }\n\n  ngAfterViewInit(): void {\n    const container = this.input.nativeElement;\n    const editor = monaco.editor.create(container, {\n      value: markdownExample,\n      language: 'markdown',\n      scrollBeyondLastLine: false,\n      wordWrap: 'on',\n      wrappingStrategy: 'advanced',\n      minimap: {\n        enabled: false,\n      },\n      overviewRulerLanes: 0,\n      theme: 'dark',\n    });\n    let ignoreEvent = false;\n    const updateHeight = () => {\n      const contentHeight = Math.min(500, editor.getContentHeight());\n      const containerWidth = Math.min(1000, container.scrollWidth);\n      container.style.width = `${containerWidth}px`;\n      container.style.height = `${contentHeight}px`;\n      try {\n        ignoreEvent = true;\n        editor.layout({ width: containerWidth, height: contentHeight });\n      } finally {\n        ignoreEvent = false;\n      }\n    };\n    editor.onDidContentSizeChange(updateHeight);\n    updateHeight();\n    this.editor = editor;\n  }\n\n  openEditor() {\n    this.mode = 'editor';\n  }\n\n  openPreview() {\n    this.output.nativeElement.innerHTML = marked.parse(this.editor?.getValue() || '');\n    this.output.nativeElement\n      .querySelectorAll<HTMLElement>('pre code')\n      .forEach((c: HTMLElement) => {\n        hljs.highlightElement(c);\n      });\n\n    let emoji = new EmojiConvertor();\n    emoji.replace_mode = 'unified';\n    emoji.allow_native = true;\n\n    this.output.nativeElement.innerHTML = emoji.replace_colons(this.output.nativeElement.innerHTML);\n\n    (window as any).twemoji.parse(this.output.nativeElement, {\n      size: '16x16',\n      // ext: '.svg',\n      base: 'https://twemoji.maxcdn.com/',\n    });\n    this.mode = 'preview';\n  }\n\n  applyUnderline() {\n    this.toggleEndAndStartOfEachSelection('<u>', '</u>');\n    this.editor?.focus();\n  }\n\n  applyBold() {\n    this.toggleEndAndStartOfEachSelection('**', '**');\n    this.editor?.focus();\n  }\n\n  applyItalic() {\n    this.toggleEndAndStartOfEachSelection('*', '*');\n    this.editor?.focus();\n  }\n\n  applyLink() {\n    this.toggleEndAndStartOfEachSelection('[', '](https://google.com)');\n    this.editor?.focus();\n  }\n\n  applyList() {\n    this.toggleEndAndStartOfEachSelection('<ul>', '</ul>');\n    this.editor?.focus();\n  }\n\n  applyListNumeric() {\n    this.editor?.focus();\n  }\n\n  applyQuote() {\n    this.editor?.focus();\n  }\n\n  applyCode() {\n    this.toggleEndAndStartOfEachSelection('`', '`');\n    this.editor?.focus();\n  }\n\n  applyCodeBlock() {\n    this.toggleEndAndStartOfEachSelection('```javascript\\n', '\\n```');\n    this.editor?.focus();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// ::ng-deep {\r\n//   .line-numbers {\r\n//     width: 25px !important;\r\n//   }\r\n// }\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.form-field {\r\n  padding: 1rem 1rem 0 0;\r\n  border: 1px solid var(--color-input-border);\r\n  background-color: var(--color-input-background);\r\n  border-radius: var(--border-radius);\r\n\r\n  .switch {\r\n    margin-bottom: 1em;\r\n    margin-left: 1em;\r\n\r\n    &>* {\r\n      &:not(:last-child) {\r\n        margin-right: 1em;\r\n      }\r\n\r\n      &.active {\r\n        opacity: 0.5;\r\n      }\r\n    }\r\n  }\r\n\r\n  .preview {\r\n    overflow: auto;\r\n    max-height: 500px;\r\n    padding: 0 1em;\r\n  }\r\n}\r\n\r\n.preview ::ng-deep {\r\n  h1 {\r\n    font-size: 2em;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.8em;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1.6em;\r\n  }\r\n\r\n  h4 {\r\n    font-size: 1.4em;\r\n  }\r\n\r\n  h5 {\r\n    font-size: 1.2em;\r\n  }\r\n\r\n  h6 {\r\n    font-size: 1em;\r\n  }\r\n\r\n  hr {\r\n    margin: 1rem 0;\r\n    opacity: 0.5;\r\n  }\r\n\r\n  blockquote {\r\n    display: inline-block;\r\n    padding-left: 1rem;\r\n    border-left: 2px solid var(--color-secondary-200);\r\n  }\r\n\r\n  ul,\r\n  ol,\r\n  menu {\r\n    padding-left: 40px;\r\n    margin: 10px 0;\r\n    list-style: initial;\r\n  }\r\n\r\n  ol {\r\n    list-style: decimal;\r\n  }\r\n\r\n  a {\r\n    color: var(--color-purple-300);\r\n    text-decoration: underline;\r\n  }\r\n\r\n  code {\r\n    display: inline-block;\r\n    padding: 0.2rem 0.5rem;\r\n    background-color: var(--color-secondary-600);\r\n    border-radius: 2px;\r\n  }\r\n\r\n  .emoji {\r\n    display: inline-block;\r\n  }\r\n}\r\n\r\n.tools {\r\n  display: flex;\r\n  padding: 1rem;\r\n\r\n  .tool {\r\n    display: block;\r\n    padding: 0.5rem;\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n    transition: background-color .2s ease;\r\n\r\n    &:hover {\r\n      background-color: var(--color-secondary-700);\r\n    }\r\n\r\n    &:not(:last-child) {\r\n      margin-right: 0.1rem;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "ControlAccessor",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"form-field\">\r\n  <!-- <label *ngIf=\"staticLabel\" [class.required]=\"required\">{{ staticLabel }}</label>\r\n  <mat-form-field appearance=\"outline\" [class.without-floating-label]=\"!floatingLabel\">\r\n    <mat-label *ngIf=\"floatingLabel\">{{ floatingLabel }}</mat-label>\r\n    <textarea #input matInput [placeholder]=\"placeholder\" [required]=\"required\" [formControl]=\"control\"\r\n      [autocomplete]=\"autocomplete\" [rows]=\"rows\" [cols]=\"cols\" name=\"test\"></textarea>\r\n    <mat-error>{{ ngControl.control?.errors | validationError }}</mat-error>\r\n    <mat-hint *ngIf=\"hint\">{{ hint }}</mat-hint>\r\n  </mat-form-field> -->\r\n  <section class=\"switch\">\r\n    <button (click)=\"openEditor()\" [class.active]=\"mode === 'editor'\" type=\"button\">Editor</button>\r\n    <button (click)=\"openPreview()\" [class.active]=\"mode === 'preview'\" type=\"button\">Preview</button>\r\n  </section>\r\n  <div #input [class.hidden]=\"mode !== 'editor'\"></div>\r\n  <div #output class=\"preview\" [class.hidden]=\"mode !== 'preview'\"></div>\r\n  <section class=\"tools\">\r\n\r\n    <!-- Bold -->\r\n    <div class=\"tool\">\r\n      <div class=\"icon\" (click)=\"applyBold()\">\r\n        <app-icon size=\"16px\" [icon]=\"faBold\"></app-icon>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Italic -->\r\n    <div class=\"tool\">\r\n      <div class=\"icon\" (click)=\"applyItalic()\">\r\n        <app-icon size=\"16px\" [icon]=\"faItalic\"></app-icon>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Underline -->\r\n    <div class=\"tool\">\r\n      <div class=\"icon\" (click)=\"applyUnderline()\">\r\n        <app-icon size=\"16px\" [icon]=\"faUnderline\"></app-icon>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Link -->\r\n    <div class=\"tool\">\r\n      <div class=\"icon\" (click)=\"applyLink()\">\r\n        <app-icon size=\"16px\" [icon]=\"faLink\"></app-icon>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- List -->\r\n    <!-- <div class=\"tool\">\r\n      <div class=\"icon\">\r\n        <app-icon size=\"16px\" [icon]=\"faList\"></app-icon>\r\n      </div>\r\n    </div> -->\r\n\r\n    <!-- List numeric -->\r\n    <!-- <div class=\"tool\">\r\n      <div class=\"icon\">\r\n        <app-icon size=\"16px\" [icon]=\"faListNumeric\"></app-icon>\r\n      </div>\r\n    </div> -->\r\n\r\n    <!-- Quote -->\r\n    <!-- <div class=\"tool\">\r\n      <div class=\"icon\">\r\n        <app-icon size=\"16px\" [icon]=\"faQuoteLeft\"></app-icon>\r\n      </div>\r\n    </div> -->\r\n\r\n    <!-- Code -->\r\n    <div class=\"tool\">\r\n      <div class=\"icon\" (click)=\"applyCode()\">\r\n        <app-icon size=\"16px\" [icon]=\"faCode\"></app-icon>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Code block -->\r\n    <div class=\"tool\">\r\n      <div class=\"icon\" (click)=\"applyCodeBlock()\">\r\n        <app-icon size=\"16px\" [icon]=\"faCode\"></app-icon>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "UpperNavigationComponent",
            "id": "component-UpperNavigationComponent-f301fb0673742fb47fbaece1b037d42b51e5bf17773ad965ed16993f9fe6e6dc1ea01275e719b22efab6432aeb82069e6d4e2d44a8768a0a92ed0aad983bf208",
            "file": "src/app/_main/components/upper-navigation/upper-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-upper-navigation",
            "styleUrls": [
                "./upper-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./upper-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_isButtonDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "faAngleDown",
                    "defaultValue": "faAngleDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "faCog",
                    "defaultValue": "faCog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "faSignOut",
                    "defaultValue": "faSignOut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "faUser",
                    "defaultValue": "faUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "openBelow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'openBelow'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createNewTask",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isButtonDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toggleProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '@auth/services/auth.service';\nimport { WorkspaceService } from '@dashboard/services/workspace.service';\nimport { faAngleDown, faCog, faSignOut, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { DialogService } from '@main/services/dialog.service';\nimport { TaskService } from '@tasks/services/task.service';\nimport { fromEvent, map, skip, take } from 'rxjs';\n\n@Component({\n  selector: 'app-upper-navigation',\n  templateUrl: './upper-navigation.component.html',\n  styleUrls: ['./upper-navigation.component.scss'],\n})\nexport class UpperNavigationComponent implements OnInit {\n  constructor(\n    private dialogService: DialogService,\n    private taskService: TaskService,\n    private workspaceService: WorkspaceService,\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n  ngOnInit() {\n    this.workspaceService.list().pipe(\n      map((workspaces) => {\n        if (workspaces.length === 0) {\n          this._isButtonDisabled = false;\n        } else if (\n          workspaces.filter((workspace) => workspace.projectsWithPrivileges.length).length === 0\n        ) {\n          this._isButtonDisabled = false;\n        } else {\n          this._isButtonDisabled = true;\n        }\n      }),\n    );\n  }\n\n  @ViewChild('openBelow') openBelow!: ElementRef<HTMLElement>;\n\n  faAngleDown = faAngleDown;\n  faUser = faUser;\n  faCog = faCog;\n  faSignOut = faSignOut;\n\n  public active: boolean = false;\n  public _isButtonDisabled = true;\n\n  createNewTask() {\n    this.taskService.openCreateNewTaskDialog();\n  }\n\n  logout() {\n    this.authService.logout().subscribe(() => {\n      this.router.navigate(['/', 'auth', 'login']);\n    });\n  }\n\n  public isButtonDisabled() {\n    return this._isButtonDisabled;\n  }\n  public openProfile() {\n    this.active = true;\n    fromEvent(document, 'click')\n      .pipe(skip(1), take(1))\n      .subscribe(() => {\n        this.closeProfile();\n      });\n  }\n\n  public closeProfile() {\n    this.active = false;\n  }\n  public toggleProfile() {\n    if (!this.active) {\n      this.openProfile();\n    } else {\n      this.closeProfile();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 62px;\r\n\r\n  // flex-shrink: 0;\r\n  align-items: center;\r\n  background-color: var(--color-secondary-800);\r\n  color: var(--color-text);\r\n}\r\n\r\napp-button {\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px 20px;\r\n  margin: 0;\r\n}\r\n\r\n.flex-end-position {\r\n  position: absolute;\r\n  right: 0;\r\n  display: flex;\r\n  height: 62px;\r\n\r\n  .profile {\r\n    width: 200px;\r\n\r\n    .open-below {\r\n      position: absolute;\r\n      right: 0;\r\n      display: flex;\r\n      height: 100%;\r\n      align-items: center;\r\n      padding: 10px;\r\n      cursor: pointer;\r\n\r\n      app-icon {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        &.active {\r\n          transform: scaleY(-1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.options {\r\n  position: absolute;\r\n  z-index: 2;\r\n  top: 62px;\r\n  right: 0;\r\n  display: none;\r\n  width: 200px;\r\n  cursor: pointer;\r\n\r\n  &.active {\r\n    display: block;\r\n    background-color: var(--color-secondary-600);\r\n    color: var(--color-text);\r\n\r\n    a {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 12px 10px;\r\n      border-radius: var(--border-radius);\r\n      color: var(--color-text);\r\n      transition: background-color 0.2s ease-in-out;\r\n\r\n      app-icon {\r\n        margin-right: 1rem;\r\n        margin-left: 2rem;\r\n      }\r\n\r\n      &:hover {\r\n        background-color: var(--color-secondary-500);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./upper-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-button *ngIf=\"isButtonDisabled()\" variant=\"primary\" (click)=\"createNewTask()\" type=\"button\" i18n>New task\r\n</app-button>\r\n<div class=\"search\"></div>\r\n<section class=\"flex-end-position\">\r\n  <fa-icon></fa-icon>\r\n  <div class=\"profile\">\r\n    <div class=\"avatar\"></div>\r\n    <div class=\"name\"></div>\r\n    <div #openBelow class=\"open-below\" (click)=\"toggleProfile()\" [class.active]=\"active\">\r\n      <app-icon [icon]=\"faAngleDown\" size=\"16px\"></app-icon>\r\n    </div>\r\n  </div>\r\n</section>\r\n<div class=\"options\" [class.active]=\"active\">\r\n  <ul>\r\n    <li>\r\n      <a routerLink=\"/settings/account\" routerLinkActive=\"active\">\r\n        <app-icon [icon]=\"faUser\" size=\"16px\"></app-icon>\r\n        <h2 i18n>Profile</h2>\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a routerLink=\"/settings/localization\" routerLinkActive=\"active\">\r\n        <app-icon [icon]=\"faCog\" size=\"16px\"></app-icon>\r\n        <h2 i18n>Settings</h2>\r\n      </a>\r\n    </li>\r\n    <li>\r\n      <a (click)=\"logout()\">\r\n        <app-icon [icon]=\"faSignOut\" size=\"16px\"></app-icon>\r\n        <h2 i18n>Log out</h2>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "ViewOptionsComponent",
            "id": "component-ViewOptionsComponent-0ee3f6c0b635f6e1a7291b3b6fdc53d82377340c4ba2527769e71faaae698a5f4c562902e87c7dcfd6f29140069e780951946165d4a94e44069917455b700122",
            "file": "src/app/dashboard/components/view-options/view-options.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-view-options",
            "styleUrls": [
                "./view-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Project",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filter",
                    "defaultValue": "faFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "penToSquare",
                    "defaultValue": "faPenToSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { faFilter, faPenToSquare } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-view-options',\n  templateUrl: './view-options.component.html',\n  styleUrls: ['./view-options.component.scss'],\n})\nexport class ViewOptionsComponent {\n  penToSquare = faPenToSquare;\n  filter = faFilter;\n\n  public workspaceId: number;\n  public projectId: number;\n\n  @Input()\n  project!: Project;\n\n  @Input()\n  title!: string;\n\n  constructor(private activatedRoute: ActivatedRoute) {\n    const { workspaceId, projectId } = this.activatedRoute.snapshot.params;\n\n    this.workspaceId = workspaceId;\n    this.projectId = projectId;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n  align-items: center;\r\n  color: var(--color-text);\r\n}\r\n\r\nsection {\r\n  position: relative;\r\n  display: flex;\r\n  margin-bottom: 1rem;\r\n\r\n  .tabs {\r\n    display: flex;\r\n\r\n    .project-name {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 10px;\r\n      margin-right: 10px;\r\n    }\r\n\r\n    a {\r\n      position: relative;\r\n      display: block;\r\n      padding: 10px;\r\n      margin-right: 10px;\r\n      color: var(--color-neutral-300);\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        color: var(--color-text);\r\n      }\r\n\r\n      &.active {\r\n        color: var(--color-text);\r\n\r\n        &::before {\r\n          position: absolute;\r\n          bottom: 10px;\r\n          left: 5px;\r\n          width: calc(100% - 10px);\r\n          height: 2px;\r\n          background-color: var(--color-primary-700);\r\n          border-radius: var(--border-radius);\r\n          content: '';\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./view-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section>\r\n  <div class=\"tabs\">\r\n    <div class=\"project-name\">\r\n      <h2 *ngIf=\"!project\" class=\"typo-heading-5\">{{title}}</h2>\r\n      <h2 *ngIf=\"project\" class=\"typo-heading-5\">{{title}} {{project.name}}</h2>\r\n    </div>\r\n    <ng-container *ngIf=\"project\">\r\n      <a [routerLink]=\"['/', workspaceId, project.id, 'edit', 'general']\" routerLinkActive=\"active\">\r\n        <h2 i18n>General</h2>\r\n      </a>\r\n      <a [routerLink]=\"['/', workspaceId, project.id, 'edit', 'members' ]\" routerLinkActive=\"active\">\r\n        <h2 i18n>Members</h2>\r\n      </a>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!project\">\r\n      <a [routerLink]=\"['/', workspaceId, 'create', 'general' ]\" routerLinkActive=\"active\">\r\n        <h2 i18n>General</h2>\r\n      </a>\r\n      <a [routerLink]=\"['/', workspaceId, 'create', 'members' ]\" routerLinkActive=\"active\">\r\n        <h2 i18n>Members</h2>\r\n      </a>\r\n    </ng-container>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "ViewOptionsComponent",
            "id": "component-ViewOptionsComponent-d4d41eb107b51a6ebb6dd2fcd4c31a484f3ab630f98177585cfb0e651e6459ed152259d1ff1b11f76a0373aa2e81164bcfb53b28dbbd7ed4d122f8bf57c4831e-1",
            "file": "src/app/tasks/components/view-options/view-options.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-view-options",
            "styleUrls": [
                "./view-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Filter[]",
                    "decorators": []
                },
                {
                    "name": "filtersControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Project",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faGithub",
                    "defaultValue": "faGithub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "filter",
                    "defaultValue": "faFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isFiltersOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "penToSquare",
                    "defaultValue": "faPenToSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { Project } from '@dashboard/interfaces/project.interface';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faFilter, faPenToSquare } from '@fortawesome/free-solid-svg-icons';\nimport { Filter } from '@main/interfaces/filters.interface';\n\n@Component({\n  selector: 'app-view-options',\n  templateUrl: './view-options.component.html',\n  styleUrls: ['./view-options.component.scss'],\n})\nexport class ViewOptionsComponent {\n  penToSquare = faPenToSquare;\n  faGithub = faGithub;\n  filter = faFilter;\n\n  public workspaceId: number;\n  public projectId: number;\n\n  @Input()\n  project!: Project;\n\n  @Input()\n  filters: Filter[] = [];\n\n  @Input()\n  public filtersControl = new FormControl();\n\n  public isFiltersOpen = false;\n\n  constructor(private activatedRoute: ActivatedRoute) {\n    const { workspaceId, projectId } = this.activatedRoute.snapshot.params;\n\n    this.workspaceId = workspaceId;\n    this.projectId = projectId;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n  align-items: center;\r\n  color: var(--color-text);\r\n}\r\n\r\nsection {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 1rem;\r\n\r\n  .tabs {\r\n    display: flex;\r\n\r\n    .project-name {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 10px;\r\n      margin-right: 10px;\r\n\r\n      a {\r\n        padding: 0;\r\n        margin-left: 1rem;\r\n      }\r\n    }\r\n\r\n    a {\r\n      position: relative;\r\n      display: block;\r\n      padding: 10px 10px 15px 10px;\r\n      margin-right: 10px;\r\n      color: var(--color-neutral-300);\r\n      cursor: pointer;\r\n\r\n      &:hover {\r\n        color: var(--color-text);\r\n      }\r\n\r\n      &.active {\r\n        color: var(--color-text);\r\n\r\n        &::before {\r\n          position: absolute;\r\n          bottom: 10px;\r\n          left: 5px;\r\n          width: calc(100% - 10px);\r\n          height: 2px;\r\n          background-color: var(--color-primary-700);\r\n          border-radius: var(--border-radius);\r\n          content: '';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .options {\r\n    display: flex;\r\n    height: 100%;\r\n    align-items: center;\r\n\r\n    .options-element {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 10px;\r\n      color: var(--color-neutral-300);\r\n      cursor: pointer;\r\n\r\n      app-icon {\r\n        display: flex;\r\n        align-items: center;\r\n        padding-right: 10px;\r\n      }\r\n\r\n      &:hover {\r\n        color: var(--color-text);\r\n      }\r\n\r\n      .overlay {\r\n        position: absolute;\r\n        z-index: 150;\r\n        right: 0;\r\n        bottom: 0;\r\n        width: 200px;\r\n        padding: 1rem;\r\n        background-color: var(--color-secondary-600);\r\n        border-radius: var(--border-radius);\r\n        transform: translateY(100%);\r\n      }\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./view-options.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ViewOptionsComponent-1",
            "templateData": "<section *ngIf=\"project\">\r\n  <div class=\"tabs\">\r\n    <div class=\"project-name\">\r\n      <h2 class=\"typo-heading-5\">{{project.name}}</h2>\r\n      <a *ngIf=\"project.gitHubIntegration\" href=\"https://github.com/{{ project.gitHubIntegration }}\" target=\"blank\">\r\n        <app-icon [icon]=\"faGithub\"></app-icon>\r\n      </a>\r\n    </div>\r\n    <a [routerLink]=\"['/', workspaceId, project.id, 'board']\" routerLinkActive=\"active\">\r\n      <h2 i18n>Board</h2>\r\n    </a>\r\n    <a [routerLink]=\"['/', workspaceId, project.id, 'list']\" routerLinkActive=\"active\">\r\n      <h2 i18n>List</h2>\r\n    </a>\r\n    <a [routerLink]=\"['/', workspaceId, project.id, 'schedule']\" routerLinkActive=\"active\">\r\n      <h2 i18n>Schedule</h2>\r\n    </a>\r\n    <a [routerLink]=\"['/', workspaceId, project.id, 'calendar']\" routerLinkActive=\"active\">\r\n      <h2 i18n>Calendar</h2>\r\n    </a>\r\n    <a routerLinkActive=\"active\">\r\n      <h2 i18n>Backlog</h2>\r\n    </a>\r\n  </div>\r\n  <div class=\"options\">\r\n    <div class=\"options-element\" [routerLink]=\"['/', workspaceId, projectId, 'edit']\">\r\n      <app-icon [icon]=\"penToSquare\" size=\"16px\"></app-icon>\r\n      <h2 i18n>Edit</h2>\r\n    </div>\r\n    <div class=\"options-element\">\r\n      <app-icon (click)=\"isFiltersOpen = !isFiltersOpen\" [icon]=\"filter\" size=\"16px\"></app-icon>\r\n      <h2 (click)=\"isFiltersOpen = !isFiltersOpen\" i18n>Filters</h2>\r\n      <div [class.hidden]=\"!isFiltersOpen\" class=\"overlay\">\r\n        <app-filters [formControl]=\"filtersControl\" [filters]=\"filters\"></app-filters>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n"
        },
        {
            "name": "WorkspacesListPage",
            "id": "component-WorkspacesListPage-fd7cb93167131cc83c7238f26573369eb59c398c6cea462d5b06f599d751f71aabe06617f73ca89e8c177de6199a1c9409165f6de2eb52e2b191ae41868e4767",
            "file": "src/app/dashboard/pages/workspaces-list/workspaces-list.page.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-workspaces-list-page",
            "styleUrls": [
                "./workspaces-list.page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./workspaces-list.page.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faPlus",
                    "defaultValue": "faPlus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Plus icon to display on the add button</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nPlus icon to display on the add button\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "workspaces$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Workspace[]>",
                    "optional": true,
                    "description": "<p>Workspaces list observable to use in the template.</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nWorkspaces list observable to use in the template.\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteWorkspace",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows an alert dialog to confirm the workspace deletion and deletes the workspace if confirmed.\n",
                    "description": "<p>Shows an alert dialog to confirm the workspace deletion and deletes the workspace if confirmed.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1739,
                                "end": 1748,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "workspace"
                            },
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1733,
                                "end": 1738,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Workspace to delete</p>\n"
                        }
                    ]
                },
                {
                    "name": "editWorkspace",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNavigates to the workspace edit page.\n",
                    "description": "<p>Navigates to the workspace edit page.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2111,
                                "end": 2120,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "workspace"
                            },
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2105,
                                "end": 2110,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Workspace to edit</p>\n"
                        }
                    ]
                },
                {
                    "name": "loadWorkspaces",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the workspaces list from the workspace service.\n",
                    "description": "<p>Loads the workspaces list from the workspace service.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLifecycle hook to load workspaces at the start of the page.\n",
                    "description": "<p>Lifecycle hook to load workspaces at the start of the page.</p>\n"
                },
                {
                    "name": "openWorkspace",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "workspace",
                            "type": "Workspace",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Workspaces list page component.</p>\n",
            "rawdescription": "\n\nWorkspaces list page component.\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { Observable } from 'rxjs';\nimport { Page } from 'src/app/_main/decorators/page.decorator';\nimport { DialogService } from 'src/app/_main/services/dialog.service';\nimport { Workspace } from '../../interfaces/workspace.interface';\nimport { ProjectService } from '../../services/project.service';\nimport { WorkspaceService } from '../../services/workspace.service';\n\n/**\n * Workspaces list page component.\n */\n@Page()\n@Component({\n  selector: 'app-workspaces-list-page',\n  templateUrl: './workspaces-list.page.html',\n  styleUrls: ['./workspaces-list.page.scss'],\n})\nexport class WorkspacesListPage implements OnInit {\n  /**\n   * Default constructor with dependency injection.\n   * @param workspaceService Workspace service\n   * @param dialogService Dialog service\n   * @param router Router service\n   */\n  constructor(\n    private workspaceService: WorkspaceService,\n    private projectService: ProjectService,\n    private dialogService: DialogService,\n    private router: Router,\n  ) {}\n\n  /**\n   * Plus icon to display on the add button\n   */\n  public faPlus = faPlus;\n\n  /**\n   * Workspaces list observable to use in the template.\n   */\n  public workspaces$?: Observable<Workspace[]>;\n\n  /**\n   * Lifecycle hook to load workspaces at the start of the page.\n   */\n  ngOnInit() {\n    this.loadWorkspaces();\n  }\n\n  /**\n   * Loads the workspaces list from the workspace service.\n   */\n  loadWorkspaces() {\n    this.workspaces$ = this.workspaceService.list();\n  }\n\n  /**\n   * Shows an alert dialog to confirm the workspace deletion and deletes the workspace if confirmed.\n   * @param workspace Workspace to delete\n   */\n  deleteWorkspace(workspace: Workspace) {\n    this.dialogService.confirmWorkspaceDelete(workspace).subscribe(() => {\n      this.workspaceService.delete(workspace.id).subscribe(() => {\n        // this.loadWorkspaces();\n        window.location.reload();\n      });\n    });\n  }\n\n  /**\n   * Navigates to the workspace edit page.\n   * @param workspace Workspace to edit\n   */\n  editWorkspace(workspace: Workspace) {\n    this.router.navigate(['/', workspace.id, 'edit']);\n  }\n\n  openWorkspace(workspace: Workspace) {\n    this.router.navigate(['/', workspace.id]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding: 2rem;\r\n}\r\n",
                    "styleUrl": "./workspaces-list.page.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor with dependency injection.</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "workspaceService",
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nDefault constructor with dependency injection.\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 845,
                            "end": 861,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "workspaceService"
                        },
                        "type": "WorkspaceService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 839,
                            "end": 844,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Workspace service</p>\n"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 892,
                            "end": 905,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "dialogService"
                        },
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 886,
                            "end": 891,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Dialog service</p>\n"
                    },
                    {
                        "name": {
                            "pos": 933,
                            "end": 939,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 927,
                            "end": 932,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Router service</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Page header -->\r\n<section class=\"flex justify-between items-center\">\r\n  <h2 class=\"typo-heading-5\" i18n>Workspaces</h2>\r\n  <app-button variant=\"primary\" routerLink=\"/create\" [icon]=\"faPlus\" i18n>New workspace</app-button>\r\n</section>\r\n\r\n<!-- Table -->\r\n<table mat-table [dataSource]=\"(workspaces$ | async) || []\">\r\n\r\n  <!-- Name column -->\r\n  <ng-container matColumnDef=\"name\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Name</th>\r\n    <td mat-cell *matCellDef=\"let row\" (click)=\"openWorkspace(row)\" class=\"clickable-cell\"> {{ row.name }} </td>\r\n  </ng-container>\r\n\r\n  <!-- Statistics column -->\r\n  <ng-container matColumnDef=\"statistics\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Statistics</th>\r\n    <td mat-cell *matCellDef=\"let row\"> - </td>\r\n  </ng-container>\r\n\r\n  <!-- Last update column -->\r\n  <ng-container matColumnDef=\"lastUpdate\">\r\n    <th mat-header-cell *matHeaderCellDef i18n>Last update</th>\r\n    <td mat-cell *matCellDef=\"let row\"> - </td>\r\n  </ng-container>\r\n\r\n  <!-- Actions column -->\r\n  <ng-container matColumnDef=\"actions\">\r\n    <th mat-header-cell *matHeaderCellDef i18n></th>\r\n    <td mat-cell *matCellDef=\"let row\" class=\"action-cell\">\r\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"flex items-center\">\r\n        <app-icon icon=\"matMoreVert\"></app-icon>\r\n      </button>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"editWorkspace(row)\">\r\n          <span i18n>Edit workspace</span>\r\n        </button>\r\n        <button mat-menu-item class=\"important\" (click)=\"deleteWorkspace(row)\">\r\n          <span i18n>Delete workspace</span>\r\n        </button>\r\n      </mat-menu>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"['name', 'statistics', 'lastUpdate', 'actions']\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: ['name', 'statistics', 'lastUpdate', 'actions'];\"></tr>\r\n</table>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-5b7afa15ab904833811d4d1614b9d8615c0922f76ba9eaaa1af026e20a3959f0cc29f64c303b7f4497338aa51069579b717b48baabb320c022494afc15cce099",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app.routing';\nimport { LandingPageComponent } from './landing-page/landing-page/landing-page.component';\nimport { MainModule } from './_main/_main.module';\n\n@NgModule({\n  declarations: [AppComponent, LandingPageComponent],\n  imports: [AppRoutingModule, BrowserAnimationsModule, MainModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LandingPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MainModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-923428d1a7427f80f0249909a45763d6074489c0540bc9e33b97ef240968948ce26a3c347a0a4d800a37689b2dbff2457bb79bfec802554d4ac6349bd750b411",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoggedInUsersGuard } from './auth/guard/logged-in-users.guard';\nimport { LandingPageComponent } from './landing-page/landing-page/landing-page.component';\nimport { MainViewComponent } from './_main/components/main-view/main-view.component';\n\nconst routes: Routes = [\n  {\n    path: 'auth',\n    loadChildren: () => \"import('./auth/auth.module').then((m) => m.AuthModule)\",\n  },\n  {\n    path: 'landing-page',\n    component: LandingPageComponent,\n  },\n  {\n    path: '',\n    component: MainViewComponent,\n    canActivate: [LoggedInUsersGuard],\n    children: [\n      {\n        path: 'email',\n        loadChildren: () => \"import('./emails/emails.module').then((m) => m.EmailsModule)\",\n      },\n      {\n        path: 'messages',\n        loadChildren: () => \"import('./messages/messages.module').then((m) => m.MessagesModule)\",\n      },\n      {\n        path: '',\n        loadChildren: () => \"import('./dashboard/dashboard.module').then((m) => m.DashboardModule)\",\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      onSameUrlNavigation: 'reload',\n      paramsInheritanceStrategy: 'always',\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-484eb7b64ccab9a5180a658e49d4cd026f8494cd608bba5ba1f611366ce2ad68695237348b06ccf41e346b3a22507be39d567dadb6dd80db0057621a2e391c2b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MainModule } from '../_main/_main.module';\nimport { AuthRoutingModule } from './auth.routing';\nimport { ChangePasswordPage } from './pages/change-password/change-password.page';\nimport { DeleteAccountPage } from './pages/delete-account/delete-account.page';\nimport { ForgotPasswordPage } from './pages/forgot-password/forgot-password.page';\nimport { LoginPage } from './pages/login/login.page';\nimport { RegisterPage } from './pages/register/register.page';\nimport { RestoreAccountPage } from './pages/restore-account/restore-account.page';\n\n@NgModule({\n  imports: [CommonModule, AuthRoutingModule, MainModule, ReactiveFormsModule],\n  declarations: [\n    LoginPage,\n    RegisterPage,\n    ForgotPasswordPage,\n    ChangePasswordPage,\n    RestoreAccountPage,\n    DeleteAccountPage,\n  ],\n})\nexport class AuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChangePasswordPage"
                        },
                        {
                            "name": "DeleteAccountPage"
                        },
                        {
                            "name": "ForgotPasswordPage"
                        },
                        {
                            "name": "LoginPage"
                        },
                        {
                            "name": "RegisterPage"
                        },
                        {
                            "name": "RestoreAccountPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "MainModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-48dd060447eb13fd3551c8641f69703a4b5cca2efcf69b842da7b232a462efec589199409bda5b869352eee1635ee82359183a701f83e4018a7a2aca696a7e2d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ChangePasswordPage } from './pages/change-password/change-password.page';\nimport { DeleteAccountPage } from './pages/delete-account/delete-account.page';\nimport { ForgotPasswordPage } from './pages/forgot-password/forgot-password.page';\nimport { LoginPage } from './pages/login/login.page';\nimport { RegisterPage } from './pages/register/register.page';\nimport { RestoreAccountPage } from './pages/restore-account/restore-account.page';\n\n/**\n * Auth routes list\n */\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginPage,\n  },\n  {\n    path: 'logout',\n    component: LoginPage,\n  },\n  {\n    path: 'register',\n    component: RegisterPage,\n  },\n  {\n    path: 'password-reset',\n    component: ForgotPasswordPage,\n  },\n  {\n    path: 'set-new-password',\n    component: ChangePasswordPage,\n  },\n  {\n    path: 'restore-account',\n    component: RestoreAccountPage,\n  },\n  {\n    path: 'delete-account',\n    component: DeleteAccountPage,\n  },\n];\n\n/**\n * Auth routes module\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-55dda6c8a024c4eb80d3dd9d6444efe920c28b74d0f40d77dc0f7eb83a24d496e41487840a42b4b42d51045b6f3d6b0155fa880b03c09985c5d184e2bd24f77d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MainModule } from '../_main/_main.module';\nimport { IntegrationGithubComponent } from './components/integration-github/integration-github.component';\nimport { MemberListComponent } from './components/member-list/member-list.component';\nimport { ViewOptionsComponent } from './components/view-options/view-options.component';\nimport { DashboardRoutingModule } from './dashboard.routing';\nimport { AddMemberDialog } from './dialogs/add-member/add-member.dialog';\nimport { CreateProjectMembersPage } from './pages/create-project-members/create-project-members.page';\nimport { CreateProjectPage } from './pages/create-project/create-project.page';\nimport { CreateWorkspacePage } from './pages/create-workspace/create-workspace.page';\nimport { EditProjectMembersPage } from './pages/edit-project-members/edit-project-members.page';\nimport { EditProjectPage } from './pages/edit-project/edit-project.page';\nimport { EditWorkspacePage } from './pages/edit-workspace/edit-workspace.page';\nimport { ProjectsListPage } from './pages/projects-list/projects-list.page';\nimport { WorkspacesListPage } from './pages/workspaces-list/workspaces-list.page';\nimport { GitIntegrationService } from './services/git-integration.service';\n\n@NgModule({\n  imports: [CommonModule, MainModule, ReactiveFormsModule, DashboardRoutingModule],\n  declarations: [\n    CreateWorkspacePage,\n    WorkspacesListPage,\n    EditWorkspacePage,\n    ProjectsListPage,\n    CreateProjectPage,\n    EditProjectPage,\n    CreateProjectMembersPage,\n    EditProjectMembersPage,\n    IntegrationGithubComponent,\n    ViewOptionsComponent,\n    MemberListComponent,\n    AddMemberDialog,\n  ],\n  providers: [GitIntegrationService],\n})\nexport class DashboardModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "GitIntegrationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddMemberDialog"
                        },
                        {
                            "name": "CreateProjectMembersPage"
                        },
                        {
                            "name": "CreateProjectPage"
                        },
                        {
                            "name": "CreateWorkspacePage"
                        },
                        {
                            "name": "EditProjectMembersPage"
                        },
                        {
                            "name": "EditProjectPage"
                        },
                        {
                            "name": "EditWorkspacePage"
                        },
                        {
                            "name": "IntegrationGithubComponent"
                        },
                        {
                            "name": "MemberListComponent"
                        },
                        {
                            "name": "ProjectsListPage"
                        },
                        {
                            "name": "ViewOptionsComponent"
                        },
                        {
                            "name": "WorkspacesListPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "MainModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-d2a74f806141bd10eeea085f3057068e79bcc33576da7bfa85ac82b988ca035290cad08c1ee4ed463f57392f4dc7184f5dddc9b030d5cb6602481b46641b8a19",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/dashboard/dashboard.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MockPage } from '@main/pages/mock/mock.page';\nimport { CreateProjectMembersPage } from './pages/create-project-members/create-project-members.page';\nimport { CreateProjectPage } from './pages/create-project/create-project.page';\nimport { CreateWorkspacePage } from './pages/create-workspace/create-workspace.page';\nimport { EditProjectMembersPage } from './pages/edit-project-members/edit-project-members.page';\nimport { EditProjectPage } from './pages/edit-project/edit-project.page';\nimport { EditWorkspacePage } from './pages/edit-workspace/edit-workspace.page';\nimport { GithubIntegrationPage } from './pages/github-integration/github-integration.page';\nimport { ProjectsListPage } from './pages/projects-list/projects-list.page';\nimport { WorkspacesListPage } from './pages/workspaces-list/workspaces-list.page';\n\n/**\n * Dashboard routes list\n */\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: WorkspacesListPage,\n  },\n  {\n    path: 'settings',\n    loadChildren: () => \"import('../settings/settings.module').then((m) => m.SettingsModule)\",\n  },\n  {\n    path: 'github',\n    component: GithubIntegrationPage,\n    data: {\n      hideNavigation: true,\n    },\n  },\n  {\n    path: 'dashboard',\n    component: MockPage,\n    data: {\n      image: 'assets/mocks/dashboard.svg',\n    },\n  },\n  {\n    path: 'create',\n    component: CreateWorkspacePage,\n  },\n  {\n    path: ':workspaceId',\n    children: [\n      {\n        path: 'edit',\n        component: EditWorkspacePage,\n      },\n      {\n        path: '',\n        pathMatch: 'full',\n        component: ProjectsListPage,\n      },\n      {\n        path: 'create',\n        redirectTo: 'create/general',\n      },\n      {\n        path: 'create/general',\n        component: CreateProjectPage,\n      },\n      {\n        path: 'create/members',\n        component: CreateProjectMembersPage,\n      },\n      {\n        path: ':projectId/edit',\n        redirectTo: ':projectId/edit/general',\n      },\n      {\n        path: ':projectId/edit/general',\n        component: EditProjectPage,\n      },\n      {\n        path: ':projectId/edit/members',\n        component: EditProjectMembersPage,\n      },\n      {\n        path: ':projectId',\n        loadChildren: () => \"import('../tasks/tasks.module').then((m) => m.TasksModule)\",\n      },\n    ],\n  },\n];\n\n/**\n * Dashboard routes module\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DashboardRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EmailsModule",
            "id": "module-EmailsModule-061c96c0c5b5b4fa8b3b181441814767a43131dece2991771f993cc8ad7f733fed78df98aa984a36028eb51e31f1cfe22196878b93bdb77876d91fdcf2716178",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/emails/emails.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmailsRoutingModule } from './emails.routing';\n\n@NgModule({\n  imports: [CommonModule, EmailsRoutingModule],\n  declarations: [],\n})\nexport class EmailsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "EmailsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EmailsRoutingModule",
            "id": "module-EmailsRoutingModule-1b437317d7d861ba31d6bbbee38c33dc0411c1240e3a2c679a05c5be6b5d0246704096c1beeaeb86b336779343b985028641f36d1cc8e422219f2a595e6d5724",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/emails/emails.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MockPage } from '@main/pages/mock/mock.page';\n\n/**\n * Emails routes list\n */\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: MockPage,\n    data: {\n      image: 'assets/mocks/inbox.svg',\n    },\n  },\n];\n\n/**\n * Emails routes module\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EmailsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-37648242777f7aedbfe366b9a016100839035fef03329e24fc07418121784ba6fbca0a0d55bd580ddb62b8ced27e26bcc0f8e7af614c6005b9a91d63503d3922",
            "description": "<p>Main dependency module with all universal components and modules declarations\nThis module is required for application to run properly</p>\n<div><pre class=\"line-numbers\"><code class=\"language-html\">```js\nimport { MainModule } from &#39;&#64;app/main/main.module&#39;;</code></pre></div><p>(@)NgModule({\n  imports: [ ..., MainModule ],\n  ...\n})\nexport class ExampleModule {}</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\"></code></pre></div>",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/_main/_main.module.ts",
            "methods": [],
            "sourceCode": "import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Injector, NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { RouterModule } from '@angular/router';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { ButtonComponent } from './components/button/button.component';\nimport { CardComponent } from './components/card/card.component';\nimport { CheckboxComponent } from './components/checkbox/checkbox.component';\nimport { DialogOutletComponent } from './components/dialog-outlet/dialog-outlet.component';\nimport { FiltersComponent } from './components/filters/filters.component';\nimport { IconComponent } from './components/icon/icon.component';\nimport { InputDateTimeComponent } from './components/input-date-time/input-date-time.component';\nimport { InputComponent } from './components/input/input.component';\nimport { MainViewComponent } from './components/main-view/main-view.component';\nimport { NavElementWorkspaceComponent } from './components/nav-element-workspace/nav-element-workspace.component';\nimport { NavElementComponent } from './components/nav-element/nav-element.component';\nimport { OptionComponent } from './components/option/option.component';\nimport { SelectComponent } from './components/select/select.component';\nimport { SidebarNavigationComponent } from './components/sidebar-navigation/sidebar-navigation.component';\nimport { SnackbarOutletComponent } from './components/snackbar-outlet/snackbar-outlet.component';\nimport { SnackbarComponent } from './components/snackbar/snackbar.component';\nimport { TextareaComponent } from './components/textarea/textarea.component';\nimport { UpperNavigationComponent } from './components/upper-navigation/upper-navigation.component';\nimport { AlertDialog } from './dialogs/alert/alert.dialog';\nimport { ClickStopPropagationDirective } from './directives/click-stop-propagation.directive';\nimport { FocusInitialDirective } from './directives/focus-initial.directive';\nimport { LetDirective } from './directives/let.directive';\nimport { ViewContainerDirective } from './directives/view-container.directive';\nimport { ErrorInterceptor } from './interceptors/error.interceptor';\nimport { MockPage } from './pages/mock/mock.page';\nimport { ValidationErrorPipe } from './pipes/validation-error.pipe';\nimport { ApiService } from './services/api.service';\nimport { DialogService } from './services/dialog.service';\n\n/**\n * Main module configuration object\n */\nconst ngModuleConfig = {\n  imports: [\n    /*=============================================\n    =             Local dependencies              =\n    =============================================*/\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RouterModule,\n    ObserversModule,\n  ],\n  importExports: [\n    /*=============================================\n      =                Dependencies                 =\n      =============================================*/\n    DragDropModule,\n    PlatformModule,\n    OverlayModule,\n\n    /*=============================================\n      =              Material modules               =\n      =============================================*/\n    MatDialogModule,\n    MatIconModule,\n    MatMenuModule,\n    MatTableModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatTabsModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n\n    /*=============================================\n      =              External modules               =\n      =============================================*/\n    FontAwesomeModule,\n  ],\n  declarations: [\n    /*=============================================\n    =         Local custom components             =\n    =============================================*/\n  ],\n  exportDeclarations: [\n    /*=============================================\n    =         Exported custom components          =\n    =============================================*/\n    InputComponent,\n    ButtonComponent,\n    ValidationErrorPipe,\n    AlertDialog,\n    IconComponent,\n    FocusInitialDirective,\n    SidebarNavigationComponent,\n    NavElementComponent,\n    NavElementWorkspaceComponent,\n    UpperNavigationComponent,\n    SelectComponent,\n    OptionComponent,\n    MainViewComponent,\n    TextareaComponent,\n    CheckboxComponent,\n    CardComponent,\n    ClickStopPropagationDirective,\n    InputDateTimeComponent,\n    LetDirective,\n    FiltersComponent,\n    SnackbarComponent,\n    SnackbarOutletComponent,\n    MockPage,\n    DialogOutletComponent,\n    ViewContainerDirective,\n  ],\n  providers: [\n    DialogService,\n    ApiService,\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    MatCheckboxModule,\n    MatDatepickerModule,\n  ],\n};\n\n/**\n * Main dependency module with all universal components and modules declarations\n * This module is required for application to run properly\n * @example\n * ```js\n * import { MainModule } from '@app/main/main.module';\n *\n * (@)NgModule({\n *   imports: [ ..., MainModule ],\n *   ...\n * })\n * export class ExampleModule {}\n * ```\n */\n@NgModule({\n  imports: [...ngModuleConfig.imports, ...ngModuleConfig.importExports],\n  declarations: [...ngModuleConfig.declarations, ...ngModuleConfig.exportDeclarations],\n  exports: [...ngModuleConfig.importExports, ...ngModuleConfig.exportDeclarations],\n  providers: [...ngModuleConfig.providers],\n})\nexport class MainModule {\n  static injector: Injector;\n\n  constructor(injector: Injector) {\n    MainModule.injector = injector;\n    (window as any).injector = injector;\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": ""
                        },
                        {
                            "name": ""
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessagesModule",
            "id": "module-MessagesModule-bb0f3cb282dd9e55b5076935efcecf3730cac769e0dc7568aad38f6e24775104517995a28d20bfdce69294bc3154c2941c3b7a378068ebf87bf9da7136149426",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/messages/messages.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MessagesRoutingModule } from './messages.routing';\n\n@NgModule({\n  imports: [CommonModule, MessagesRoutingModule],\n  declarations: [],\n})\nexport class MessagesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MessagesRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessagesRoutingModule",
            "id": "module-MessagesRoutingModule-d11520d015a2852c4b3d1bc7cb4c3125c63e556a8aad1e16bd271ed553ca156b5f5485a987a8ef7484734b56047a077da822d2227bc5a2111a527dbaabdc63e7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/messages/messages.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MockPage } from '@main/pages/mock/mock.page';\n\n/**\n * Messages routes list\n */\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: MockPage,\n    data: {\n      image: 'assets/mocks/messages.svg',\n    },\n  },\n];\n\n/**\n * Messages routes module\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MessagesRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsModule",
            "id": "module-SettingsModule-af979deb5e9f78b21aafb6c7bcaa0c569bae0abb94fc950fedb7fdfda889efcbc0d376243b732e352b60abe23f36bd9e29477e6ef7268ee68aee3db8c89263bc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/settings/settings.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MainModule } from '@main/_main.module';\nimport { SettingsPage } from 'src/app/settings/pages/settings/settings.page';\nimport { IntegrationEntryComponent } from './components/integration-entry/integration-entry.component';\nimport { ListGroupComponent } from './components/list-group/list-group.component';\nimport { SettingsAccountPage } from './pages/settings-account/settings-account.page';\nimport { SettingsIntegrationsPage } from './pages/settings-integrations/settings-integrations.page';\nimport { SettingsLocalizationPage } from './pages/settings-localization/settings-localization.page';\nimport { SettingsSessionsPage } from './pages/settings-sessions/settings-sessions.page';\nimport { SettingsRoutingModule } from './settings.routing';\n\n@NgModule({\n  imports: [CommonModule, MainModule, ReactiveFormsModule, SettingsRoutingModule],\n  declarations: [\n    SettingsPage,\n    SettingsLocalizationPage,\n    SettingsAccountPage,\n    SettingsIntegrationsPage,\n    SettingsSessionsPage,\n    ListGroupComponent,\n    IntegrationEntryComponent,\n  ],\n})\nexport class SettingsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IntegrationEntryComponent"
                        },
                        {
                            "name": "ListGroupComponent"
                        },
                        {
                            "name": "SettingsAccountPage"
                        },
                        {
                            "name": "SettingsIntegrationsPage"
                        },
                        {
                            "name": "SettingsLocalizationPage"
                        },
                        {
                            "name": "SettingsPage"
                        },
                        {
                            "name": "SettingsSessionsPage"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MainModule"
                        },
                        {
                            "name": "SettingsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsRoutingModule",
            "id": "module-SettingsRoutingModule-203e8a60bec0e07a2e6a822032909f8e3d15b6a605156bc0794d90309c47996f20c51901aefc3644cc427f1dd2ed45698da97d0aa095495299bbd8d9de5f33ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/settings/settings.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SettingsAccountPage } from './pages/settings-account/settings-account.page';\nimport { SettingsIntegrationsPage } from './pages/settings-integrations/settings-integrations.page';\nimport { SettingsLocalizationPage } from './pages/settings-localization/settings-localization.page';\nimport { SettingsSessionsPage } from './pages/settings-sessions/settings-sessions.page';\nimport { SettingsPage } from './pages/settings/settings.page';\n\n/**\n * Messages routes list\n */\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage,\n    children: [\n      {\n        path: 'account',\n        component: SettingsAccountPage,\n      },\n      {\n        path: 'localization',\n        component: SettingsLocalizationPage,\n      },\n      {\n        path: 'integrations',\n        component: SettingsIntegrationsPage,\n      },\n      {\n        path: 'sessions',\n        component: SettingsSessionsPage,\n      },\n    ],\n  },\n];\n\n/**\n * Messages routes module\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TasksModule",
            "id": "module-TasksModule-da716c7dc24da4262a0c5b425fa572cbdfa879fed8775f01c3a5434cf05568595adfeeaafc66809fefcf89f5864b18961f039fb667136ee9fc77d5d5f18f4ef3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/tasks/tasks.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MainModule } from '../_main/_main.module';\nimport { BoardTaskComponent } from './components/board-task/board-task.component';\nimport { InputAssigneeComponent } from './components/input-assignee/input-assignee.component';\nimport { StatusLabelComponent } from './components/status-label/status-label.component';\nimport { ViewOptionsComponent } from './components/view-options/view-options.component';\nimport { TaskDialog } from './dialogs/task/task.dialog';\nimport { BoardPage } from './pages/board/board.page';\nimport { SchedulePage } from './pages/schedule/schedule.page';\nimport { TaskListPage } from './pages/task-list/task-list.page';\nimport { StatusColorPipe } from './pipes/status-color.pipe';\nimport { TaskPriorityIconPipe } from './pipes/task-priority-icon.pipe';\nimport { TaskPriorityPipe } from './pipes/task-priority.pipe';\nimport { TaskTypeIconPipe } from './pipes/task-type-icon.pipe';\nimport { TaskTypePipe } from './pipes/task-type.pipe';\nimport { TasksRoutingModule } from './tasks.routing';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, MainModule, TasksRoutingModule],\n  declarations: [\n    BoardPage,\n    BoardTaskComponent,\n    TaskListPage,\n    TaskDialog,\n    TaskTypePipe,\n    TaskPriorityPipe,\n    TaskPriorityIconPipe,\n    TaskTypeIconPipe,\n    ViewOptionsComponent,\n    SchedulePage,\n    InputAssigneeComponent,\n    StatusLabelComponent,\n    StatusColorPipe,\n  ],\n})\nexport class TasksModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BoardPage"
                        },
                        {
                            "name": "BoardTaskComponent"
                        },
                        {
                            "name": "InputAssigneeComponent"
                        },
                        {
                            "name": "SchedulePage"
                        },
                        {
                            "name": "StatusColorPipe"
                        },
                        {
                            "name": "StatusLabelComponent"
                        },
                        {
                            "name": "TaskDialog"
                        },
                        {
                            "name": "TaskListPage"
                        },
                        {
                            "name": "TaskPriorityIconPipe"
                        },
                        {
                            "name": "TaskPriorityPipe"
                        },
                        {
                            "name": "TaskTypeIconPipe"
                        },
                        {
                            "name": "TaskTypePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MainModule"
                        },
                        {
                            "name": "TasksRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TasksRoutingModule",
            "id": "module-TasksRoutingModule-5293d57cc3ec0eb173071efc832d09b818762a17896a51493a0757d4beb438b0c19977b45a6658f1a1f3c72037b3da4453d694acd98fe697b49d2d87e897f782",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/tasks/tasks.routing.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MockPage } from '@main/pages/mock/mock.page';\nimport { BoardPage } from './pages/board/board.page';\nimport { SchedulePage } from './pages/schedule/schedule.page';\nimport { TaskListPage } from './pages/task-list/task-list.page';\n\n/**\n * Tasks routes list\n */\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'board',\n  },\n  {\n    path: 'board',\n    component: BoardPage,\n  },\n  {\n    path: 'list',\n    component: TaskListPage,\n  },\n  {\n    path: 'schedule',\n    component: SchedulePage,\n  },\n  {\n    path: 'calendar',\n    component: MockPage,\n    data: {\n      image: 'assets/mocks/calendar.svg',\n    },\n  },\n];\n\n/**\n * Tasks routes module\n */\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TasksRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "$Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/card/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-card',\n  template: `\n    <app-card>\n      <div class=\"card-title\">\n        Sample card\n      </div>\n      <div class=\"card-content\">\n        Little bit of content\n      </div>\n    </app-card>\n  `,\n})"
            },
            {
                "name": "$Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-checkbox',\n  template: `<app-checkbox>Sample checkbox</app-checkbox>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
            },
            {
                "name": "$Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-input',\n  template: `<app-input></app-input>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
            },
            {
                "name": "$Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/input-date-time/input-date-time.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-input-date-time',\n  template: `<app-input-date-time></app-input-date-time>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
            },
            {
                "name": "$Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-textarea',\n  template: `<app-textarea></app-textarea>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
            },
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/card/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-card',\n  description: `Cards also have an actions section where buttons can be placed`,\n  template: `\n    <app-card>\n      <div class=\"card-title\">\n        Sample card\n      </div>\n      <div class=\"card-content\">\n        Little bit of content\n      </div>\n      <div class=\"card-content\">\n        <app-button>Action</app-button>\n      </div>\n    </app-card>\n  `,\n})"
            },
            {
                "name": "componentContentDecorator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/component-content-decorator.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(content: string) => {\n  return componentWrapperDecorator((story) => {\n    return setContent(story, content);\n  });\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tests/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('../', true, /\\.spec\\.ts$/)",
                "rawdescription": "Context for searching for tests",
                "description": "<p>Context for searching for tests</p>\n"
            },
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/textarea/textarea.theme.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "monaco.editor.defineTheme('dark', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [],\n  colors: {\n    'editor.background': '#364053',\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  code: `<app-button>Button</app-button>`,\n})"
            },
            {
                "name": "DOCS_CONTROL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(controlType: ControlType) => ({\n  control: {\n    type: controlType,\n  },\n})"
            },
            {
                "name": "DOCS_GETTER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(description: string) => ({\n  control: {\n    type: false,\n  },\n  table: {\n    category: 'getters',\n  },\n  description,\n})"
            },
            {
                "name": "DOCS_ICON_SELECT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  control: {\n    type: 'select',\n  },\n  options: Object.keys(icons),\n  mapping: icons,\n}"
            },
            {
                "name": "DOCS_PRESET_CONTROL_ACCESSOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  required: {\n    control: { type: false },\n    table: { category: 'getters', type: { summary: 'boolean' } },\n    description: `Property to describe if the control is required in a form (contains \\`requiredValidator()\\`)`,\n    type: { name: 'boolean' },\n  },\n  control: {\n    control: { type: false },\n    table: { category: 'getters', type: { summary: 'FormControl' } },\n    description: `Control attached to this control accessor`,\n    type: { name: 'FormControl' },\n  },\n  formControl: {\n    control: { type: false },\n    table: { type: { summary: 'FormControl' } },\n    description: `Control to attach to this control accessor (\\`formControlName\\` can also be used instead)`,\n    type: { name: 'FormControl' },\n  },\n  formControlName: {\n    control: { type: false },\n    table: { type: { summary: 'string' } },\n    description: `Control to attach to this control accessor - require to be nested in \\`formGroup\\` (\\`formControl\\` can also be used instead)`,\n    type: { name: 'string' },\n  },\n}"
            },
            {
                "name": "DOCS_SELECT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  control: {\n    type: 'select',\n  },\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiURL: '/api',\n  disableConsoleLog: true,\n  version: app.version,\n}",
                "rawdescription": "Variant of global environment file for production.",
                "description": "<p>Variant of global environment file for production.</p>\n"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  /**\n   * Whether the application is running in production mode.\n   */\n  production: false,\n\n  /**\n   * API URL for the backend.\n   */\n  apiURL: '/api',\n\n  /**\n   * Whether to disable console logging.\n   */\n  disableConsoleLog: false,\n\n  /**\n   * App version\n   */\n  version: app.version,\n}",
                "rawdescription": "Global environment configuration object, replaced in configurations other than development. Stores build specific data.",
                "description": "<p>Global environment configuration object, replaced in configurations other than development. Stores build specific data.</p>\n"
            },
            {
                "name": "exposeAllPossibilities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/component-content-decorator.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<C = any>(\n  story: Story<C>,\n  selector: string,\n  input: string,\n  values: string[],\n) => {\n  const inputRegex = new RegExp(`( |)\\\\[${input}\\\\]=\"${input}\"`, 'g');\n\n  const addInputToTemplate = (template: string, value: string) => {\n    let valueCapital = value[0].toUpperCase() + value.substring(1);\n    return template.replace('><', ` ${input}=\"${value}\">${valueCapital}<`);\n  };\n\n  const wrapWithWithDiv = (template: string) => {\n    const style = 'display:flex;gap:1rem;';\n    return `<div style=\"${style}\">${template}</div>`;\n  };\n\n  story.decorators = [\n    componentWrapperDecorator((story) => {\n      const baseTemplate = story.replace(inputRegex, '');\n      const inputsArray = values.map((v) => addInputToTemplate(baseTemplate, v));\n      const template = inputsArray.join('');\n\n      console.log(wrapWithWithDiv(template));\n\n      return wrapWithWithDiv(template);\n    }),\n  ];\n\n  story.argTypes = {\n    [input]: {\n      table: {\n        disable: true,\n      },\n    },\n  } as any as Partial<ArgTypes<C>>;\n\n  const emptyTemplate = `<${selector}></${selector}>`;\n  const snippet = values.map((v) => addInputToTemplate(emptyTemplate, v)).join('\\n');\n\n  story.parameters = {\n    docs: {\n      source: {\n        code: snippet,\n        language: 'html',\n        type: 'auto',\n      },\n    },\n  };\n\n  return story;\n}"
            },
            {
                "name": "fasPenToSquare",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "faPenToSquare"
            },
            {
                "name": "fasQuestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "faQuestion"
            },
            {
                "name": "fasTrashArrowUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "faTrashArrowUp"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  code: `<app-button [icon]=\"faAdd\"></app-button>`,\n  description: `You can set \\`icon\\` property to add icon before text in buttons. This option supports prefixes like: \\`mat\\` |\n  \\`fas\\` | \\`fab\\` | \\`cu\\`.`,\n  props: {\n    icon: faAdd,\n  },\n})"
            },
            {
                "name": "icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/arg-type.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{ fasQuestion, fasPenToSquare, fasTrashArrowUp }"
            },
            {
                "name": "markdownExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/textarea/markdown.example.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n---\n__Advertisement :)__\n\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\n  resize in browser.\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\n  i18n with plurals support and easy syntax.\n\nYou will like those projects!\n\n---\n\n# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with \\`+\\`, \\`-\\`, or \\`*\\`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as \\`1.\\`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline \\`code\\`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n\\`\\`\\`\nSample text here...\n\\`\\`\\`\n\nSyntax highlighting\n\n\\`\\`\\` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n\\`\\`\\`\n\n## Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRight aligned columns\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of \\`markdown-it\\` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [\\<ins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [\\<mark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n\n`"
            },
            {
                "name": "MatDialogTestingProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tests/helpers/mat-dialog-testing-provider.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  MatDialogModule,\n  { provide: MAT_DIALOG_DATA, useValue: {} },\n  { provide: MatDialogRef, useValue: {} },\n]"
            },
            {
                "name": "ngModuleConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/_main.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  imports: [\n    /*=============================================\n    =             Local dependencies              =\n    =============================================*/\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RouterModule,\n    ObserversModule,\n  ],\n  importExports: [\n    /*=============================================\n      =                Dependencies                 =\n      =============================================*/\n    DragDropModule,\n    PlatformModule,\n    OverlayModule,\n\n    /*=============================================\n      =              Material modules               =\n      =============================================*/\n    MatDialogModule,\n    MatIconModule,\n    MatMenuModule,\n    MatTableModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatTabsModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n\n    /*=============================================\n      =              External modules               =\n      =============================================*/\n    FontAwesomeModule,\n  ],\n  declarations: [\n    /*=============================================\n    =         Local custom components             =\n    =============================================*/\n  ],\n  exportDeclarations: [\n    /*=============================================\n    =         Exported custom components          =\n    =============================================*/\n    InputComponent,\n    ButtonComponent,\n    ValidationErrorPipe,\n    AlertDialog,\n    IconComponent,\n    FocusInitialDirective,\n    SidebarNavigationComponent,\n    NavElementComponent,\n    NavElementWorkspaceComponent,\n    UpperNavigationComponent,\n    SelectComponent,\n    OptionComponent,\n    MainViewComponent,\n    TextareaComponent,\n    CheckboxComponent,\n    CardComponent,\n    ClickStopPropagationDirective,\n    InputDateTimeComponent,\n    LetDirective,\n    FiltersComponent,\n    SnackbarComponent,\n    SnackbarOutletComponent,\n    MockPage,\n    DialogOutletComponent,\n    ViewContainerDirective,\n  ],\n  providers: [\n    DialogService,\n    ApiService,\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    MatCheckboxModule,\n    MatDatepickerModule,\n  ],\n}",
                "rawdescription": "Main module configuration object",
                "description": "<p>Main module configuration object</p>\n"
            },
            {
                "name": "NO_CONTENT_PROVIDED",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/helpers/response.mock.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  status: 400,\n  body: {\n    message: 'No data provided',\n  },\n}",
                "rawdescription": "Object to mock no content provided response. Mainly used when request checks\nfor data in body, but nothing is provided.",
                "description": "<p>Object to mock no content provided response. Mainly used when request checks\nfor data in body, but nothing is provided.</p>\n"
            },
            {
                "name": "Pending",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  description: `To make the button show with loader you need to pass \\`pending\\` property with value: \\`true\\`.`,\n  code: `<app-button [pending]=\"true\">Button</app-button>`,\n  props: {\n    pending: true,\n  },\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tests/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "rawdescription": "Context builder form karma tests",
                "description": "<p>Context builder form karma tests</p>\n"
            },
            {
                "name": "setContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/component-content-decorator.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(template: string, content: string) => {\n  return template.replace(/(?<=(<[^/]*))>.?<(?=\\/)/g, `>${content}<`);\n}"
            },
            {
                "name": "story",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/helpers/story.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<C = any>(story: Story<C>, config: StoryConfig<C>) => {\n  if (config.multiple) {\n    exposeAllPossibilities(story, config.selector, config.multiple.prop, config.multiple.options);\n  }\n\n  const descriptionObject = config.description\n    ? {\n        parameters: {\n          docs: {\n            description: {\n              story: config.description,\n            },\n          },\n        },\n      }\n    : {};\n\n  const propsObject = config.props\n    ? {\n        args: config.props,\n      }\n    : {};\n\n  const codeObject = config.code\n    ? {\n        parameters: {\n          docs: {\n            source: {\n              code: config.code,\n              language: 'html',\n              type: 'auto',\n            },\n          },\n        },\n      }\n    : {};\n\n  const templateObject = config.template\n    ? {\n        decorators: [componentWrapperDecorator(() => config.template!)],\n        parameters: {\n          docs: {\n            source: {\n              code: config.template,\n              language: 'html',\n              type: 'auto',\n            },\n          },\n        },\n      }\n    : {};\n\n  return merge(story, descriptionObject, propsObject, codeObject, templateObject);\n}"
            },
            {
                "name": "SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/mocks/helpers/response.mock.helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  status: 200,\n  body: {\n    message: 'Success',\n  },\n}",
                "rawdescription": "Object to mock success response. Used often to notify app that request was\nsuccessful.",
                "description": "<p>Object to mock success response. Used often to notify app that request was\nsuccessful.</p>\n"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/card/card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/input-date-time/input-date-time.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputDateTimeComponent>",
                "defaultValue": "(args: InputDateTimeComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/textarea/textarea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TextareaComponent>",
                "defaultValue": "(args: TextareaComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Type",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  code: `<app-button type=\"button\"></app-button>`,\n  description: `If button is nested in a form, the default behavior is making this button a \\`submit\\` button. To\n  omit this it is needed to set \\`type\\` to \\`button\\`.`,\n  props: {\n    type: 'button',\n  },\n})"
            },
            {
                "name": "Variant",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/_main/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  multiple: {\n    prop: 'variant',\n    options: ['primary', 'secondary', 'important'],\n  },\n  description: `To customize the general appearance you need to use the \\`variant\\` property with one of the specified values.\n    If you will not specify variant, the button will appear with \\`secondary\\` styling.`,\n})"
            }
        ],
        "functions": [
            {
                "name": "applyFilters",
                "file": "src/app/_main/operators/apply-filters.operator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "filters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "catchResponse",
                "file": "src/app/_main/operators/catch-response.operator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "Debug",
                "file": "src/app/_main/decorators/debug.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": true,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "emailValidator",
                "file": "src/app/_main/validators/email.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Validator to check if email is valid</p>\n",
                "args": [],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 188,
                            "end": 195,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "expectToFail",
                "file": "src/tests/helpers/validator-testing.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "expectToPass",
                "file": "src/tests/helpers/validator-testing.helper.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initMocks",
                "file": "src/mocks/_main.mocks.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Function to initialize mocking server with all routes</p>\n",
                "args": []
            },
            {
                "name": "initMocks",
                "file": "src/mocks/_main.mocks.prod.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Production version of mocking initializer</p>\n<p>This file need to be in file replacements in angular.json</p>\n<div><pre class=\"line-numbers\"><code class=\"language-json\">{\n &quot;replace&quot;: &quot;src/mocks/_main.mocks.ts&quot;,\n &quot;with&quot;: &quot;src/mocks/_main.mocks.prod.ts&quot;\n}</code></pre></div>",
                "args": []
            },
            {
                "name": "maxLengthValidator",
                "file": "src/app/_main/validators/max-length.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Validator to check if the length is not greater than specyfic number</p>\n",
                "args": [
                    {
                        "name": "length",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "length",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "tagName": {
                            "pos": 220,
                            "end": 227,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "Page",
                "file": "src/app/_main/decorators/page.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Decorator to mark component or directive as a page.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-typescript\">(&#64;)Page()\n(&#64;)Component({\n  selector: &#39;app-example-page&#39;,\n  templateUrl: &#39;./example.page.html&#39;,\n  styleUrls: [&#39;./example.page.scss&#39;],\n})\nexport class CreateWorkspacePage { ... }</code></pre></div>",
                "args": []
            },
            {
                "name": "passwordValidator",
                "file": "src/app/_main/validators/password.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Validator to check if password is valid</p>\n",
                "args": [],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 191,
                            "end": 198,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "requiredValidator",
                "file": "src/app/_main/validators/required.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Validator to check if value was provided</p>\n",
                "args": [],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "tagName": {
                            "pos": 192,
                            "end": 199,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "sameAsValidator",
                "file": "src/app/_main/validators/same-as.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Validator to check if password is valid</p>\n",
                "args": [
                    {
                        "name": "compareWith",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "compareWith",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "tagName": {
                            "pos": 191,
                            "end": 198,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "returns"
                        },
                        "comment": "",
                        "returnType": ""
                    }
                ]
            },
            {
                "name": "Service",
                "file": "src/app/_main/decorators/service.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Decorator to mark class as a service and store theirs instances in global variable.</p>\n",
                "args": []
            },
            {
                "name": "ServiceValidator",
                "file": "src/app/_main/decorators/service-validator.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "errorValidationTree",
                        "type": "ErrorValidationTree",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "errorValidationTree",
                        "type": "ErrorValidationTree",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "workspacesMock",
                "file": "src/mocks/workspaces.mocks.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Function to create mocking routes for workspaces.</p>\n",
                "args": [
                    {
                        "name": "server",
                        "type": "Server",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 452,
                            "end": 458,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "server"
                        },
                        "type": "Server",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 446,
                            "end": 451,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Miragejs server</p>\n"
                    }
                ]
            },
            {
                "name": "workspacesSeed",
                "file": "src/mocks/workspaces.mocks.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Function to seed data into the mocking server</p>\n",
                "args": [
                    {
                        "name": "server",
                        "type": "Server",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 185,
                            "end": 191,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "server"
                        },
                        "type": "Server",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 179,
                            "end": 184,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 79,
                            "escapedText": "param"
                        },
                        "comment": "<p>Miragejs server</p>\n"
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/_main/interfaces/color.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 146
            },
            {
                "name": "EndOfLinePreference",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "monaco.editor.EndOfLinePreference",
                "file": "src/app/_main/classes/monaco-extended.class.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Filter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "FilterCheckbox<any>",
                "file": "src/app/_main/interfaces/filters.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "FilterType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/_main/interfaces/filters.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            },
            {
                "name": "MonacoEditor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "monaco.editor.IStandaloneCodeEditor",
                "file": "src/app/_main/classes/monaco-extended.class.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Range",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "monaco.IRange",
                "file": "src/app/_main/classes/monaco-extended.class.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Schedule",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SinglePersonSchedule[]",
                "file": "src/app/tasks/interfaces/schedule.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 182
            },
            {
                "name": "Selection",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "monaco.Selection",
                "file": "src/app/_main/classes/monaco-extended.class.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "AlertDialogVariant",
                "childs": [
                    {
                        "name": "DEFAULT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    },
                    {
                        "name": "IMPORTANT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "important"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Type of the dialog variant. Used to specify what dialog styling should be used.</p>\n",
                "file": "src/app/_main/dialogs/alert/alert.dialog.ts"
            },
            {
                "name": "ControlType",
                "childs": [
                    {
                        "name": "SELECT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "select"
                    },
                    {
                        "name": "TEXT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    },
                    {
                        "name": "BOOLEAN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "boolean"
                    },
                    {
                        "name": "OBJECT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "object"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/stories/helpers/control-type.helper.ts"
            },
            {
                "name": "DialogOutlet",
                "childs": [
                    {
                        "name": "CONTENT_RIGHT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CONTENT_RIGHT"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/_main/services/dialog.service.ts"
            },
            {
                "name": "RegisterStage",
                "childs": [
                    {
                        "name": "IMPORTANT_DATA",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "PERSONAL_DATA",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/auth/pages/register/register.page.ts"
            },
            {
                "name": "SubTaskType",
                "childs": [
                    {
                        "name": "SUBTASK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 4
                    },
                    {
                        "name": "ISSUE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/tasks/enums/task-type.enum.ts"
            },
            {
                "name": "TaskDialogVariant",
                "childs": [
                    {
                        "name": "CREATE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "create"
                    },
                    {
                        "name": "EDIT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "edit"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/tasks/dialogs/task/task.dialog.ts"
            },
            {
                "name": "TaskPriority",
                "childs": [
                    {
                        "name": "HIGHEST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "highest"
                    },
                    {
                        "name": "HIGH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "high"
                    },
                    {
                        "name": "MEDIUM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    },
                    {
                        "name": "LOW",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "low"
                    },
                    {
                        "name": "LOWEST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lowest"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/tasks/enums/task-priority.enum.ts"
            },
            {
                "name": "TaskType",
                "childs": [
                    {
                        "name": "TASK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 0
                    },
                    {
                        "name": "USER_STORY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "ISSUE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 2
                    },
                    {
                        "name": "EPIC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 3
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/tasks/enums/task-type.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/_main/components/card/card.stories.ts": [
                {
                    "name": "$Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/card/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-card',\n  template: `\n    <app-card>\n      <div class=\"card-title\">\n        Sample card\n      </div>\n      <div class=\"card-content\">\n        Little bit of content\n      </div>\n    </app-card>\n  `,\n})"
                },
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/card/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-card',\n  description: `Cards also have an actions section where buttons can be placed`,\n  template: `\n    <app-card>\n      <div class=\"card-title\">\n        Sample card\n      </div>\n      <div class=\"card-content\">\n        Little bit of content\n      </div>\n      <div class=\"card-content\">\n        <app-button>Action</app-button>\n      </div>\n    </app-card>\n  `,\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/card/card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/_main/components/checkbox/checkbox.stories.ts": [
                {
                    "name": "$Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-checkbox',\n  template: `<app-checkbox>Sample checkbox</app-checkbox>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/_main/components/input/input.stories.ts": [
                {
                    "name": "$Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-input',\n  template: `<app-input></app-input>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/_main/components/input-date-time/input-date-time.stories.ts": [
                {
                    "name": "$Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/input-date-time/input-date-time.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-input-date-time',\n  template: `<app-input-date-time></app-input-date-time>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/input-date-time/input-date-time.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputDateTimeComponent>",
                    "defaultValue": "(args: InputDateTimeComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/app/_main/components/textarea/textarea.stories.ts": [
                {
                    "name": "$Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-textarea',\n  template: `<app-textarea></app-textarea>`,\n  props: {\n    formControl: new FormControl(),\n  },\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/textarea/textarea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TextareaComponent>",
                    "defaultValue": "(args: TextareaComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/helpers/component-content-decorator.helper.ts": [
                {
                    "name": "componentContentDecorator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/component-content-decorator.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(content: string) => {\n  return componentWrapperDecorator((story) => {\n    return setContent(story, content);\n  });\n}"
                },
                {
                    "name": "exposeAllPossibilities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/component-content-decorator.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<C = any>(\n  story: Story<C>,\n  selector: string,\n  input: string,\n  values: string[],\n) => {\n  const inputRegex = new RegExp(`( |)\\\\[${input}\\\\]=\"${input}\"`, 'g');\n\n  const addInputToTemplate = (template: string, value: string) => {\n    let valueCapital = value[0].toUpperCase() + value.substring(1);\n    return template.replace('><', ` ${input}=\"${value}\">${valueCapital}<`);\n  };\n\n  const wrapWithWithDiv = (template: string) => {\n    const style = 'display:flex;gap:1rem;';\n    return `<div style=\"${style}\">${template}</div>`;\n  };\n\n  story.decorators = [\n    componentWrapperDecorator((story) => {\n      const baseTemplate = story.replace(inputRegex, '');\n      const inputsArray = values.map((v) => addInputToTemplate(baseTemplate, v));\n      const template = inputsArray.join('');\n\n      console.log(wrapWithWithDiv(template));\n\n      return wrapWithWithDiv(template);\n    }),\n  ];\n\n  story.argTypes = {\n    [input]: {\n      table: {\n        disable: true,\n      },\n    },\n  } as any as Partial<ArgTypes<C>>;\n\n  const emptyTemplate = `<${selector}></${selector}>`;\n  const snippet = values.map((v) => addInputToTemplate(emptyTemplate, v)).join('\\n');\n\n  story.parameters = {\n    docs: {\n      source: {\n        code: snippet,\n        language: 'html',\n        type: 'auto',\n      },\n    },\n  };\n\n  return story;\n}"
                },
                {
                    "name": "setContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/component-content-decorator.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(template: string, content: string) => {\n  return template.replace(/(?<=(<[^/]*))>.?<(?=\\/)/g, `>${content}<`);\n}"
                }
            ],
            "src/tests/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tests/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('../', true, /\\.spec\\.ts$/)",
                    "rawdescription": "Context for searching for tests",
                    "description": "<p>Context for searching for tests</p>\n"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tests/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "rawdescription": "Context builder form karma tests",
                    "description": "<p>Context builder form karma tests</p>\n"
                }
            ],
            "src/app/_main/components/textarea/textarea.theme.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/textarea/textarea.theme.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "monaco.editor.defineTheme('dark', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [],\n  colors: {\n    'editor.background': '#364053',\n  },\n})"
                }
            ],
            "src/app/_main/components/button/button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  code: `<app-button>Button</app-button>`,\n})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  code: `<app-button [icon]=\"faAdd\"></app-button>`,\n  description: `You can set \\`icon\\` property to add icon before text in buttons. This option supports prefixes like: \\`mat\\` |\n  \\`fas\\` | \\`fab\\` | \\`cu\\`.`,\n  props: {\n    icon: faAdd,\n  },\n})"
                },
                {
                    "name": "Pending",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  description: `To make the button show with loader you need to pass \\`pending\\` property with value: \\`true\\`.`,\n  code: `<app-button [pending]=\"true\">Button</app-button>`,\n  props: {\n    pending: true,\n  },\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
                },
                {
                    "name": "Type",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  code: `<app-button type=\"button\"></app-button>`,\n  description: `If button is nested in a form, the default behavior is making this button a \\`submit\\` button. To\n  omit this it is needed to set \\`type\\` to \\`button\\`.`,\n  props: {\n    type: 'button',\n  },\n})"
                },
                {
                    "name": "Variant",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "story(Template.bind({}), {\n  selector: 'app-button',\n  multiple: {\n    prop: 'variant',\n    options: ['primary', 'secondary', 'important'],\n  },\n  description: `To customize the general appearance you need to use the \\`variant\\` property with one of the specified values.\n    If you will not specify variant, the button will appear with \\`secondary\\` styling.`,\n})"
                }
            ],
            "src/stories/helpers/arg-type.helper.ts": [
                {
                    "name": "DOCS_CONTROL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(controlType: ControlType) => ({\n  control: {\n    type: controlType,\n  },\n})"
                },
                {
                    "name": "DOCS_GETTER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(description: string) => ({\n  control: {\n    type: false,\n  },\n  table: {\n    category: 'getters',\n  },\n  description,\n})"
                },
                {
                    "name": "DOCS_ICON_SELECT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  control: {\n    type: 'select',\n  },\n  options: Object.keys(icons),\n  mapping: icons,\n}"
                },
                {
                    "name": "DOCS_PRESET_CONTROL_ACCESSOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  required: {\n    control: { type: false },\n    table: { category: 'getters', type: { summary: 'boolean' } },\n    description: `Property to describe if the control is required in a form (contains \\`requiredValidator()\\`)`,\n    type: { name: 'boolean' },\n  },\n  control: {\n    control: { type: false },\n    table: { category: 'getters', type: { summary: 'FormControl' } },\n    description: `Control attached to this control accessor`,\n    type: { name: 'FormControl' },\n  },\n  formControl: {\n    control: { type: false },\n    table: { type: { summary: 'FormControl' } },\n    description: `Control to attach to this control accessor (\\`formControlName\\` can also be used instead)`,\n    type: { name: 'FormControl' },\n  },\n  formControlName: {\n    control: { type: false },\n    table: { type: { summary: 'string' } },\n    description: `Control to attach to this control accessor - require to be nested in \\`formGroup\\` (\\`formControl\\` can also be used instead)`,\n    type: { name: 'string' },\n  },\n}"
                },
                {
                    "name": "DOCS_SELECT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  control: {\n    type: 'select',\n  },\n}"
                },
                {
                    "name": "fasPenToSquare",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "faPenToSquare"
                },
                {
                    "name": "fasQuestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "faQuestion"
                },
                {
                    "name": "fasTrashArrowUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "faTrashArrowUp"
                },
                {
                    "name": "icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/arg-type.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{ fasQuestion, fasPenToSquare, fasTrashArrowUp }"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiURL: '/api',\n  disableConsoleLog: true,\n  version: app.version,\n}",
                    "rawdescription": "Variant of global environment file for production.",
                    "description": "<p>Variant of global environment file for production.</p>\n"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  /**\n   * Whether the application is running in production mode.\n   */\n  production: false,\n\n  /**\n   * API URL for the backend.\n   */\n  apiURL: '/api',\n\n  /**\n   * Whether to disable console logging.\n   */\n  disableConsoleLog: false,\n\n  /**\n   * App version\n   */\n  version: app.version,\n}",
                    "rawdescription": "Global environment configuration object, replaced in configurations other than development. Stores build specific data.",
                    "description": "<p>Global environment configuration object, replaced in configurations other than development. Stores build specific data.</p>\n"
                }
            ],
            "src/app/_main/components/textarea/markdown.example.ts": [
                {
                    "name": "markdownExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/components/textarea/markdown.example.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n---\n__Advertisement :)__\n\n- __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image\n  resize in browser.\n- __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly\n  i18n with plurals support and easy syntax.\n\nYou will like those projects!\n\n---\n\n# h1 Heading 8-)\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\n\n## Horizontal Rules\n\n___\n\n---\n\n***\n\n\n## Typographic replacements\n\nEnable typographer option to see result.\n\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\n\ntest.. test... test..... test?..... test!....\n\n!!!!!! ???? ,,  -- ---\n\n\"Smartypants, double quotes\" and 'single quotes'\n\n\n## Emphasis\n\n**This is bold text**\n\n__This is bold text__\n\n*This is italic text*\n\n_This is italic text_\n\n~~Strikethrough~~\n\n\n## Blockquotes\n\n\n> Blockquotes can also be nested...\n>> ...by using additional greater-than signs right next to each other...\n> > > ...or with spaces between arrows.\n\n\n## Lists\n\nUnordered\n\n+ Create a list by starting a line with \\`+\\`, \\`-\\`, or \\`*\\`\n+ Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    * Ac tristique libero volutpat at\n    + Facilisis in pretium nisl aliquet\n    - Nulla volutpat aliquam velit\n+ Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n\n1. You can use sequential numbers...\n1. ...or keep all the numbers as \\`1.\\`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n\n## Code\n\nInline \\`code\\`\n\nIndented code\n\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\n\nBlock code \"fences\"\n\n\\`\\`\\`\nSample text here...\n\\`\\`\\`\n\nSyntax highlighting\n\n\\`\\`\\` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n\\`\\`\\`\n\n## Tables\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nRight aligned columns\n\n| Option | Description |\n| ------:| -----------:|\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\n\n## Links\n\n[link text](http://dev.nodeca.com)\n\n[link with title](http://nodeca.github.io/pica/demo/ \"title text!\")\n\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\n\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\nLike links, Images also have a footnote style syntax\n\n![Alt text][id]\n\nWith a reference later in the document defining the URL location:\n\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n\n## Plugins\n\nThe killer feature of \\`markdown-it\\` is very effective support of\n[syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).\n\n\n### [Emojies](https://github.com/markdown-it/markdown-it-emoji)\n\n> Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\n>\n> Shortcuts (emoticons): :-) :-( 8-) ;)\n\nsee [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.\n\n\n### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)\n\n- 19^th^\n- H~2~O\n\n\n### [\\<ins>](https://github.com/markdown-it/markdown-it-ins)\n\n++Inserted text++\n\n\n### [\\<mark>](https://github.com/markdown-it/markdown-it-mark)\n\n==Marked text==\n\n\n### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)\n\nFootnote 1 link[^first].\n\nFootnote 2 link[^second].\n\nInline footnote^[Text of inline footnote] definition.\n\nDuplicated footnote reference[^second].\n\n[^first]: Footnote **can have markup**\n\n    and multiple paragraphs.\n\n[^second]: Footnote text.\n\n\n### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)\n\nTerm 1\n\n:   Definition 1\nwith lazy continuation.\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n\n_Compact style:_\n\nTerm 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n\n\n### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)\n\nThis is HTML abbreviation example.\n\nIt converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.\n\n*[HTML]: Hyper Text Markup Language\n\n### [Custom containers](https://github.com/markdown-it/markdown-it-container)\n\n::: warning\n*here be dragons*\n:::\n\n`"
                }
            ],
            "src/tests/helpers/mat-dialog-testing-provider.helper.ts": [
                {
                    "name": "MatDialogTestingProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tests/helpers/mat-dialog-testing-provider.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  MatDialogModule,\n  { provide: MAT_DIALOG_DATA, useValue: {} },\n  { provide: MatDialogRef, useValue: {} },\n]"
                }
            ],
            "src/app/_main/_main.module.ts": [
                {
                    "name": "ngModuleConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/_main/_main.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  imports: [\n    /*=============================================\n    =             Local dependencies              =\n    =============================================*/\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RouterModule,\n    ObserversModule,\n  ],\n  importExports: [\n    /*=============================================\n      =                Dependencies                 =\n      =============================================*/\n    DragDropModule,\n    PlatformModule,\n    OverlayModule,\n\n    /*=============================================\n      =              Material modules               =\n      =============================================*/\n    MatDialogModule,\n    MatIconModule,\n    MatMenuModule,\n    MatTableModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatTooltipModule,\n    MatTabsModule,\n    MatProgressSpinnerModule,\n    MatSelectModule,\n\n    /*=============================================\n      =              External modules               =\n      =============================================*/\n    FontAwesomeModule,\n  ],\n  declarations: [\n    /*=============================================\n    =         Local custom components             =\n    =============================================*/\n  ],\n  exportDeclarations: [\n    /*=============================================\n    =         Exported custom components          =\n    =============================================*/\n    InputComponent,\n    ButtonComponent,\n    ValidationErrorPipe,\n    AlertDialog,\n    IconComponent,\n    FocusInitialDirective,\n    SidebarNavigationComponent,\n    NavElementComponent,\n    NavElementWorkspaceComponent,\n    UpperNavigationComponent,\n    SelectComponent,\n    OptionComponent,\n    MainViewComponent,\n    TextareaComponent,\n    CheckboxComponent,\n    CardComponent,\n    ClickStopPropagationDirective,\n    InputDateTimeComponent,\n    LetDirective,\n    FiltersComponent,\n    SnackbarComponent,\n    SnackbarOutletComponent,\n    MockPage,\n    DialogOutletComponent,\n    ViewContainerDirective,\n  ],\n  providers: [\n    DialogService,\n    ApiService,\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n    MatCheckboxModule,\n    MatDatepickerModule,\n  ],\n}",
                    "rawdescription": "Main module configuration object",
                    "description": "<p>Main module configuration object</p>\n"
                }
            ],
            "src/mocks/helpers/response.mock.helper.ts": [
                {
                    "name": "NO_CONTENT_PROVIDED",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/helpers/response.mock.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  status: 400,\n  body: {\n    message: 'No data provided',\n  },\n}",
                    "rawdescription": "Object to mock no content provided response. Mainly used when request checks\nfor data in body, but nothing is provided.",
                    "description": "<p>Object to mock no content provided response. Mainly used when request checks\nfor data in body, but nothing is provided.</p>\n"
                },
                {
                    "name": "SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/mocks/helpers/response.mock.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  status: 200,\n  body: {\n    message: 'Success',\n  },\n}",
                    "rawdescription": "Object to mock success response. Used often to notify app that request was\nsuccessful.",
                    "description": "<p>Object to mock success response. Used often to notify app that request was\nsuccessful.</p>\n"
                }
            ],
            "src/stories/helpers/story.helper.ts": [
                {
                    "name": "story",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/helpers/story.helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<C = any>(story: Story<C>, config: StoryConfig<C>) => {\n  if (config.multiple) {\n    exposeAllPossibilities(story, config.selector, config.multiple.prop, config.multiple.options);\n  }\n\n  const descriptionObject = config.description\n    ? {\n        parameters: {\n          docs: {\n            description: {\n              story: config.description,\n            },\n          },\n        },\n      }\n    : {};\n\n  const propsObject = config.props\n    ? {\n        args: config.props,\n      }\n    : {};\n\n  const codeObject = config.code\n    ? {\n        parameters: {\n          docs: {\n            source: {\n              code: config.code,\n              language: 'html',\n              type: 'auto',\n            },\n          },\n        },\n      }\n    : {};\n\n  const templateObject = config.template\n    ? {\n        decorators: [componentWrapperDecorator(() => config.template!)],\n        parameters: {\n          docs: {\n            source: {\n              code: config.template,\n              language: 'html',\n              type: 'auto',\n            },\n          },\n        },\n      }\n    : {};\n\n  return merge(story, descriptionObject, propsObject, codeObject, templateObject);\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/_main/operators/apply-filters.operator.ts": [
                {
                    "name": "applyFilters",
                    "file": "src/app/_main/operators/apply-filters.operator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/_main/operators/catch-response.operator.ts": [
                {
                    "name": "catchResponse",
                    "file": "src/app/_main/operators/catch-response.operator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/_main/decorators/debug.decorator.ts": [
                {
                    "name": "Debug",
                    "file": "src/app/_main/decorators/debug.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": true,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/_main/validators/email.validator.ts": [
                {
                    "name": "emailValidator",
                    "file": "src/app/_main/validators/email.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Validator to check if email is valid</p>\n",
                    "args": [],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 188,
                                "end": 195,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "src/tests/helpers/validator-testing.helper.ts": [
                {
                    "name": "expectToFail",
                    "file": "src/tests/helpers/validator-testing.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expectToPass",
                    "file": "src/tests/helpers/validator-testing.helper.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/mocks/_main.mocks.ts": [
                {
                    "name": "initMocks",
                    "file": "src/mocks/_main.mocks.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Function to initialize mocking server with all routes</p>\n",
                    "args": []
                }
            ],
            "src/mocks/_main.mocks.prod.ts": [
                {
                    "name": "initMocks",
                    "file": "src/mocks/_main.mocks.prod.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Production version of mocking initializer</p>\n<p>This file need to be in file replacements in angular.json</p>\n<div><pre class=\"line-numbers\"><code class=\"language-json\">{\n &quot;replace&quot;: &quot;src/mocks/_main.mocks.ts&quot;,\n &quot;with&quot;: &quot;src/mocks/_main.mocks.prod.ts&quot;\n}</code></pre></div>",
                    "args": []
                }
            ],
            "src/app/_main/validators/max-length.validator.ts": [
                {
                    "name": "maxLengthValidator",
                    "file": "src/app/_main/validators/max-length.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Validator to check if the length is not greater than specyfic number</p>\n",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 220,
                                "end": 227,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "src/app/_main/decorators/page.decorator.ts": [
                {
                    "name": "Page",
                    "file": "src/app/_main/decorators/page.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Decorator to mark component or directive as a page.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-typescript\">(&#64;)Page()\n(&#64;)Component({\n  selector: &#39;app-example-page&#39;,\n  templateUrl: &#39;./example.page.html&#39;,\n  styleUrls: [&#39;./example.page.scss&#39;],\n})\nexport class CreateWorkspacePage { ... }</code></pre></div>",
                    "args": []
                }
            ],
            "src/app/_main/validators/password.validator.ts": [
                {
                    "name": "passwordValidator",
                    "file": "src/app/_main/validators/password.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Validator to check if password is valid</p>\n",
                    "args": [],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 191,
                                "end": 198,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "src/app/_main/validators/required.validator.ts": [
                {
                    "name": "requiredValidator",
                    "file": "src/app/_main/validators/required.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Validator to check if value was provided</p>\n",
                    "args": [],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 192,
                                "end": 199,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "src/app/_main/validators/same-as.validator.ts": [
                {
                    "name": "sameAsValidator",
                    "file": "src/app/_main/validators/same-as.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Validator to check if password is valid</p>\n",
                    "args": [
                        {
                            "name": "compareWith",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "compareWith",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 191,
                                "end": 198,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": ""
                        }
                    ]
                }
            ],
            "src/app/_main/decorators/service.decorator.ts": [
                {
                    "name": "Service",
                    "file": "src/app/_main/decorators/service.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Decorator to mark class as a service and store theirs instances in global variable.</p>\n",
                    "args": []
                }
            ],
            "src/app/_main/decorators/service-validator.decorator.ts": [
                {
                    "name": "ServiceValidator",
                    "file": "src/app/_main/decorators/service-validator.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "errorValidationTree",
                            "type": "ErrorValidationTree",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorValidationTree",
                            "type": "ErrorValidationTree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/mocks/workspaces.mocks.ts": [
                {
                    "name": "workspacesMock",
                    "file": "src/mocks/workspaces.mocks.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Function to create mocking routes for workspaces.</p>\n",
                    "args": [
                        {
                            "name": "server",
                            "type": "Server",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 452,
                                "end": 458,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "server"
                            },
                            "type": "Server",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 446,
                                "end": 451,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Miragejs server</p>\n"
                        }
                    ]
                },
                {
                    "name": "workspacesSeed",
                    "file": "src/mocks/workspaces.mocks.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Function to seed data into the mocking server</p>\n",
                    "args": [
                        {
                            "name": "server",
                            "type": "Server",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 185,
                                "end": 191,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "server"
                            },
                            "type": "Server",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 179,
                                "end": 184,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Miragejs server</p>\n"
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/_main/dialogs/alert/alert.dialog.ts": [
                {
                    "name": "AlertDialogVariant",
                    "childs": [
                        {
                            "name": "DEFAULT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        },
                        {
                            "name": "IMPORTANT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "important"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Type of the dialog variant. Used to specify what dialog styling should be used.</p>\n",
                    "file": "src/app/_main/dialogs/alert/alert.dialog.ts"
                }
            ],
            "src/stories/helpers/control-type.helper.ts": [
                {
                    "name": "ControlType",
                    "childs": [
                        {
                            "name": "SELECT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "select"
                        },
                        {
                            "name": "TEXT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        },
                        {
                            "name": "BOOLEAN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "boolean"
                        },
                        {
                            "name": "OBJECT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "object"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/stories/helpers/control-type.helper.ts"
                }
            ],
            "src/app/_main/services/dialog.service.ts": [
                {
                    "name": "DialogOutlet",
                    "childs": [
                        {
                            "name": "CONTENT_RIGHT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CONTENT_RIGHT"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/_main/services/dialog.service.ts"
                }
            ],
            "src/app/auth/pages/register/register.page.ts": [
                {
                    "name": "RegisterStage",
                    "childs": [
                        {
                            "name": "IMPORTANT_DATA",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "PERSONAL_DATA",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/auth/pages/register/register.page.ts"
                }
            ],
            "src/app/tasks/enums/task-type.enum.ts": [
                {
                    "name": "SubTaskType",
                    "childs": [
                        {
                            "name": "SUBTASK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 4
                        },
                        {
                            "name": "ISSUE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/tasks/enums/task-type.enum.ts"
                },
                {
                    "name": "TaskType",
                    "childs": [
                        {
                            "name": "TASK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 0
                        },
                        {
                            "name": "USER_STORY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "ISSUE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 2
                        },
                        {
                            "name": "EPIC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 3
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/tasks/enums/task-type.enum.ts"
                }
            ],
            "src/app/tasks/dialogs/task/task.dialog.ts": [
                {
                    "name": "TaskDialogVariant",
                    "childs": [
                        {
                            "name": "CREATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "create"
                        },
                        {
                            "name": "EDIT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "edit"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/tasks/dialogs/task/task.dialog.ts"
                }
            ],
            "src/app/tasks/enums/task-priority.enum.ts": [
                {
                    "name": "TaskPriority",
                    "childs": [
                        {
                            "name": "HIGHEST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "highest"
                        },
                        {
                            "name": "HIGH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "high"
                        },
                        {
                            "name": "MEDIUM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        },
                        {
                            "name": "LOW",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "low"
                        },
                        {
                            "name": "LOWEST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lowest"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/tasks/enums/task-priority.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/_main/interfaces/color.interface.ts": [
                {
                    "name": "color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/_main/interfaces/color.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 146
                }
            ],
            "src/app/_main/classes/monaco-extended.class.ts": [
                {
                    "name": "EndOfLinePreference",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "monaco.editor.EndOfLinePreference",
                    "file": "src/app/_main/classes/monaco-extended.class.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "MonacoEditor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "monaco.editor.IStandaloneCodeEditor",
                    "file": "src/app/_main/classes/monaco-extended.class.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "Range",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "monaco.IRange",
                    "file": "src/app/_main/classes/monaco-extended.class.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "Selection",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "monaco.Selection",
                    "file": "src/app/_main/classes/monaco-extended.class.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "src/app/_main/interfaces/filters.interface.ts": [
                {
                    "name": "Filter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "FilterCheckbox<any>",
                    "file": "src/app/_main/interfaces/filters.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "FilterType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/_main/interfaces/filters.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                }
            ],
            "src/app/tasks/interfaces/schedule.interface.ts": [
                {
                    "name": "Schedule",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SinglePersonSchedule[]",
                    "file": "src/app/tasks/interfaces/schedule.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 182
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app.routing.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "auth",
                        "loadChildren": "./auth/auth.module#AuthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/auth/auth.routing.ts",
                                        "module": "AuthRoutingModule",
                                        "children": [
                                            {
                                                "path": "login",
                                                "component": "LoginPage"
                                            },
                                            {
                                                "path": "logout",
                                                "component": "LoginPage"
                                            },
                                            {
                                                "path": "register",
                                                "component": "RegisterPage"
                                            },
                                            {
                                                "path": "password-reset",
                                                "component": "ForgotPasswordPage"
                                            },
                                            {
                                                "path": "set-new-password",
                                                "component": "ChangePasswordPage"
                                            },
                                            {
                                                "path": "restore-account",
                                                "component": "RestoreAccountPage"
                                            },
                                            {
                                                "path": "delete-account",
                                                "component": "DeleteAccountPage"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AuthModule"
                            }
                        ]
                    },
                    {
                        "path": "landing-page",
                        "component": "LandingPageComponent"
                    },
                    {
                        "path": "",
                        "component": "MainViewComponent",
                        "canActivate": [
                            "LoggedInUsersGuard"
                        ],
                        "children": [
                            {
                                "path": "email",
                                "loadChildren": "./emails/emails.module#EmailsModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/emails/emails.routing.ts",
                                                "module": "EmailsRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "pathMatch": "full",
                                                        "component": "MockPage",
                                                        "data": {
                                                            "image": "assets/mocks/inbox.svg"
                                                        }
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "EmailsModule"
                                    }
                                ]
                            },
                            {
                                "path": "messages",
                                "loadChildren": "./messages/messages.module#MessagesModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/messages/messages.routing.ts",
                                                "module": "MessagesRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "pathMatch": "full",
                                                        "component": "MockPage",
                                                        "data": {
                                                            "image": "assets/mocks/messages.svg"
                                                        }
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "MessagesModule"
                                    }
                                ]
                            },
                            {
                                "path": "",
                                "loadChildren": "./dashboard/dashboard.module#DashboardModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/dashboard/dashboard.routing.ts",
                                                "module": "DashboardRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "pathMatch": "full",
                                                        "component": "WorkspacesListPage"
                                                    },
                                                    {
                                                        "path": "settings",
                                                        "loadChildren": "../settings/settings.module#SettingsModule",
                                                        "children": [
                                                            {
                                                                "kind": "module",
                                                                "children": [
                                                                    {
                                                                        "name": "routes",
                                                                        "filename": "src/app/settings/settings.routing.ts",
                                                                        "module": "SettingsRoutingModule",
                                                                        "children": [
                                                                            {
                                                                                "path": "",
                                                                                "component": "SettingsPage",
                                                                                "children": [
                                                                                    {
                                                                                        "path": "account",
                                                                                        "component": "SettingsAccountPage"
                                                                                    },
                                                                                    {
                                                                                        "path": "localization",
                                                                                        "component": "SettingsLocalizationPage"
                                                                                    },
                                                                                    {
                                                                                        "path": "integrations",
                                                                                        "component": "SettingsIntegrationsPage"
                                                                                    },
                                                                                    {
                                                                                        "path": "sessions",
                                                                                        "component": "SettingsSessionsPage"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ],
                                                                        "kind": "module"
                                                                    }
                                                                ],
                                                                "module": "SettingsModule"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "path": "github",
                                                        "component": "GithubIntegrationPage",
                                                        "data": {
                                                            "hideNavigation": true
                                                        }
                                                    },
                                                    {
                                                        "path": "dashboard",
                                                        "component": "MockPage",
                                                        "data": {
                                                            "image": "assets/mocks/dashboard.svg"
                                                        }
                                                    },
                                                    {
                                                        "path": "create",
                                                        "component": "CreateWorkspacePage"
                                                    },
                                                    {
                                                        "path": ":workspaceId",
                                                        "children": [
                                                            {
                                                                "path": "edit",
                                                                "component": "EditWorkspacePage"
                                                            },
                                                            {
                                                                "path": "",
                                                                "pathMatch": "full",
                                                                "component": "ProjectsListPage"
                                                            },
                                                            {
                                                                "path": "create",
                                                                "redirectTo": "create/general"
                                                            },
                                                            {
                                                                "path": "create/general",
                                                                "component": "CreateProjectPage"
                                                            },
                                                            {
                                                                "path": "create/members",
                                                                "component": "CreateProjectMembersPage"
                                                            },
                                                            {
                                                                "path": ":projectId/edit",
                                                                "redirectTo": ":projectId/edit/general"
                                                            },
                                                            {
                                                                "path": ":projectId/edit/general",
                                                                "component": "EditProjectPage"
                                                            },
                                                            {
                                                                "path": ":projectId/edit/members",
                                                                "component": "EditProjectMembersPage"
                                                            },
                                                            {
                                                                "path": ":projectId",
                                                                "loadChildren": "../tasks/tasks.module#TasksModule",
                                                                "children": [
                                                                    {
                                                                        "kind": "module",
                                                                        "children": [
                                                                            {
                                                                                "name": "routes",
                                                                                "filename": "src/app/tasks/tasks.routing.ts",
                                                                                "module": "TasksRoutingModule",
                                                                                "children": [
                                                                                    {
                                                                                        "path": "",
                                                                                        "pathMatch": "full",
                                                                                        "redirectTo": "board"
                                                                                    },
                                                                                    {
                                                                                        "path": "board",
                                                                                        "component": "BoardPage"
                                                                                    },
                                                                                    {
                                                                                        "path": "list",
                                                                                        "component": "TaskListPage"
                                                                                    },
                                                                                    {
                                                                                        "path": "schedule",
                                                                                        "component": "SchedulePage"
                                                                                    },
                                                                                    {
                                                                                        "path": "calendar",
                                                                                        "component": "MockPage",
                                                                                        "data": {
                                                                                            "image": "assets/mocks/calendar.svg"
                                                                                        }
                                                                                    }
                                                                                ],
                                                                                "kind": "module"
                                                                            }
                                                                        ],
                                                                        "module": "TasksModule"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "DashboardModule"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 27,
        "status": "medium",
        "files": [
            {
                "filePath": "src/app/_main/_main.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ngModuleConfig",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/classes/control-accessor.class.ts",
                "type": "component",
                "linktype": "component",
                "name": "ControlAccessor",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/classes/dialog-ref.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogRef",
                "coveragePercent": 62,
                "coverageCount": "10/16",
                "status": "good"
            },
            {
                "filePath": "src/app/_main/classes/e-set.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ESet",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/classes/enum.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Enum",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/classes/filters.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Filters",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/classes/monaco-extended.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MonacoExtended",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/classes/persistent-map.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PersistentMap",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/classes/persistent-map.class.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PersistentMapOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/classes/random.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Random",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/classes/utils.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Utils",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pending",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Type",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/card/card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/dialog-outlet/dialog-outlet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogOutletComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/filters/filters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FiltersComponent",
                "coveragePercent": 38,
                "coverageCount": "5/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/_main/components/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/components/input-date-time/input-date-time.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputDateTimeComponent",
                "coveragePercent": 28,
                "coverageCount": "4/14",
                "status": "medium"
            },
            {
                "filePath": "src/app/_main/components/input-date-time/input-date-time.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/input-date-time/input-date-time.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 61,
                "coverageCount": "11/18",
                "status": "good"
            },
            {
                "filePath": "src/app/_main/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/main-view/main-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/nav-element-workspace/nav-element-workspace.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavElementWorkspaceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/nav-element/nav-element.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavElementComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/option/option.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 37,
                "coverageCount": "6/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/_main/components/sidebar-navigation/sidebar-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/snackbar-outlet/snackbar-outlet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackbarOutletComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/snackbar/snackbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/snackbar/snackbar.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnackbarData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/textarea/markdown.example.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "markdownExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 25,
                "coverageCount": "10/39",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/textarea/textarea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/textarea/textarea.theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/components/upper-navigation/upper-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpperNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/decorators/debug.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Debug",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/decorators/page.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Page",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/decorators/service-validator.decorator.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorValidationTree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/decorators/service-validator.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ServiceValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/decorators/service.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Service",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/dialogs/alert/alert.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertDialog",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/dialogs/alert/alert.dialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlertDialogData",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/directives/click-stop-propagation.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickStopPropagationDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/directives/focus-initial.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FocusInitialDirective",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/directives/let.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LetDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/directives/let.directive.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LetContext",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/directives/view-container.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ViewContainerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/interfaces/filters.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterCheckbox",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/interfaces/request-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestOptions",
                "coveragePercent": 100,
                "coverageCount": "9/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/interfaces/validation-error.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationError",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/operators/apply-filters.operator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "applyFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/operators/catch-response.operator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "catchResponse",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/pages/mock/mock.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "MockPage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/pipes/validation-error.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ValidationErrorPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/services/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 100,
                "coverageCount": "9/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 38,
                "coverageCount": "5/13",
                "status": "medium"
            },
            {
                "filePath": "src/app/_main/services/router-extensions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RouterExtensionsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/services/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/_main/validators/email.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "emailValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/validators/max-length.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "maxLengthValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/validators/password.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "passwordValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/validators/required.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "requiredValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/_main/validators/same-as.validator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sameAsValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/auth/guard/logged-in-users.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoggedInUsersGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/interfaces/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModifyUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/interfaces/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/interfaces/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/interfaces/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserWithPrivileges",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/pages/change-password/change-password.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChangePasswordPage",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/pages/delete-account/delete-account.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteAccountPage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/pages/forgot-password/forgot-password.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordPage",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/pages/login/login.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPage",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/pages/register/register.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterPage",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/pages/restore-account/restore-account.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "RestoreAccountPage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/classes/user.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserUtils",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/components/integration-github/integration-github.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntegrationGithubComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/components/member-list/member-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/components/view-options/view-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dialogs/add-member/add-member.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMemberDialog",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dialogs/add-member/add-member.dialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddMemberDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/interfaces/git-integration.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GitAccount",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/interfaces/git-integration.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GitIntegration",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/interfaces/git-integration.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GitIssue",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/interfaces/git-integration.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GitPull",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/interfaces/git-integration.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GitRepository",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/interfaces/project-member.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectMember",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/interfaces/project.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Project",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/dashboard/interfaces/workspace.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Workspace",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "src/app/dashboard/pages/create-project-members/create-project-members.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateProjectMembersPage",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/dashboard/pages/create-project/create-project.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateProjectPage",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/dashboard/pages/create-workspace/create-workspace.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateWorkspacePage",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/dashboard/pages/edit-project-members/edit-project-members.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProjectMembersPage",
                "coveragePercent": 43,
                "coverageCount": "7/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/dashboard/pages/edit-project/edit-project.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditProjectPage",
                "coveragePercent": 50,
                "coverageCount": "7/14",
                "status": "medium"
            },
            {
                "filePath": "src/app/dashboard/pages/edit-workspace/edit-workspace.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditWorkspacePage",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "src/app/dashboard/pages/github-integration/github-integration.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "GithubIntegrationPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/pages/projects-list/projects-list.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsListPage",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/pages/workspaces-list/workspaces-list.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "WorkspacesListPage",
                "coveragePercent": 88,
                "coverageCount": "8/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/dashboard/services/git-integration.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GitIntegrationService",
                "coveragePercent": 22,
                "coverageCount": "4/18",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/services/member.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemberService",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/dashboard/services/project.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 75,
                "coverageCount": "6/8",
                "status": "good"
            },
            {
                "filePath": "src/app/dashboard/services/workspace.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/landing-page/landing-page/landing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/components/integration-entry/integration-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntegrationEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/components/list-group/list-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/interfaces/session.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserSession",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/pages/settings-account/settings-account.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsAccountPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/pages/settings-integrations/settings-integrations.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsIntegrationsPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/pages/settings-integrations/settings-integrations.page.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GitAccountWithUsage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/pages/settings-localization/settings-localization.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsLocalizationPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/pages/settings-sessions/settings-sessions.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsSessionsPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/pages/settings/settings.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsPage",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/services/sessions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/components/board-task/board-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/components/input-assignee/input-assignee.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputAssigneeComponent",
                "coveragePercent": 23,
                "coverageCount": "5/21",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/components/status-label/status-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusLabelComponent",
                "coveragePercent": 23,
                "coverageCount": "5/21",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/components/view-options/view-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewOptionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/dialogs/task/task.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskDialog",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/dialogs/task/task.dialog.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/interfaces/schedule.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SinglePersonSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/interfaces/status.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Status",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/tasks/interfaces/status.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StatusWithTasks",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/tasks/interfaces/task.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 100,
                "coverageCount": "14/14",
                "status": "very-good"
            },
            {
                "filePath": "src/app/tasks/interfaces/task.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskWithAdditionalData",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "src/app/tasks/pages/board/board.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardPage",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/pages/schedule/schedule.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchedulePage",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/pages/task-list/task-list.page.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListPage",
                "coveragePercent": 3,
                "coverageCount": "1/26",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/pipes/status-color.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "StatusColorPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/pipes/task-priority-icon.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TaskPriorityIconPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/pipes/task-priority.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TaskPriorityPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/pipes/task-type-icon.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TaskTypeIconPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/pipes/task-type.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TaskTypePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tasks/services/status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatusService",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/tasks/services/task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 85,
                "coverageCount": "12/14",
                "status": "very-good"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/mocks/_main.mocks.prod.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initMocks",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/mocks/_main.mocks.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initMocks",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/mocks/helpers/response.mock.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NO_CONTENT_PROVIDED",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/mocks/helpers/response.mock.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUCCESS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/mocks/workspaces.mocks.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "workspacesMock",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/mocks/workspaces.mocks.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "workspacesSeed",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCS_CONTROL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCS_GETTER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCS_ICON_SELECT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCS_PRESET_CONTROL_ACCESSOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DOCS_SELECT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fasPenToSquare",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fasQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fasTrashArrowUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/arg-type.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/component-content-decorator.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "componentContentDecorator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/component-content-decorator.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exposeAllPossibilities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/component-content-decorator.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/story.helper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StoryConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/helpers/story.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tests/helpers/mat-dialog-testing-provider.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MatDialogTestingProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tests/helpers/ng-control-testing-provider.helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TestNgControl",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/tests/helpers/validator-testing.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "expectToFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tests/helpers/validator-testing.helper.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "expectToPass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tests/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/tests/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/typings/typings.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}