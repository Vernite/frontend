import{IdleValue}from"./async.js";const intlFileNameCollatorBaseNumeric=new IdleValue((()=>{const collator=new Intl.Collator(void 0,{numeric:!0,sensitivity:"base"});return{collator,collatorIsNumeric:collator.resolvedOptions().numeric}})),intlFileNameCollatorNumeric=new IdleValue((()=>({collator:new Intl.Collator(void 0,{numeric:!0})}))),intlFileNameCollatorNumericCaseInsensitive=new IdleValue((()=>({collator:new Intl.Collator(void 0,{numeric:!0,sensitivity:"accent"})})));export function compareFileNames(one,other,caseSensitive=!1){const a=one||"",b=other||"",result=intlFileNameCollatorBaseNumeric.value.collator.compare(a,b);return intlFileNameCollatorBaseNumeric.value.collatorIsNumeric&&0===result&&a!==b?a<b?-1:1:result}export function compareAnything(one,other,lookFor){const elementAName=one.toLowerCase(),elementBName=other.toLowerCase(),prefixCompare=compareByPrefix(one,other,lookFor);if(prefixCompare)return prefixCompare;const elementASuffixMatch=elementAName.endsWith(lookFor);if(elementASuffixMatch!==elementBName.endsWith(lookFor))return elementASuffixMatch?-1:1;const r=compareFileNames(elementAName,elementBName);return 0!==r?r:elementAName.localeCompare(elementBName)}export function compareByPrefix(one,other,lookFor){const elementAName=one.toLowerCase(),elementBName=other.toLowerCase(),elementAPrefixMatch=elementAName.startsWith(lookFor),elementBPrefixMatch=elementBName.startsWith(lookFor);if(elementAPrefixMatch!==elementBPrefixMatch)return elementAPrefixMatch?-1:1;if(elementAPrefixMatch&&elementBPrefixMatch){if(elementAName.length<elementBName.length)return-1;if(elementAName.length>elementBName.length)return 1}return 0}