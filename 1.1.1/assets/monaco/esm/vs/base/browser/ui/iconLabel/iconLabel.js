import"./iconlabel.css";import*as dom from"../../dom.js";import{HighlightedLabel}from"../highlightedlabel/highlightedLabel.js";import{setupCustomHover,setupNativeHover}from"./iconLabelHover.js";import{Disposable}from"../../../common/lifecycle.js";import{equals}from"../../../common/objects.js";import{Range}from"../../../common/range.js";class FastLabelNode{constructor(_element){this._element=_element}get element(){return this._element}set textContent(content){this.disposed||content===this._textContent||(this._textContent=content,this._element.textContent=content)}set className(className){this.disposed||className===this._className||(this._className=className,this._element.className=className)}set empty(empty){this.disposed||empty===this._empty||(this._empty=empty,this._element.style.marginLeft=empty?"0":"")}dispose(){this.disposed=!0}}export class IconLabel extends Disposable{constructor(container,options){super(),this.customHovers=new Map,this.domNode=this._register(new FastLabelNode(dom.append(container,dom.$(".monaco-icon-label")))),this.labelContainer=dom.append(this.domNode.element,dom.$(".monaco-icon-label-container"));const nameContainer=dom.append(this.labelContainer,dom.$("span.monaco-icon-name-container"));this.descriptionContainer=this._register(new FastLabelNode(dom.append(this.labelContainer,dom.$("span.monaco-icon-description-container")))),(null==options?void 0:options.supportHighlights)||(null==options?void 0:options.supportIcons)?this.nameNode=new LabelWithHighlights(nameContainer,!!options.supportIcons):this.nameNode=new Label(nameContainer),(null==options?void 0:options.supportDescriptionHighlights)?this.descriptionNodeFactory=()=>new HighlightedLabel(dom.append(this.descriptionContainer.element,dom.$("span.label-description")),{supportIcons:!!options.supportIcons}):this.descriptionNodeFactory=()=>this._register(new FastLabelNode(dom.append(this.descriptionContainer.element,dom.$("span.label-description")))),this.hoverDelegate=null==options?void 0:options.hoverDelegate}get element(){return this.domNode.element}setLabel(label,description,options){const classes=["monaco-icon-label"];options&&(options.extraClasses&&classes.push(...options.extraClasses),options.italic&&classes.push("italic"),options.strikethrough&&classes.push("strikethrough")),this.domNode.className=classes.join(" "),this.setupHover((null==options?void 0:options.descriptionTitle)?this.labelContainer:this.element,null==options?void 0:options.title),this.nameNode.setLabel(label,options),(description||this.descriptionNode)&&(this.descriptionNode||(this.descriptionNode=this.descriptionNodeFactory()),this.descriptionNode instanceof HighlightedLabel?(this.descriptionNode.set(description||"",options?options.descriptionMatches:void 0),this.setupHover(this.descriptionNode.element,null==options?void 0:options.descriptionTitle)):(this.descriptionNode.textContent=description||"",this.setupHover(this.descriptionNode.element,(null==options?void 0:options.descriptionTitle)||""),this.descriptionNode.empty=!description))}setupHover(htmlElement,tooltip){const previousCustomHover=this.customHovers.get(htmlElement);if(previousCustomHover&&(previousCustomHover.dispose(),this.customHovers.delete(htmlElement)),tooltip)if(this.hoverDelegate){const hoverDisposable=setupCustomHover(this.hoverDelegate,htmlElement,tooltip);hoverDisposable&&this.customHovers.set(htmlElement,hoverDisposable)}else setupNativeHover(htmlElement,tooltip);else htmlElement.removeAttribute("title")}dispose(){super.dispose();for(const disposable of this.customHovers.values())disposable.dispose();this.customHovers.clear()}}class Label{constructor(container){this.container=container,this.label=void 0,this.singleLabel=void 0}setLabel(label,options){if(this.label!==label||!equals(this.options,options))if(this.label=label,this.options=options,"string"==typeof label)this.singleLabel||(this.container.innerText="",this.container.classList.remove("multiple"),this.singleLabel=dom.append(this.container,dom.$("a.label-name",{id:null==options?void 0:options.domId}))),this.singleLabel.textContent=label;else{this.container.innerText="",this.container.classList.add("multiple"),this.singleLabel=void 0;for(let i=0;i<label.length;i++){const l=label[i],id=(null==options?void 0:options.domId)&&`${null==options?void 0:options.domId}_${i}`;dom.append(this.container,dom.$("a.label-name",{id,"data-icon-label-count":label.length,"data-icon-label-index":i,role:"treeitem"},l)),i<label.length-1&&dom.append(this.container,dom.$("span.label-separator",void 0,(null==options?void 0:options.separator)||"/"))}}}}function splitMatches(labels,separator,matches){if(!matches)return;let labelStart=0;return labels.map((label=>{const labelRange={start:labelStart,end:labelStart+label.length},result=matches.map((match=>Range.intersect(labelRange,match))).filter((range=>!Range.isEmpty(range))).map((({start,end})=>({start:start-labelStart,end:end-labelStart})));return labelStart=labelRange.end+separator.length,result}))}class LabelWithHighlights{constructor(container,supportIcons){this.container=container,this.supportIcons=supportIcons,this.label=void 0,this.singleLabel=void 0}setLabel(label,options){if(this.label!==label||!equals(this.options,options))if(this.label=label,this.options=options,"string"==typeof label)this.singleLabel||(this.container.innerText="",this.container.classList.remove("multiple"),this.singleLabel=new HighlightedLabel(dom.append(this.container,dom.$("a.label-name",{id:null==options?void 0:options.domId})),{supportIcons:this.supportIcons})),this.singleLabel.set(label,null==options?void 0:options.matches,void 0,null==options?void 0:options.labelEscapeNewLines);else{this.container.innerText="",this.container.classList.add("multiple"),this.singleLabel=void 0;const separator=(null==options?void 0:options.separator)||"/",matches=splitMatches(label,separator,null==options?void 0:options.matches);for(let i=0;i<label.length;i++){const l=label[i],m=matches?matches[i]:void 0,id=(null==options?void 0:options.domId)&&`${null==options?void 0:options.domId}_${i}`,name=dom.$("a.label-name",{id,"data-icon-label-count":label.length,"data-icon-label-index":i,role:"treeitem"});new HighlightedLabel(dom.append(this.container,name),{supportIcons:this.supportIcons}).set(l,m,void 0,null==options?void 0:options.labelEscapeNewLines),i<label.length-1&&dom.append(name,dom.$("span.label-separator",void 0,separator))}}}}