const MINIMUM_SLIDER_SIZE=20;export class ScrollbarState{constructor(arrowSize,scrollbarSize,oppositeScrollbarSize,visibleSize,scrollSize,scrollPosition){this._scrollbarSize=Math.round(scrollbarSize),this._oppositeScrollbarSize=Math.round(oppositeScrollbarSize),this._arrowSize=Math.round(arrowSize),this._visibleSize=visibleSize,this._scrollSize=scrollSize,this._scrollPosition=scrollPosition,this._computedAvailableSize=0,this._computedIsNeeded=!1,this._computedSliderSize=0,this._computedSliderRatio=0,this._computedSliderPosition=0,this._refreshComputedValues()}clone(){return new ScrollbarState(this._arrowSize,this._scrollbarSize,this._oppositeScrollbarSize,this._visibleSize,this._scrollSize,this._scrollPosition)}setVisibleSize(visibleSize){const iVisibleSize=Math.round(visibleSize);return this._visibleSize!==iVisibleSize&&(this._visibleSize=iVisibleSize,this._refreshComputedValues(),!0)}setScrollSize(scrollSize){const iScrollSize=Math.round(scrollSize);return this._scrollSize!==iScrollSize&&(this._scrollSize=iScrollSize,this._refreshComputedValues(),!0)}setScrollPosition(scrollPosition){const iScrollPosition=Math.round(scrollPosition);return this._scrollPosition!==iScrollPosition&&(this._scrollPosition=iScrollPosition,this._refreshComputedValues(),!0)}setScrollbarSize(scrollbarSize){this._scrollbarSize=Math.round(scrollbarSize)}setOppositeScrollbarSize(oppositeScrollbarSize){this._oppositeScrollbarSize=Math.round(oppositeScrollbarSize)}static _computeValues(oppositeScrollbarSize,arrowSize,visibleSize,scrollSize,scrollPosition){const computedAvailableSize=Math.max(0,visibleSize-oppositeScrollbarSize),computedRepresentableSize=Math.max(0,computedAvailableSize-2*arrowSize),computedIsNeeded=scrollSize>0&&scrollSize>visibleSize;if(!computedIsNeeded)return{computedAvailableSize:Math.round(computedAvailableSize),computedIsNeeded,computedSliderSize:Math.round(computedRepresentableSize),computedSliderRatio:0,computedSliderPosition:0};const computedSliderSize=Math.round(Math.max(20,Math.floor(visibleSize*computedRepresentableSize/scrollSize))),computedSliderRatio=(computedRepresentableSize-computedSliderSize)/(scrollSize-visibleSize),computedSliderPosition=scrollPosition*computedSliderRatio;return{computedAvailableSize:Math.round(computedAvailableSize),computedIsNeeded,computedSliderSize:Math.round(computedSliderSize),computedSliderRatio,computedSliderPosition:Math.round(computedSliderPosition)}}_refreshComputedValues(){const r=ScrollbarState._computeValues(this._oppositeScrollbarSize,this._arrowSize,this._visibleSize,this._scrollSize,this._scrollPosition);this._computedAvailableSize=r.computedAvailableSize,this._computedIsNeeded=r.computedIsNeeded,this._computedSliderSize=r.computedSliderSize,this._computedSliderRatio=r.computedSliderRatio,this._computedSliderPosition=r.computedSliderPosition}getArrowSize(){return this._arrowSize}getScrollPosition(){return this._scrollPosition}getRectangleLargeSize(){return this._computedAvailableSize}getRectangleSmallSize(){return this._scrollbarSize}isNeeded(){return this._computedIsNeeded}getSliderSize(){return this._computedSliderSize}getSliderPosition(){return this._computedSliderPosition}getDesiredScrollPositionFromOffset(offset){if(!this._computedIsNeeded)return 0;const desiredSliderPosition=offset-this._arrowSize-this._computedSliderSize/2;return Math.round(desiredSliderPosition/this._computedSliderRatio)}getDesiredScrollPositionFromOffsetPaged(offset){if(!this._computedIsNeeded)return 0;const correctedOffset=offset-this._arrowSize;let desiredScrollPosition=this._scrollPosition;return correctedOffset<this._computedSliderPosition?desiredScrollPosition-=this._visibleSize:desiredScrollPosition+=this._visibleSize,desiredScrollPosition}getDesiredScrollPositionFromDelta(delta){if(!this._computedIsNeeded)return 0;const desiredSliderPosition=this._computedSliderPosition+delta;return Math.round(desiredSliderPosition/this._computedSliderRatio)}}