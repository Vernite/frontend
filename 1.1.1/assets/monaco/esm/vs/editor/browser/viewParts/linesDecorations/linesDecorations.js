import"./linesDecorations.css";import{DecorationToRender,DedupOverlay}from"../glyphMargin/glyphMargin.js";export class LinesDecorationsOverlay extends DedupOverlay{constructor(context){super(),this._context=context;const layoutInfo=this._context.configuration.options.get(133);this._decorationsLeft=layoutInfo.decorationsLeft,this._decorationsWidth=layoutInfo.decorationsWidth,this._renderResult=null,this._context.addEventHandler(this)}dispose(){this._context.removeEventHandler(this),this._renderResult=null,super.dispose()}onConfigurationChanged(e){const layoutInfo=this._context.configuration.options.get(133);return this._decorationsLeft=layoutInfo.decorationsLeft,this._decorationsWidth=layoutInfo.decorationsWidth,!0}onDecorationsChanged(e){return!0}onFlushed(e){return!0}onLinesChanged(e){return!0}onLinesDeleted(e){return!0}onLinesInserted(e){return!0}onScrollChanged(e){return e.scrollTopChanged}onZonesChanged(e){return!0}_getDecorations(ctx){const decorations=ctx.getDecorationsInViewport(),r=[];let rLen=0;for(let i=0,len=decorations.length;i<len;i++){const d=decorations[i],linesDecorationsClassName=d.options.linesDecorationsClassName;linesDecorationsClassName&&(r[rLen++]=new DecorationToRender(d.range.startLineNumber,d.range.endLineNumber,linesDecorationsClassName));const firstLineDecorationClassName=d.options.firstLineDecorationClassName;firstLineDecorationClassName&&(r[rLen++]=new DecorationToRender(d.range.startLineNumber,d.range.startLineNumber,firstLineDecorationClassName))}return r}prepareRender(ctx){const visibleStartLineNumber=ctx.visibleRange.startLineNumber,visibleEndLineNumber=ctx.visibleRange.endLineNumber,toRender=this._render(visibleStartLineNumber,visibleEndLineNumber,this._getDecorations(ctx)),common='" style="left:'+this._decorationsLeft.toString()+"px;width:"+this._decorationsWidth.toString()+'px;"></div>',output=[];for(let lineNumber=visibleStartLineNumber;lineNumber<=visibleEndLineNumber;lineNumber++){const lineIndex=lineNumber-visibleStartLineNumber,classNames=toRender[lineIndex];let lineOutput="";for(let i=0,len=classNames.length;i<len;i++)lineOutput+='<div class="cldr '+classNames[i]+common;output[lineIndex]=lineOutput}this._renderResult=output}render(startLineNumber,lineNumber){return this._renderResult?this._renderResult[lineNumber-startLineNumber]:""}}