import{Emitter}from"../../../../../base/common/event.js";import{Disposable}from"../../../../../base/common/lifecycle.js";import*as platform from"../../../../../base/common/platform.js";function hasModifier(e,modifier){return!!e[modifier]}export class ClickLinkMouseEvent{constructor(source,opts){this.target=source.target,this.hasTriggerModifier=hasModifier(source.event,opts.triggerModifier),this.hasSideBySideModifier=hasModifier(source.event,opts.triggerSideBySideModifier),this.isNoneOrSingleMouseDown=source.event.detail<=1}}export class ClickLinkKeyboardEvent{constructor(source,opts){this.keyCodeIsTriggerKey=source.keyCode===opts.triggerKey,this.keyCodeIsSideBySideKey=source.keyCode===opts.triggerSideBySideKey,this.hasTriggerModifier=hasModifier(source,opts.triggerModifier)}}export class ClickLinkOptions{constructor(triggerKey,triggerModifier,triggerSideBySideKey,triggerSideBySideModifier){this.triggerKey=triggerKey,this.triggerModifier=triggerModifier,this.triggerSideBySideKey=triggerSideBySideKey,this.triggerSideBySideModifier=triggerSideBySideModifier}equals(other){return this.triggerKey===other.triggerKey&&this.triggerModifier===other.triggerModifier&&this.triggerSideBySideKey===other.triggerSideBySideKey&&this.triggerSideBySideModifier===other.triggerSideBySideModifier}}function createOptions(multiCursorModifier){return"altKey"===multiCursorModifier?platform.isMacintosh?new ClickLinkOptions(57,"metaKey",6,"altKey"):new ClickLinkOptions(5,"ctrlKey",6,"altKey"):platform.isMacintosh?new ClickLinkOptions(6,"altKey",57,"metaKey"):new ClickLinkOptions(6,"altKey",5,"ctrlKey")}export class ClickLinkGesture extends Disposable{constructor(editor){super(),this._onMouseMoveOrRelevantKeyDown=this._register(new Emitter),this.onMouseMoveOrRelevantKeyDown=this._onMouseMoveOrRelevantKeyDown.event,this._onExecute=this._register(new Emitter),this.onExecute=this._onExecute.event,this._onCancel=this._register(new Emitter),this.onCancel=this._onCancel.event,this._editor=editor,this._opts=createOptions(this._editor.getOption(72)),this._lastMouseMoveEvent=null,this._hasTriggerKeyOnMouseDown=!1,this._lineNumberOnMouseDown=0,this._register(this._editor.onDidChangeConfiguration((e=>{if(e.hasChanged(72)){const newOpts=createOptions(this._editor.getOption(72));if(this._opts.equals(newOpts))return;this._opts=newOpts,this._lastMouseMoveEvent=null,this._hasTriggerKeyOnMouseDown=!1,this._lineNumberOnMouseDown=0,this._onCancel.fire()}}))),this._register(this._editor.onMouseMove((e=>this._onEditorMouseMove(new ClickLinkMouseEvent(e,this._opts))))),this._register(this._editor.onMouseDown((e=>this._onEditorMouseDown(new ClickLinkMouseEvent(e,this._opts))))),this._register(this._editor.onMouseUp((e=>this._onEditorMouseUp(new ClickLinkMouseEvent(e,this._opts))))),this._register(this._editor.onKeyDown((e=>this._onEditorKeyDown(new ClickLinkKeyboardEvent(e,this._opts))))),this._register(this._editor.onKeyUp((e=>this._onEditorKeyUp(new ClickLinkKeyboardEvent(e,this._opts))))),this._register(this._editor.onMouseDrag((()=>this._resetHandler()))),this._register(this._editor.onDidChangeCursorSelection((e=>this._onDidChangeCursorSelection(e)))),this._register(this._editor.onDidChangeModel((e=>this._resetHandler()))),this._register(this._editor.onDidChangeModelContent((()=>this._resetHandler()))),this._register(this._editor.onDidScrollChange((e=>{(e.scrollTopChanged||e.scrollLeftChanged)&&this._resetHandler()})))}_onDidChangeCursorSelection(e){e.selection&&e.selection.startColumn!==e.selection.endColumn&&this._resetHandler()}_onEditorMouseMove(mouseEvent){this._lastMouseMoveEvent=mouseEvent,this._onMouseMoveOrRelevantKeyDown.fire([mouseEvent,null])}_onEditorMouseDown(mouseEvent){this._hasTriggerKeyOnMouseDown=mouseEvent.hasTriggerModifier,this._lineNumberOnMouseDown=mouseEvent.target.position?mouseEvent.target.position.lineNumber:0}_onEditorMouseUp(mouseEvent){const currentLineNumber=mouseEvent.target.position?mouseEvent.target.position.lineNumber:0;this._hasTriggerKeyOnMouseDown&&this._lineNumberOnMouseDown&&this._lineNumberOnMouseDown===currentLineNumber&&this._onExecute.fire(mouseEvent)}_onEditorKeyDown(e){this._lastMouseMoveEvent&&(e.keyCodeIsTriggerKey||e.keyCodeIsSideBySideKey&&e.hasTriggerModifier)?this._onMouseMoveOrRelevantKeyDown.fire([this._lastMouseMoveEvent,e]):e.hasTriggerModifier&&this._onCancel.fire()}_onEditorKeyUp(e){e.keyCodeIsTriggerKey&&this._onCancel.fire()}_resetHandler(){this._lastMouseMoveEvent=null,this._hasTriggerKeyOnMouseDown=!1,this._onCancel.fire()}}