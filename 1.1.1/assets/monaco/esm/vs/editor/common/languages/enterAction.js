import{IndentAction}from"./languageConfiguration.js";import{getIndentationAtPosition,getScopedLineTokens}from"./languageConfigurationRegistry.js";export function getEnterAction(autoIndent,model,range,languageConfigurationService){const scopedLineTokens=getScopedLineTokens(model,range.startLineNumber,range.startColumn),richEditSupport=languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);if(!richEditSupport)return null;const scopedLineText=scopedLineTokens.getLineContent(),beforeEnterText=scopedLineText.substr(0,range.startColumn-1-scopedLineTokens.firstCharOffset);let afterEnterText;if(range.isEmpty())afterEnterText=scopedLineText.substr(range.startColumn-1-scopedLineTokens.firstCharOffset);else{afterEnterText=getScopedLineTokens(model,range.endLineNumber,range.endColumn).getLineContent().substr(range.endColumn-1-scopedLineTokens.firstCharOffset)}let previousLineText="";if(range.startLineNumber>1&&0===scopedLineTokens.firstCharOffset){const oneLineAboveScopedLineTokens=getScopedLineTokens(model,range.startLineNumber-1);oneLineAboveScopedLineTokens.languageId===scopedLineTokens.languageId&&(previousLineText=oneLineAboveScopedLineTokens.getLineContent())}const enterResult=richEditSupport.onEnter(autoIndent,previousLineText,beforeEnterText,afterEnterText);if(!enterResult)return null;const indentAction=enterResult.indentAction;let appendText=enterResult.appendText;const removeText=enterResult.removeText||0;appendText?indentAction===IndentAction.Indent&&(appendText="\t"+appendText):appendText=indentAction===IndentAction.Indent||indentAction===IndentAction.IndentOutdent?"\t":"";let indentation=getIndentationAtPosition(model,range.startLineNumber,range.startColumn);return removeText&&(indentation=indentation.substring(0,indentation.length-removeText)),{indentAction,appendText,removeText,indentation}}