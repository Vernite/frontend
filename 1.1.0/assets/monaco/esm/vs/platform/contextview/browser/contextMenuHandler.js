import{$,addDisposableListener,EventType,isHTMLElement}from"../../../base/browser/dom.js";import{StandardMouseEvent}from"../../../base/browser/mouseEvent.js";import{Menu}from"../../../base/browser/ui/menu/menu.js";import{ActionRunner}from"../../../base/common/actions.js";import{isCancellationError}from"../../../base/common/errors.js";import{combinedDisposable,DisposableStore}from"../../../base/common/lifecycle.js";import{attachMenuStyler}from"../../theme/common/styler.js";export class ContextMenuHandler{constructor(contextViewService,telemetryService,notificationService,keybindingService,themeService){this.contextViewService=contextViewService,this.telemetryService=telemetryService,this.notificationService=notificationService,this.keybindingService=keybindingService,this.themeService=themeService,this.focusToReturn=null,this.block=null,this.options={blockMouse:!0}}configure(options){this.options=options}showContextMenu(delegate){const actions=delegate.getActions();if(!actions.length)return;let menu;this.focusToReturn=document.activeElement;const shadowRootElement=isHTMLElement(delegate.domForShadowRoot)?delegate.domForShadowRoot:void 0;this.contextViewService.showContextView({getAnchor:()=>delegate.getAnchor(),canRelayout:!1,anchorAlignment:delegate.anchorAlignment,anchorAxisAlignment:delegate.anchorAxisAlignment,render:container=>{const className=delegate.getMenuClassName?delegate.getMenuClassName():"";className&&(container.className+=" "+className),this.options.blockMouse&&(this.block=container.appendChild($(".context-view-block")),this.block.style.position="fixed",this.block.style.cursor="initial",this.block.style.left="0",this.block.style.top="0",this.block.style.width="100%",this.block.style.height="100%",this.block.style.zIndex="-1",addDisposableListener(this.block,EventType.MOUSE_DOWN,(e=>e.stopPropagation())));const menuDisposables=new DisposableStore,actionRunner=delegate.actionRunner||new ActionRunner;return actionRunner.onBeforeRun(this.onActionRun,this,menuDisposables),actionRunner.onDidRun(this.onDidActionRun,this,menuDisposables),menu=new Menu(container,actions,{actionViewItemProvider:delegate.getActionViewItem,context:delegate.getActionsContext?delegate.getActionsContext():null,actionRunner,getKeyBinding:delegate.getKeyBinding?delegate.getKeyBinding:action=>this.keybindingService.lookupKeybinding(action.id)}),menuDisposables.add(attachMenuStyler(menu,this.themeService)),menu.onDidCancel((()=>this.contextViewService.hideContextView(!0)),null,menuDisposables),menu.onDidBlur((()=>this.contextViewService.hideContextView(!0)),null,menuDisposables),menuDisposables.add(addDisposableListener(window,EventType.BLUR,(()=>this.contextViewService.hideContextView(!0)))),menuDisposables.add(addDisposableListener(window,EventType.MOUSE_DOWN,(e=>{if(e.defaultPrevented)return;const event=new StandardMouseEvent(e);let element=event.target;if(!event.rightButton){for(;element;){if(element===container)return;element=element.parentElement}this.contextViewService.hideContextView(!0)}}))),combinedDisposable(menuDisposables,menu)},focus:()=>{null==menu||menu.focus(!!delegate.autoSelectFirstItem)},onHide:didCancel=>{var _a;null===(_a=delegate.onHide)||void 0===_a||_a.call(delegate,!!didCancel),this.block&&(this.block.remove(),this.block=null),this.focusToReturn&&this.focusToReturn.focus()}},shadowRootElement,!!shadowRootElement)}onActionRun(e){this.telemetryService.publicLog2("workbenchActionExecuted",{id:e.action.id,from:"contextMenu"}),this.contextViewService.hideContextView(!1),this.focusToReturn&&this.focusToReturn.focus()}onDidActionRun(e){e.error&&!isCancellationError(e.error)&&this.notificationService.error(e.error)}}