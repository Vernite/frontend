import{EditOperation}from"../../../common/core/editOperation.js";import{Range}from"../../../common/core/range.js";export class FormattingEdit{static _handleEolEdits(editor,edits){let newEol;const singleEdits=[];for(const edit of edits)"number"==typeof edit.eol&&(newEol=edit.eol),edit.range&&"string"==typeof edit.text&&singleEdits.push(edit);return"number"==typeof newEol&&editor.hasModel()&&editor.getModel().pushEOL(newEol),singleEdits}static _isFullModelReplaceEdit(editor,edit){if(!editor.hasModel())return!1;const model=editor.getModel(),editRange=model.validateRange(edit.range);return model.getFullModelRange().equalsRange(editRange)}static execute(editor,_edits,addUndoStops){addUndoStops&&editor.pushUndoStop();const edits=FormattingEdit._handleEolEdits(editor,_edits);1===edits.length&&FormattingEdit._isFullModelReplaceEdit(editor,edits[0])?editor.executeEdits("formatEditsCommand",edits.map((edit=>EditOperation.replace(Range.lift(edit.range),edit.text)))):editor.executeEdits("formatEditsCommand",edits.map((edit=>EditOperation.replaceMove(Range.lift(edit.range),edit.text)))),addUndoStops&&editor.pushUndoStop()}}