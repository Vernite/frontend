import{Disposable}from"../../../../base/common/lifecycle.js";import{isMacintosh}from"../../../../base/common/platform.js";import"./dnd.css";import{registerEditorContribution}from"../../../browser/editorExtensions.js";import{Position}from"../../../common/core/position.js";import{Range}from"../../../common/core/range.js";import{Selection}from"../../../common/core/selection.js";import{ModelDecorationOptions}from"../../../common/model/textModel.js";import{DragAndDropCommand}from"./dragAndDropCommand.js";function hasTriggerModifier(e){return isMacintosh?e.altKey:e.ctrlKey}export class DragAndDropController extends Disposable{constructor(editor){super(),this._editor=editor,this._dndDecorationIds=this._editor.createDecorationsCollection(),this._register(this._editor.onMouseDown((e=>this._onEditorMouseDown(e)))),this._register(this._editor.onMouseUp((e=>this._onEditorMouseUp(e)))),this._register(this._editor.onMouseDrag((e=>this._onEditorMouseDrag(e)))),this._register(this._editor.onMouseDrop((e=>this._onEditorMouseDrop(e)))),this._register(this._editor.onMouseDropCanceled((()=>this._onEditorMouseDropCanceled()))),this._register(this._editor.onKeyDown((e=>this.onEditorKeyDown(e)))),this._register(this._editor.onKeyUp((e=>this.onEditorKeyUp(e)))),this._register(this._editor.onDidBlurEditorWidget((()=>this.onEditorBlur()))),this._register(this._editor.onDidBlurEditorText((()=>this.onEditorBlur()))),this._mouseDown=!1,this._modifierPressed=!1,this._dragSelection=null}onEditorBlur(){this._removeDecoration(),this._dragSelection=null,this._mouseDown=!1,this._modifierPressed=!1}onEditorKeyDown(e){this._editor.getOption(31)&&!this._editor.getOption(18)&&(hasTriggerModifier(e)&&(this._modifierPressed=!0),this._mouseDown&&hasTriggerModifier(e)&&this._editor.updateOptions({mouseStyle:"copy"}))}onEditorKeyUp(e){this._editor.getOption(31)&&!this._editor.getOption(18)&&(hasTriggerModifier(e)&&(this._modifierPressed=!1),this._mouseDown&&e.keyCode===DragAndDropController.TRIGGER_KEY_VALUE&&this._editor.updateOptions({mouseStyle:"default"}))}_onEditorMouseDown(mouseEvent){this._mouseDown=!0}_onEditorMouseUp(mouseEvent){this._mouseDown=!1,this._editor.updateOptions({mouseStyle:"text"})}_onEditorMouseDrag(mouseEvent){const target=mouseEvent.target;if(null===this._dragSelection){const possibleSelections=(this._editor.getSelections()||[]).filter((selection=>target.position&&selection.containsPosition(target.position)));if(1!==possibleSelections.length)return;this._dragSelection=possibleSelections[0]}hasTriggerModifier(mouseEvent.event)?this._editor.updateOptions({mouseStyle:"copy"}):this._editor.updateOptions({mouseStyle:"default"}),target.position&&(this._dragSelection.containsPosition(target.position)?this._removeDecoration():this.showAt(target.position))}_onEditorMouseDropCanceled(){this._editor.updateOptions({mouseStyle:"text"}),this._removeDecoration(),this._dragSelection=null,this._mouseDown=!1}_onEditorMouseDrop(mouseEvent){if(mouseEvent.target&&(this._hitContent(mouseEvent.target)||this._hitMargin(mouseEvent.target))&&mouseEvent.target.position){const newCursorPosition=new Position(mouseEvent.target.position.lineNumber,mouseEvent.target.position.column);if(null===this._dragSelection){let newSelections=null;if(mouseEvent.event.shiftKey){const primarySelection=this._editor.getSelection();if(primarySelection){const{selectionStartLineNumber,selectionStartColumn}=primarySelection;newSelections=[new Selection(selectionStartLineNumber,selectionStartColumn,newCursorPosition.lineNumber,newCursorPosition.column)]}}else newSelections=(this._editor.getSelections()||[]).map((selection=>selection.containsPosition(newCursorPosition)?new Selection(newCursorPosition.lineNumber,newCursorPosition.column,newCursorPosition.lineNumber,newCursorPosition.column):selection));this._editor.setSelections(newSelections||[],"mouse",3)}else(!this._dragSelection.containsPosition(newCursorPosition)||(hasTriggerModifier(mouseEvent.event)||this._modifierPressed)&&(this._dragSelection.getEndPosition().equals(newCursorPosition)||this._dragSelection.getStartPosition().equals(newCursorPosition)))&&(this._editor.pushUndoStop(),this._editor.executeCommand(DragAndDropController.ID,new DragAndDropCommand(this._dragSelection,newCursorPosition,hasTriggerModifier(mouseEvent.event)||this._modifierPressed)),this._editor.pushUndoStop())}this._editor.updateOptions({mouseStyle:"text"}),this._removeDecoration(),this._dragSelection=null,this._mouseDown=!1}showAt(position){this._dndDecorationIds.set([{range:new Range(position.lineNumber,position.column,position.lineNumber,position.column),options:DragAndDropController._DECORATION_OPTIONS}]),this._editor.revealPosition(position,1)}_removeDecoration(){this._dndDecorationIds.clear()}_hitContent(target){return 6===target.type||7===target.type}_hitMargin(target){return 2===target.type||3===target.type||4===target.type}dispose(){this._removeDecoration(),this._dragSelection=null,this._mouseDown=!1,this._modifierPressed=!1,super.dispose()}}DragAndDropController.ID="editor.contrib.dragAndDrop",DragAndDropController.TRIGGER_KEY_VALUE=isMacintosh?6:5,DragAndDropController._DECORATION_OPTIONS=ModelDecorationOptions.register({description:"dnd-target",className:"dnd-target"}),registerEditorContribution(DragAndDropController.ID,DragAndDropController);