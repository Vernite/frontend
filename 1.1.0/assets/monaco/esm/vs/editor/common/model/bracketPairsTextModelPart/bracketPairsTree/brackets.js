import{escapeRegExpCharacters}from"../../../../../base/common/strings.js";import{BracketAstNode}from"./ast.js";import{toLength}from"./length.js";import{identityKeyProvider,SmallImmutableSet}from"./smallImmutableSet.js";import{Token}from"./tokenizer.js";export class BracketTokens{constructor(map){this.map=map,this.hasRegExp=!1,this._regExpGlobal=null}static createFromLanguage(configuration,denseKeyProvider){function getId(bracketInfo){return denseKeyProvider.getKey(`${bracketInfo.languageId}:::${bracketInfo.bracketText}`)}const map=new Map;for(const openingBracket of configuration.bracketsNew.openingBrackets){const length=toLength(0,openingBracket.bracketText.length),openingTextId=getId(openingBracket),bracketIds=SmallImmutableSet.getEmpty().add(openingTextId,identityKeyProvider);map.set(openingBracket.bracketText,new Token(length,1,openingTextId,bracketIds,BracketAstNode.create(length,openingBracket,bracketIds)))}for(const closingBracket of configuration.bracketsNew.closingBrackets){const length=toLength(0,closingBracket.bracketText.length);let bracketIds=SmallImmutableSet.getEmpty();const closingBrackets=closingBracket.getClosedBrackets();for(const bracket of closingBrackets)bracketIds=bracketIds.add(getId(bracket),identityKeyProvider);map.set(closingBracket.bracketText,new Token(length,2,getId(closingBrackets[0]),bracketIds,BracketAstNode.create(length,closingBracket,bracketIds)))}return new BracketTokens(map)}getRegExpStr(){if(this.isEmpty)return null;{const keys=[...this.map.keys()];return keys.sort(),keys.reverse(),keys.map((k=>prepareBracketForRegExp(k))).join("|")}}get regExpGlobal(){if(!this.hasRegExp){const regExpStr=this.getRegExpStr();this._regExpGlobal=regExpStr?new RegExp(regExpStr,"gi"):null,this.hasRegExp=!0}return this._regExpGlobal}getToken(value){return this.map.get(value.toLowerCase())}findClosingTokenText(openingBracketIds){for(const[closingText,info]of this.map)if(2===info.kind&&info.bracketIds.intersects(openingBracketIds))return closingText}get isEmpty(){return 0===this.map.size}}function prepareBracketForRegExp(str){let escaped=escapeRegExpCharacters(str);return/^[\w ]+/.test(str)&&(escaped=`\\b${escaped}`),/[\w ]+$/.test(str)&&(escaped=`${escaped}\\b`),escaped}export class LanguageAgnosticBracketTokens{constructor(denseKeyProvider,getLanguageConfiguration){this.denseKeyProvider=denseKeyProvider,this.getLanguageConfiguration=getLanguageConfiguration,this.languageIdToBracketTokens=new Map}didLanguageChange(languageId){return this.languageIdToBracketTokens.has(languageId)}getSingleLanguageBracketTokens(languageId){let singleLanguageBracketTokens=this.languageIdToBracketTokens.get(languageId);return singleLanguageBracketTokens||(singleLanguageBracketTokens=BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId),this.denseKeyProvider),this.languageIdToBracketTokens.set(languageId,singleLanguageBracketTokens)),singleLanguageBracketTokens}}