import{splitLines}from"../../../base/common/strings.js";import{Position}from"../core/position.js";import{PrefixSumComputer}from"./prefixSumComputer.js";export class MirrorTextModel{constructor(uri,lines,eol,versionId){this._uri=uri,this._lines=lines,this._eol=eol,this._versionId=versionId,this._lineStarts=null,this._cachedTextValue=null}dispose(){this._lines.length=0}get version(){return this._versionId}getText(){return null===this._cachedTextValue&&(this._cachedTextValue=this._lines.join(this._eol)),this._cachedTextValue}onEvents(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);const changes=e.changes;for(const change of changes)this._acceptDeleteRange(change.range),this._acceptInsertText(new Position(change.range.startLineNumber,change.range.startColumn),change.text);this._versionId=e.versionId,this._cachedTextValue=null}_ensureLineStarts(){if(!this._lineStarts){const eolLength=this._eol.length,linesLength=this._lines.length,lineStartValues=new Uint32Array(linesLength);for(let i=0;i<linesLength;i++)lineStartValues[i]=this._lines[i].length+eolLength;this._lineStarts=new PrefixSumComputer(lineStartValues)}}_setLineText(lineIndex,newValue){this._lines[lineIndex]=newValue,this._lineStarts&&this._lineStarts.setValue(lineIndex,this._lines[lineIndex].length+this._eol.length)}_acceptDeleteRange(range){if(range.startLineNumber!==range.endLineNumber)this._setLineText(range.startLineNumber-1,this._lines[range.startLineNumber-1].substring(0,range.startColumn-1)+this._lines[range.endLineNumber-1].substring(range.endColumn-1)),this._lines.splice(range.startLineNumber,range.endLineNumber-range.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(range.startLineNumber,range.endLineNumber-range.startLineNumber);else{if(range.startColumn===range.endColumn)return;this._setLineText(range.startLineNumber-1,this._lines[range.startLineNumber-1].substring(0,range.startColumn-1)+this._lines[range.startLineNumber-1].substring(range.endColumn-1))}}_acceptInsertText(position,insertText){if(0===insertText.length)return;const insertLines=splitLines(insertText);if(1===insertLines.length)return void this._setLineText(position.lineNumber-1,this._lines[position.lineNumber-1].substring(0,position.column-1)+insertLines[0]+this._lines[position.lineNumber-1].substring(position.column-1));insertLines[insertLines.length-1]+=this._lines[position.lineNumber-1].substring(position.column-1),this._setLineText(position.lineNumber-1,this._lines[position.lineNumber-1].substring(0,position.column-1)+insertLines[0]);const newLengths=new Uint32Array(insertLines.length-1);for(let i=1;i<insertLines.length;i++)this._lines.splice(position.lineNumber+i-1,0,insertLines[i]),newLengths[i-1]=insertLines[i].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(position.lineNumber,newLengths)}}