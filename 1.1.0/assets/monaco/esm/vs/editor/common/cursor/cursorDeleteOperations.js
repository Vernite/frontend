import*as strings from"../../../base/common/strings.js";import{ReplaceCommand}from"../commands/replaceCommand.js";import{EditOperationResult,isQuote}from"../cursorCommon.js";import{CursorColumns}from"../core/cursorColumns.js";import{MoveOperations}from"./cursorMoveOperations.js";import{Range}from"../core/range.js";import{Position}from"../core/position.js";export class DeleteOperations{static deleteRight(prevEditOperationType,config,model,selections){const commands=[];let shouldPushStackElementBefore=3!==prevEditOperationType;for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];let deleteSelection=selection;if(deleteSelection.isEmpty()){const position=selection.getPosition(),rightOfPosition=MoveOperations.right(config,model,position);deleteSelection=new Range(rightOfPosition.lineNumber,rightOfPosition.column,position.lineNumber,position.column)}deleteSelection.isEmpty()?commands[i]=null:(deleteSelection.startLineNumber!==deleteSelection.endLineNumber&&(shouldPushStackElementBefore=!0),commands[i]=new ReplaceCommand(deleteSelection,""))}return[shouldPushStackElementBefore,commands]}static isAutoClosingPairDelete(autoClosingDelete,autoClosingBrackets,autoClosingQuotes,autoClosingPairsOpen,model,selections,autoClosedCharacters){if("never"===autoClosingBrackets&&"never"===autoClosingQuotes)return!1;if("never"===autoClosingDelete)return!1;for(let i=0,len=selections.length;i<len;i++){const selection=selections[i],position=selection.getPosition();if(!selection.isEmpty())return!1;const lineText=model.getLineContent(position.lineNumber);if(position.column<2||position.column>=lineText.length+1)return!1;const character=lineText.charAt(position.column-2),autoClosingPairCandidates=autoClosingPairsOpen.get(character);if(!autoClosingPairCandidates)return!1;if(isQuote(character)){if("never"===autoClosingQuotes)return!1}else if("never"===autoClosingBrackets)return!1;const afterCharacter=lineText.charAt(position.column-1);let foundAutoClosingPair=!1;for(const autoClosingPairCandidate of autoClosingPairCandidates)autoClosingPairCandidate.open===character&&autoClosingPairCandidate.close===afterCharacter&&(foundAutoClosingPair=!0);if(!foundAutoClosingPair)return!1;if("auto"===autoClosingDelete){let found=!1;for(let j=0,lenJ=autoClosedCharacters.length;j<lenJ;j++){const autoClosedCharacter=autoClosedCharacters[j];if(position.lineNumber===autoClosedCharacter.startLineNumber&&position.column===autoClosedCharacter.startColumn){found=!0;break}}if(!found)return!1}}return!0}static _runAutoClosingPairDelete(config,model,selections){const commands=[];for(let i=0,len=selections.length;i<len;i++){const position=selections[i].getPosition(),deleteSelection=new Range(position.lineNumber,position.column-1,position.lineNumber,position.column+1);commands[i]=new ReplaceCommand(deleteSelection,"")}return[!0,commands]}static deleteLeft(prevEditOperationType,config,model,selections,autoClosedCharacters){if(this.isAutoClosingPairDelete(config.autoClosingDelete,config.autoClosingBrackets,config.autoClosingQuotes,config.autoClosingPairs.autoClosingPairsOpenByEnd,model,selections,autoClosedCharacters))return this._runAutoClosingPairDelete(config,model,selections);const commands=[];let shouldPushStackElementBefore=2!==prevEditOperationType;for(let i=0,len=selections.length;i<len;i++){const deleteRange=DeleteOperations.getDeleteRange(selections[i],model,config);deleteRange.isEmpty()?commands[i]=null:(deleteRange.startLineNumber!==deleteRange.endLineNumber&&(shouldPushStackElementBefore=!0),commands[i]=new ReplaceCommand(deleteRange,""))}return[shouldPushStackElementBefore,commands]}static getDeleteRange(selection,model,config){if(!selection.isEmpty())return selection;const position=selection.getPosition();if(config.useTabStops&&position.column>1){const lineContent=model.getLineContent(position.lineNumber),firstNonWhitespaceIndex=strings.firstNonWhitespaceIndex(lineContent),lastIndentationColumn=-1===firstNonWhitespaceIndex?lineContent.length+1:firstNonWhitespaceIndex+1;if(position.column<=lastIndentationColumn){const fromVisibleColumn=config.visibleColumnFromColumn(model,position),toVisibleColumn=CursorColumns.prevIndentTabStop(fromVisibleColumn,config.indentSize),toColumn=config.columnFromVisibleColumn(model,position.lineNumber,toVisibleColumn);return new Range(position.lineNumber,toColumn,position.lineNumber,position.column)}}return Range.fromPositions(DeleteOperations.getPositionAfterDeleteLeft(position,model),position)}static getPositionAfterDeleteLeft(position,model){if(position.column>1){const idx=strings.getLeftDeleteOffset(position.column-1,model.getLineContent(position.lineNumber));return position.with(void 0,idx+1)}if(position.lineNumber>1){const newLine=position.lineNumber-1;return new Position(newLine,model.getLineMaxColumn(newLine))}return position}static cut(config,model,selections){const commands=[];let lastCutRange=null;selections.sort(((a,b)=>Position.compare(a.getStartPosition(),b.getEndPosition())));for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];if(selection.isEmpty())if(config.emptySelectionClipboard){const position=selection.getPosition();let startLineNumber,startColumn,endLineNumber,endColumn;position.lineNumber<model.getLineCount()?(startLineNumber=position.lineNumber,startColumn=1,endLineNumber=position.lineNumber+1,endColumn=1):position.lineNumber>1&&(null==lastCutRange?void 0:lastCutRange.endLineNumber)!==position.lineNumber?(startLineNumber=position.lineNumber-1,startColumn=model.getLineMaxColumn(position.lineNumber-1),endLineNumber=position.lineNumber,endColumn=model.getLineMaxColumn(position.lineNumber)):(startLineNumber=position.lineNumber,startColumn=1,endLineNumber=position.lineNumber,endColumn=model.getLineMaxColumn(position.lineNumber));const deleteSelection=new Range(startLineNumber,startColumn,endLineNumber,endColumn);lastCutRange=deleteSelection,deleteSelection.isEmpty()?commands[i]=null:commands[i]=new ReplaceCommand(deleteSelection,"")}else commands[i]=null;else commands[i]=new ReplaceCommand(selection,"")}return new EditOperationResult(0,commands,{shouldPushStackElementBefore:!0,shouldPushStackElementAfter:!0})}}