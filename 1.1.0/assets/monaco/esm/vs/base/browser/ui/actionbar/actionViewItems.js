import{isFirefox}from"../../browser.js";import{DataTransfers}from"../../dnd.js";import{$,addDisposableListener,append,EventHelper,EventType}from"../../dom.js";import{EventType as TouchEventType,Gesture}from"../../touch.js";import{setupCustomHover}from"../iconLabel/iconLabelHover.js";import{Action,ActionRunner,Separator}from"../../../common/actions.js";import{Disposable}from"../../../common/lifecycle.js";import*as platform from"../../../common/platform.js";import*as types from"../../../common/types.js";import"./actionbar.css";import*as nls from"../../../../nls.js";export class BaseActionViewItem extends Disposable{constructor(context,action,options={}){super(),this.options=options,this._context=context||this,this._action=action,action instanceof Action&&this._register(action.onDidChange((event=>{this.element&&this.handleActionChangeEvent(event)})))}get action(){return this._action}handleActionChangeEvent(event){void 0!==event.enabled&&this.updateEnabled(),void 0!==event.checked&&this.updateChecked(),void 0!==event.class&&this.updateClass(),void 0!==event.label&&(this.updateLabel(),this.updateTooltip()),void 0!==event.tooltip&&this.updateTooltip()}get actionRunner(){return this._actionRunner||(this._actionRunner=this._register(new ActionRunner)),this._actionRunner}set actionRunner(actionRunner){this._actionRunner=actionRunner}getAction(){return this._action}isEnabled(){return this._action.enabled}setActionContext(newContext){this._context=newContext}render(container){const element=this.element=container;this._register(Gesture.addTarget(container));const enableDragging=this.options&&this.options.draggable;enableDragging&&(container.draggable=!0,isFirefox&&this._register(addDisposableListener(container,EventType.DRAG_START,(e=>{var _a;return null===(_a=e.dataTransfer)||void 0===_a?void 0:_a.setData(DataTransfers.TEXT,this._action.label)})))),this._register(addDisposableListener(element,TouchEventType.Tap,(e=>this.onClick(e,!0)))),this._register(addDisposableListener(element,EventType.MOUSE_DOWN,(e=>{enableDragging||EventHelper.stop(e,!0),this._action.enabled&&0===e.button&&element.classList.add("active")}))),platform.isMacintosh&&this._register(addDisposableListener(element,EventType.CONTEXT_MENU,(e=>{0===e.button&&!0===e.ctrlKey&&this.onClick(e)}))),this._register(addDisposableListener(element,EventType.CLICK,(e=>{EventHelper.stop(e,!0),this.options&&this.options.isMenu||this.onClick(e)}))),this._register(addDisposableListener(element,EventType.DBLCLICK,(e=>{EventHelper.stop(e,!0)}))),[EventType.MOUSE_UP,EventType.MOUSE_OUT].forEach((event=>{this._register(addDisposableListener(element,event,(e=>{EventHelper.stop(e),element.classList.remove("active")})))}))}onClick(event,preserveFocus=!1){var _a;EventHelper.stop(event,!0);const context=types.isUndefinedOrNull(this._context)?(null===(_a=this.options)||void 0===_a?void 0:_a.useEventAsContext)?event:{preserveFocus}:this._context;this.actionRunner.run(this._action,context)}focus(){this.element&&(this.element.tabIndex=0,this.element.focus(),this.element.classList.add("focused"))}blur(){this.element&&(this.element.blur(),this.element.tabIndex=-1,this.element.classList.remove("focused"))}setFocusable(focusable){this.element&&(this.element.tabIndex=focusable?0:-1)}get trapsArrowNavigation(){return!1}updateEnabled(){}updateLabel(){}getTooltip(){return this.getAction().tooltip}updateTooltip(){var _a;if(!this.element)return;const title=null!==(_a=this.getTooltip())&&void 0!==_a?_a:"";this.element.setAttribute("aria-label",title),this.options.hoverDelegate?(this.element.title="",this.customHover?this.customHover.update(title):(this.customHover=setupCustomHover(this.options.hoverDelegate,this.element,title),this._store.add(this.customHover))):this.element.title=title}updateClass(){}updateChecked(){}dispose(){this.element&&(this.element.remove(),this.element=void 0),super.dispose()}}export class ActionViewItem extends BaseActionViewItem{constructor(context,action,options={}){super(context,action,options),this.options=options,this.options.icon=void 0!==options.icon&&options.icon,this.options.label=void 0===options.label||options.label,this.cssClass=""}render(container){super.render(container),this.element&&(this.label=append(this.element,$("a.action-label"))),this.label&&(this._action.id===Separator.ID?this.label.setAttribute("role","presentation"):this.options.isMenu?this.label.setAttribute("role","menuitem"):this.label.setAttribute("role","button")),this.options.label&&this.options.keybinding&&this.element&&(append(this.element,$("span.keybinding")).textContent=this.options.keybinding),this.updateClass(),this.updateLabel(),this.updateTooltip(),this.updateEnabled(),this.updateChecked()}focus(){this.label&&(this.label.tabIndex=0,this.label.focus())}blur(){this.label&&(this.label.tabIndex=-1)}setFocusable(focusable){this.label&&(this.label.tabIndex=focusable?0:-1)}updateLabel(){this.options.label&&this.label&&(this.label.textContent=this.getAction().label)}getTooltip(){let title=null;return this.getAction().tooltip?title=this.getAction().tooltip:!this.options.label&&this.getAction().label&&this.options.icon&&(title=this.getAction().label,this.options.keybinding&&(title=nls.localize({key:"titleLabel",comment:["action title","action keybinding"]},"{0} ({1})",title,this.options.keybinding))),null!=title?title:void 0}updateClass(){var _a;this.cssClass&&this.label&&this.label.classList.remove(...this.cssClass.split(" ")),this.options.icon?(this.cssClass=this.getAction().class,this.label&&(this.label.classList.add("codicon"),this.cssClass&&this.label.classList.add(...this.cssClass.split(" "))),this.updateEnabled()):null===(_a=this.label)||void 0===_a||_a.classList.remove("codicon")}updateEnabled(){var _a,_b;this.getAction().enabled?(this.label&&(this.label.removeAttribute("aria-disabled"),this.label.classList.remove("disabled")),null===(_a=this.element)||void 0===_a||_a.classList.remove("disabled")):(this.label&&(this.label.setAttribute("aria-disabled","true"),this.label.classList.add("disabled")),null===(_b=this.element)||void 0===_b||_b.classList.add("disabled"))}updateChecked(){this.label&&(this.getAction().checked?this.label.classList.add("checked"):this.label.classList.remove("checked"))}}