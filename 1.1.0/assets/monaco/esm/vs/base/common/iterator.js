export var Iterable;!function(Iterable){Iterable.is=function is(thing){return thing&&"object"==typeof thing&&"function"==typeof thing[Symbol.iterator]};const _empty=Object.freeze([]);function consume(iterable,atMost=Number.POSITIVE_INFINITY){const consumed=[];if(0===atMost)return[consumed,iterable];const iterator=iterable[Symbol.iterator]();for(let i=0;i<atMost;i++){const next=iterator.next();if(next.done)return[consumed,Iterable.empty()];consumed.push(next.value)}return[consumed,{[Symbol.iterator]:()=>iterator}]}Iterable.empty=function empty(){return _empty},Iterable.single=function*single(element){yield element},Iterable.from=function from(iterable){return iterable||_empty},Iterable.isEmpty=function isEmpty(iterable){return!iterable||!0===iterable[Symbol.iterator]().next().done},Iterable.first=function first(iterable){return iterable[Symbol.iterator]().next().value},Iterable.some=function some(iterable,predicate){for(const element of iterable)if(predicate(element))return!0;return!1},Iterable.find=function find(iterable,predicate){for(const element of iterable)if(predicate(element))return element},Iterable.filter=function*filter(iterable,predicate){for(const element of iterable)predicate(element)&&(yield element)},Iterable.map=function*map(iterable,fn){let index=0;for(const element of iterable)yield fn(element,index++)},Iterable.concat=function*concat(...iterables){for(const iterable of iterables)for(const element of iterable)yield element},Iterable.concatNested=function*concatNested(iterables){for(const iterable of iterables)for(const element of iterable)yield element},Iterable.reduce=function reduce(iterable,reducer,initialValue){let value=initialValue;for(const element of iterable)value=reducer(value,element);return value},Iterable.forEach=function forEach(iterable,fn){let index=0;for(const element of iterable)fn(element,index++)},Iterable.slice=function*slice(arr,from,to=arr.length){for(from<0&&(from+=arr.length),to<0?to+=arr.length:to>arr.length&&(to=arr.length);from<to;from++)yield arr[from]},Iterable.consume=consume,Iterable.collect=function collect(iterable){return consume(iterable)[0]},Iterable.equals=function equals(a,b,comparator=((at,bt)=>at===bt)){const ai=a[Symbol.iterator](),bi=b[Symbol.iterator]();for(;;){const an=ai.next(),bn=bi.next();if(an.done!==bn.done)return!1;if(an.done)return!0;if(!comparator(an.value,bn.value))return!1}}}(Iterable||(Iterable={}));