import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{LanguagesRegistry}from"./languagesRegistry.js";import{firstOrDefault}from"../../../base/common/arrays.js";import{TokenizationRegistry}from"../languages.js";import{PLAINTEXT_LANGUAGE_ID}from"../languages/modesRegistry.js";export class LanguageService extends Disposable{constructor(warnOnOverwrite=!1){super(),this._onDidEncounterLanguage=this._register(new Emitter),this.onDidEncounterLanguage=this._onDidEncounterLanguage.event,this._onDidChange=this._register(new Emitter({leakWarningThreshold:200})),this.onDidChange=this._onDidChange.event,LanguageService.instanceCount++,this._encounteredLanguages=new Set,this._registry=this._register(new LanguagesRegistry(!0,warnOnOverwrite)),this.languageIdCodec=this._registry.languageIdCodec,this._register(this._registry.onDidChange((()=>this._onDidChange.fire())))}dispose(){LanguageService.instanceCount--,super.dispose()}isRegisteredLanguageId(languageId){return this._registry.isRegisteredLanguageId(languageId)}getLanguageIdByLanguageName(languageName){return this._registry.getLanguageIdByLanguageName(languageName)}getLanguageIdByMimeType(mimeType){return this._registry.getLanguageIdByMimeType(mimeType)}guessLanguageIdByFilepathOrFirstLine(resource,firstLine){const languageIds=this._registry.guessLanguageIdByFilepathOrFirstLine(resource,firstLine);return firstOrDefault(languageIds,null)}createById(languageId){return new LanguageSelection(this.onDidChange,(()=>this._createAndGetLanguageIdentifier(languageId)))}createByFilepathOrFirstLine(resource,firstLine){return new LanguageSelection(this.onDidChange,(()=>{const languageId=this.guessLanguageIdByFilepathOrFirstLine(resource,firstLine);return this._createAndGetLanguageIdentifier(languageId)}))}_createAndGetLanguageIdentifier(languageId){return languageId&&this.isRegisteredLanguageId(languageId)||(languageId=PLAINTEXT_LANGUAGE_ID),this._encounteredLanguages.has(languageId)||(this._encounteredLanguages.add(languageId),TokenizationRegistry.getOrCreate(languageId),this._onDidEncounterLanguage.fire(languageId)),languageId}}LanguageService.instanceCount=0;class LanguageSelection{constructor(_onDidChangeLanguages,_selector){this._onDidChangeLanguages=_onDidChangeLanguages,this._selector=_selector,this._listener=null,this._emitter=null,this.languageId=this._selector()}_dispose(){this._listener&&(this._listener.dispose(),this._listener=null),this._emitter&&(this._emitter.dispose(),this._emitter=null)}get onDidChange(){return this._listener||(this._listener=this._onDidChangeLanguages((()=>this._evaluate()))),this._emitter||(this._emitter=new Emitter({onLastListenerRemove:()=>{this._dispose()}})),this._emitter.event}_evaluate(){var _a;const languageId=this._selector();languageId!==this.languageId&&(this.languageId=languageId,null===(_a=this._emitter)||void 0===_a||_a.fire(this.languageId))}}