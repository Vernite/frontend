import*as dom from"../../../base/browser/dom.js";import*as platform from"../../../base/common/platform.js";import{EventType,Gesture}from"../../../base/browser/touch.js";import{Disposable}from"../../../base/common/lifecycle.js";import{MouseHandler}from"./mouseHandler.js";import{EditorMouseEvent,EditorPointerEventFactory}from"../editorDom.js";import{BrowserFeatures}from"../../../base/browser/canIUse.js";import{TextAreaSyntethicEvents}from"./textAreaInput.js";export class PointerEventHandler extends MouseHandler{constructor(context,viewController,viewHelper){super(context,viewController,viewHelper),this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode)),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Tap,(e=>this.onTap(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Change,(e=>this.onChange(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Contextmenu,(e=>this._onContextMenu(new EditorMouseEvent(e,!1,this.viewHelper.viewDomNode),!1)))),this._lastPointerType="mouse",this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,"pointerdown",(e=>{const pointerType=e.pointerType;this._lastPointerType="mouse"!==pointerType?"touch"===pointerType?"touch":"pen":"mouse"})));const pointerEvents=new EditorPointerEventFactory(this.viewHelper.viewDomNode);this._register(pointerEvents.onPointerMove(this.viewHelper.viewDomNode,(e=>this._onMouseMove(e)))),this._register(pointerEvents.onPointerUp(this.viewHelper.viewDomNode,(e=>this._onMouseUp(e)))),this._register(pointerEvents.onPointerLeave(this.viewHelper.viewDomNode,(e=>this._onMouseLeave(e)))),this._register(pointerEvents.onPointerDown(this.viewHelper.viewDomNode,((e,pointerId)=>this._onMouseDown(e,pointerId))))}onTap(event){if(!event.initialTarget||!this.viewHelper.linesContentDomNode.contains(event.initialTarget))return;event.preventDefault(),this.viewHelper.focusTextArea();const target=this._createMouseTarget(new EditorMouseEvent(event,!1,this.viewHelper.viewDomNode),!1);target.position&&this.viewController.dispatchMouse({position:target.position,mouseColumn:target.position.column,startedOnLineNumbers:!1,mouseDownCount:event.tapCount,inSelectionMode:!1,altKey:!1,ctrlKey:!1,metaKey:!1,shiftKey:!1,leftButton:!1,middleButton:!1,onInjectedText:6===target.type&&null!==target.detail.injectedText})}onChange(e){"touch"===this._lastPointerType&&this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX,-e.translationY)}_onMouseDown(e,pointerId){"touch"!==e.browserEvent.pointerType&&super._onMouseDown(e,pointerId)}}class TouchHandler extends MouseHandler{constructor(context,viewController,viewHelper){super(context,viewController,viewHelper),this._register(Gesture.addTarget(this.viewHelper.linesContentDomNode)),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Tap,(e=>this.onTap(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Change,(e=>this.onChange(e)))),this._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode,EventType.Contextmenu,(e=>this._onContextMenu(new EditorMouseEvent(e,!1,this.viewHelper.viewDomNode),!1))))}onTap(event){event.preventDefault(),this.viewHelper.focusTextArea();const target=this._createMouseTarget(new EditorMouseEvent(event,!1,this.viewHelper.viewDomNode),!1);if(target.position){const event=document.createEvent("CustomEvent");event.initEvent(TextAreaSyntethicEvents.Tap,!1,!0),this.viewHelper.dispatchTextAreaEvent(event),this.viewController.moveTo(target.position)}}onChange(e){this._context.viewModel.viewLayout.deltaScrollNow(-e.translationX,-e.translationY)}}export class PointerHandler extends Disposable{constructor(context,viewController,viewHelper){super(),platform.isIOS&&BrowserFeatures.pointerEvents?this.handler=this._register(new PointerEventHandler(context,viewController,viewHelper)):window.TouchEvent?this.handler=this._register(new TouchHandler(context,viewController,viewHelper)):this.handler=this._register(new MouseHandler(context,viewController,viewHelper))}getTargetAtClientPoint(clientX,clientY){return this.handler.getTargetAtClientPoint(clientX,clientY)}}