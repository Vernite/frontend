import*as strings from"../../../base/common/strings.js";import{Position}from"../../common/core/position.js";import{Range}from"../../common/core/range.js";export const _debugComposition=!1;export class TextAreaState{constructor(value,selectionStart,selectionEnd,selectionStartPosition,selectionEndPosition){this.value=value,this.selectionStart=selectionStart,this.selectionEnd=selectionEnd,this.selectionStartPosition=selectionStartPosition,this.selectionEndPosition=selectionEndPosition}toString(){return`[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`}static readFromTextArea(textArea){return new TextAreaState(textArea.getValue(),textArea.getSelectionStart(),textArea.getSelectionEnd(),null,null)}collapseSelection(){return new TextAreaState(this.value,this.value.length,this.value.length,null,null)}writeToTextArea(reason,textArea,select){textArea.setValue(reason,this.value),select&&textArea.setSelectionRange(reason,this.selectionStart,this.selectionEnd)}deduceEditorPosition(offset){if(offset<=this.selectionStart){const str=this.value.substring(offset,this.selectionStart);return this._finishDeduceEditorPosition(this.selectionStartPosition,str,-1)}if(offset>=this.selectionEnd){const str=this.value.substring(this.selectionEnd,offset);return this._finishDeduceEditorPosition(this.selectionEndPosition,str,1)}const str1=this.value.substring(this.selectionStart,offset);if(-1===str1.indexOf(String.fromCharCode(8230)))return this._finishDeduceEditorPosition(this.selectionStartPosition,str1,1);const str2=this.value.substring(offset,this.selectionEnd);return this._finishDeduceEditorPosition(this.selectionEndPosition,str2,-1)}_finishDeduceEditorPosition(anchor,deltaText,signum){let lineFeedCnt=0,lastLineFeedIndex=-1;for(;-1!==(lastLineFeedIndex=deltaText.indexOf("\n",lastLineFeedIndex+1));)lineFeedCnt++;return[anchor,signum*deltaText.length,lineFeedCnt]}static deduceInput(previousState,currentState,couldBeEmojiInput){if(!previousState)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};const prefixLength=Math.min(strings.commonPrefixLength(previousState.value,currentState.value),previousState.selectionStart,currentState.selectionStart),suffixLength=Math.min(strings.commonSuffixLength(previousState.value,currentState.value),previousState.value.length-previousState.selectionEnd,currentState.value.length-currentState.selectionEnd),currentValue=(previousState.value.substring(prefixLength,previousState.value.length-suffixLength),currentState.value.substring(prefixLength,currentState.value.length-suffixLength)),previousSelectionStart=previousState.selectionStart-prefixLength,previousSelectionEnd=previousState.selectionEnd-prefixLength,currentSelectionStart=currentState.selectionStart-prefixLength,currentSelectionEnd=currentState.selectionEnd-prefixLength;if(currentSelectionStart===currentSelectionEnd){const replacePreviousCharacters=previousState.selectionStart-prefixLength;return{text:currentValue,replacePrevCharCnt:replacePreviousCharacters,replaceNextCharCnt:0,positionDelta:0}}return{text:currentValue,replacePrevCharCnt:previousSelectionEnd-previousSelectionStart,replaceNextCharCnt:0,positionDelta:0}}static deduceAndroidCompositionInput(previousState,currentState){if(!previousState)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:0};if(previousState.value===currentState.value)return{text:"",replacePrevCharCnt:0,replaceNextCharCnt:0,positionDelta:currentState.selectionEnd-previousState.selectionEnd};const prefixLength=Math.min(strings.commonPrefixLength(previousState.value,currentState.value),previousState.selectionEnd),suffixLength=Math.min(strings.commonSuffixLength(previousState.value,currentState.value),previousState.value.length-previousState.selectionEnd),previousValue=previousState.value.substring(prefixLength,previousState.value.length-suffixLength),currentValue=currentState.value.substring(prefixLength,currentState.value.length-suffixLength),previousSelectionEnd=(previousState.selectionStart,previousState.selectionEnd-prefixLength),currentSelectionEnd=(currentState.selectionStart,currentState.selectionEnd-prefixLength);return{text:currentValue,replacePrevCharCnt:previousSelectionEnd,replaceNextCharCnt:previousValue.length-previousSelectionEnd,positionDelta:currentSelectionEnd-currentValue.length}}}TextAreaState.EMPTY=new TextAreaState("",0,0,null,null);export class PagedScreenReaderStrategy{static _getPageOfLine(lineNumber,linesPerPage){return Math.floor((lineNumber-1)/linesPerPage)}static _getRangeForPage(page,linesPerPage){const offset=page*linesPerPage;return new Range(offset+1,1,offset+linesPerPage+1,1)}static fromEditorSelection(previousState,model,selection,linesPerPage,trimLongText){const selectionStartPage=PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber,linesPerPage),selectionStartPageRange=PagedScreenReaderStrategy._getRangeForPage(selectionStartPage,linesPerPage),selectionEndPage=PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber,linesPerPage),selectionEndPageRange=PagedScreenReaderStrategy._getRangeForPage(selectionEndPage,linesPerPage),pretextRange=selectionStartPageRange.intersectRanges(new Range(1,1,selection.startLineNumber,selection.startColumn));let pretext=model.getValueInRange(pretextRange,1);const lastLine=model.getLineCount(),lastLineMaxColumn=model.getLineMaxColumn(lastLine),posttextRange=selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber,selection.endColumn,lastLine,lastLineMaxColumn));let text,posttext=model.getValueInRange(posttextRange,1);if(selectionStartPage===selectionEndPage||selectionStartPage+1===selectionEndPage)text=model.getValueInRange(selection,1);else{const selectionRange1=selectionStartPageRange.intersectRanges(selection),selectionRange2=selectionEndPageRange.intersectRanges(selection);text=model.getValueInRange(selectionRange1,1)+String.fromCharCode(8230)+model.getValueInRange(selectionRange2,1)}if(trimLongText){const LIMIT_CHARS=500;pretext.length>LIMIT_CHARS&&(pretext=pretext.substring(pretext.length-LIMIT_CHARS,pretext.length)),posttext.length>LIMIT_CHARS&&(posttext=posttext.substring(0,LIMIT_CHARS)),text.length>2*LIMIT_CHARS&&(text=text.substring(0,LIMIT_CHARS)+String.fromCharCode(8230)+text.substring(text.length-LIMIT_CHARS,text.length))}return new TextAreaState(pretext+text+posttext,pretext.length,pretext.length+text.length,new Position(selection.startLineNumber,selection.startColumn),new Position(selection.endLineNumber,selection.endColumn))}}