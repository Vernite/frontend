import{compareBy,findMaxBy,numberComparator}from"../../../../base/common/arrays.js";import{RunOnceScheduler}from"../../../../base/common/async.js";import{Emitter,Event}from"../../../../base/common/event.js";import{Disposable}from"../../../../base/common/lifecycle.js";import{Position}from"../../../common/core/position.js";import{Range}from"../../../common/core/range.js";import{SnippetParser}from"../../snippet/browser/snippetParser.js";import{SnippetSession}from"../../snippet/browser/snippetSession.js";import{SuggestController}from"../../suggest/browser/suggestController.js";import{minimizeInlineCompletion,normalizedInlineCompletionsEquals}from"./inlineCompletionToGhostText.js";export class SuggestWidgetInlineCompletionProvider extends Disposable{constructor(editor,suggestControllerPreselector){super(),this.editor=editor,this.suggestControllerPreselector=suggestControllerPreselector,this.isSuggestWidgetVisible=!1,this.isShiftKeyPressed=!1,this._isActive=!1,this._currentSuggestItemInfo=void 0,this.onDidChangeEmitter=new Emitter,this.onDidChange=this.onDidChangeEmitter.event,this.setInactiveDelayed=this._register(new RunOnceScheduler((()=>{this.isSuggestWidgetVisible||this._isActive&&(this._isActive=!1,this.onDidChangeEmitter.fire())}),100)),this._register(editor.onKeyDown((e=>{e.shiftKey&&!this.isShiftKeyPressed&&(this.isShiftKeyPressed=!0,this.update(this._isActive))}))),this._register(editor.onKeyUp((e=>{e.shiftKey&&this.isShiftKeyPressed&&(this.isShiftKeyPressed=!1,this.update(this._isActive))})));const suggestController=SuggestController.get(this.editor);if(suggestController){this._register(suggestController.registerSelector({priority:100,select:(model,pos,suggestItems)=>{const textModel=this.editor.getModel(),normalizedItemToPreselect=minimizeInlineCompletion(textModel,this.suggestControllerPreselector());if(!normalizedItemToPreselect)return-1;const position=Position.lift(pos),candidates=suggestItems.map(((suggestItem,index)=>{const inlineSuggestItem=suggestionToSuggestItemInfo(suggestController,position,suggestItem,this.isShiftKeyPressed),normalizedSuggestItem=minimizeInlineCompletion(textModel,null==inlineSuggestItem?void 0:inlineSuggestItem.normalizedInlineCompletion);if(!normalizedSuggestItem)return;return{index,valid:rangeStartsWith(normalizedItemToPreselect.range,normalizedSuggestItem.range)&&normalizedItemToPreselect.insertText.startsWith(normalizedSuggestItem.insertText),prefixLength:normalizedSuggestItem.insertText.length,suggestItem}})).filter((item=>item&&item.valid)),result=findMaxBy(candidates,compareBy((s=>s.prefixLength),numberComparator));return result?result.index:-1}}));let isBoundToSuggestWidget=!1;const bindToSuggestWidget=()=>{isBoundToSuggestWidget||(isBoundToSuggestWidget=!0,this._register(suggestController.widget.value.onDidShow((()=>{this.isSuggestWidgetVisible=!0,this.update(!0)}))),this._register(suggestController.widget.value.onDidHide((()=>{this.isSuggestWidgetVisible=!1,this.setInactiveDelayed.schedule(),this.update(this._isActive)}))),this._register(suggestController.widget.value.onDidFocus((()=>{this.isSuggestWidgetVisible=!0,this.update(!0)}))))};this._register(Event.once(suggestController.model.onDidTrigger)((e=>{bindToSuggestWidget()})))}this.update(this._isActive)}get state(){if(this._isActive)return{selectedItem:this._currentSuggestItemInfo}}update(newActive){const newInlineCompletion=this.getSuggestItemInfo();let shouldFire=!1;suggestItemInfoEquals(this._currentSuggestItemInfo,newInlineCompletion)||(this._currentSuggestItemInfo=newInlineCompletion,shouldFire=!0),this._isActive!==newActive&&(this._isActive=newActive,shouldFire=!0),shouldFire&&this.onDidChangeEmitter.fire()}getSuggestItemInfo(){const suggestController=SuggestController.get(this.editor);if(!suggestController)return;if(!this.isSuggestWidgetVisible)return;const focusedItem=suggestController.widget.value.getFocusedItem();return focusedItem?suggestionToSuggestItemInfo(suggestController,this.editor.getPosition(),focusedItem.item,this.isShiftKeyPressed):void 0}stopForceRenderingAbove(){const suggestController=SuggestController.get(this.editor);suggestController&&suggestController.stopForceRenderingAbove()}forceRenderingAbove(){const suggestController=SuggestController.get(this.editor);suggestController&&suggestController.forceRenderingAbove()}}export function rangeStartsWith(rangeToTest,prefix){return prefix.startLineNumber===rangeToTest.startLineNumber&&prefix.startColumn===rangeToTest.startColumn&&(prefix.endLineNumber<rangeToTest.endLineNumber||prefix.endLineNumber===rangeToTest.endLineNumber&&prefix.endColumn<=rangeToTest.endColumn)}function suggestItemInfoEquals(a,b){return a===b||!(!a||!b)&&(a.completionItemKind===b.completionItemKind&&a.isSnippetText===b.isSnippetText&&normalizedInlineCompletionsEquals(a.normalizedInlineCompletion,b.normalizedInlineCompletion))}function suggestionToSuggestItemInfo(suggestController,position,item,toggleMode){if(Array.isArray(item.completion.additionalTextEdits)&&item.completion.additionalTextEdits.length>0)return{completionItemKind:item.completion.kind,isSnippetText:!1,normalizedInlineCompletion:{range:Range.fromPositions(position,position),insertText:"",filterText:"",snippetInfo:void 0,additionalTextEdits:[]}};let{insertText}=item.completion,isSnippetText=!1;if(4&item.completion.insertTextRules){const snippet=(new SnippetParser).parse(insertText),model=suggestController.editor.getModel();if(snippet.children.length>100)return;SnippetSession.adjustWhitespace(model,position,snippet,!0,!0),insertText=snippet.toString(),isSnippetText=!0}const info=suggestController.getOverwriteInfo(item,toggleMode);return{isSnippetText,completionItemKind:item.completion.kind,normalizedInlineCompletion:{insertText,filterText:insertText,range:Range.fromPositions(position.delta(0,-info.overwriteBefore),position.delta(0,Math.max(info.overwriteAfter,0))),snippetInfo:void 0,additionalTextEdits:[]}}}