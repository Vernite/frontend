import{findFirstInSorted}from"../../../../base/common/arrays.js";import{Emitter}from"../../../../base/common/event.js";import{Range}from"../../../common/core/range.js";import{countEOL}from"../../../common/core/eolCounter.js";export class HiddenRangeModel{constructor(model){this._updateEventEmitter=new Emitter,this._hasLineChanges=!1,this._foldingModel=model,this._foldingModelListener=model.onDidChange((_=>this.updateHiddenRanges())),this._hiddenRanges=[],model.regions.length&&this.updateHiddenRanges()}get onDidChange(){return this._updateEventEmitter.event}get hiddenRanges(){return this._hiddenRanges}notifyChangeModelContent(e){this._hiddenRanges.length&&!this._hasLineChanges&&(this._hasLineChanges=e.changes.some((change=>change.range.endLineNumber!==change.range.startLineNumber||0!==countEOL(change.text)[0])))}updateHiddenRanges(){let updateHiddenAreas=!1;const newHiddenAreas=[];let i=0,k=0,lastCollapsedStart=Number.MAX_VALUE,lastCollapsedEnd=-1;const ranges=this._foldingModel.regions;for(;i<ranges.length;i++){if(!ranges.isCollapsed(i))continue;const startLineNumber=ranges.getStartLineNumber(i)+1,endLineNumber=ranges.getEndLineNumber(i);lastCollapsedStart<=startLineNumber&&endLineNumber<=lastCollapsedEnd||(!updateHiddenAreas&&k<this._hiddenRanges.length&&this._hiddenRanges[k].startLineNumber===startLineNumber&&this._hiddenRanges[k].endLineNumber===endLineNumber?(newHiddenAreas.push(this._hiddenRanges[k]),k++):(updateHiddenAreas=!0,newHiddenAreas.push(new Range(startLineNumber,1,endLineNumber,1))),lastCollapsedStart=startLineNumber,lastCollapsedEnd=endLineNumber)}(this._hasLineChanges||updateHiddenAreas||k<this._hiddenRanges.length)&&this.applyHiddenRanges(newHiddenAreas)}applyHiddenRanges(newHiddenAreas){this._hiddenRanges=newHiddenAreas,this._hasLineChanges=!1,this._updateEventEmitter.fire(newHiddenAreas)}hasRanges(){return this._hiddenRanges.length>0}isHidden(line){return null!==findRange(this._hiddenRanges,line)}adjustSelections(selections){let hasChanges=!1;const editorModel=this._foldingModel.textModel;let lastRange=null;const adjustLine=line=>(lastRange&&isInside(line,lastRange)||(lastRange=findRange(this._hiddenRanges,line)),lastRange?lastRange.startLineNumber-1:null);for(let i=0,len=selections.length;i<len;i++){let selection=selections[i];const adjustedStartLine=adjustLine(selection.startLineNumber);adjustedStartLine&&(selection=selection.setStartPosition(adjustedStartLine,editorModel.getLineMaxColumn(adjustedStartLine)),hasChanges=!0);const adjustedEndLine=adjustLine(selection.endLineNumber);adjustedEndLine&&(selection=selection.setEndPosition(adjustedEndLine,editorModel.getLineMaxColumn(adjustedEndLine)),hasChanges=!0),selections[i]=selection}return hasChanges}dispose(){this.hiddenRanges.length>0&&(this._hiddenRanges=[],this._updateEventEmitter.fire(this._hiddenRanges)),this._foldingModelListener&&(this._foldingModelListener.dispose(),this._foldingModelListener=null)}}function isInside(line,range){return line>=range.startLineNumber&&line<=range.endLineNumber}function findRange(ranges,line){const i=findFirstInSorted(ranges,(r=>line<r.startLineNumber))-1;return i>=0&&ranges[i].endLineNumber>=line?ranges[i]:null}