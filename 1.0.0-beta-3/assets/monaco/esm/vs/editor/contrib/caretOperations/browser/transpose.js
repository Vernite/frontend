import{EditorAction,registerEditorAction}from"../../../browser/editorExtensions.js";import{ReplaceCommand}from"../../../common/commands/replaceCommand.js";import{MoveOperations}from"../../../common/cursor/cursorMoveOperations.js";import{Range}from"../../../common/core/range.js";import{EditorContextKeys}from"../../../common/editorContextKeys.js";import*as nls from"../../../../nls.js";class TransposeLettersAction extends EditorAction{constructor(){super({id:"editor.action.transposeLetters",label:nls.localize("transposeLetters.label","Transpose Letters"),alias:"Transpose Letters",precondition:EditorContextKeys.writable,kbOpts:{kbExpr:EditorContextKeys.textInputFocus,primary:0,mac:{primary:306},weight:100}})}run(accessor,editor){if(!editor.hasModel())return;const model=editor.getModel(),commands=[],selections=editor.getSelections();for(const selection of selections){if(!selection.isEmpty())continue;const lineNumber=selection.startLineNumber,column=selection.startColumn,lastColumn=model.getLineMaxColumn(lineNumber);if(1===lineNumber&&(1===column||2===column&&2===lastColumn))continue;const endPosition=column===lastColumn?selection.getPosition():MoveOperations.rightPosition(model,selection.getPosition().lineNumber,selection.getPosition().column),middlePosition=MoveOperations.leftPosition(model,endPosition),beginPosition=MoveOperations.leftPosition(model,middlePosition),leftChar=model.getValueInRange(Range.fromPositions(beginPosition,middlePosition)),rightChar=model.getValueInRange(Range.fromPositions(middlePosition,endPosition)),replaceRange=Range.fromPositions(beginPosition,endPosition);commands.push(new ReplaceCommand(replaceRange,rightChar+leftChar))}commands.length>0&&(editor.pushUndoStop(),editor.executeCommands(this.id,commands),editor.pushUndoStop())}}registerEditorAction(TransposeLettersAction);