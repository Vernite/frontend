import{distinct}from"../../../base/common/arrays.js";import{Emitter}from"../../../base/common/event.js";import*as types from"../../../base/common/types.js";import*as nls from"../../../nls.js";import{getLanguageTagSettingPlainKey}from"./configuration.js";import{Extensions as JSONExtensions}from"../../jsonschemas/common/jsonContributionRegistry.js";import{Registry}from"../../registry/common/platform.js";export const Extensions={Configuration:"base.contributions.configuration"};export const allSettings={properties:{},patternProperties:{}};export const applicationSettings={properties:{},patternProperties:{}};export const machineSettings={properties:{},patternProperties:{}};export const machineOverridableSettings={properties:{},patternProperties:{}};export const windowSettings={properties:{},patternProperties:{}};export const resourceSettings={properties:{},patternProperties:{}};export const resourceLanguageSettingsSchemaId="vscode://schemas/settings/resourceLanguage";const contributionRegistry=Registry.as(JSONExtensions.JSONContribution);class ConfigurationRegistry{constructor(){this.overrideIdentifiers=new Set,this._onDidSchemaChange=new Emitter,this._onDidUpdateConfiguration=new Emitter,this.configurationDefaultsOverrides=new Map,this.defaultLanguageConfigurationOverridesNode={id:"defaultOverrides",title:nls.localize("defaultLanguageConfigurationOverrides.title","Default Language Configuration Overrides"),properties:{}},this.configurationContributors=[this.defaultLanguageConfigurationOverridesNode],this.resourceLanguageSettingsSchema={properties:{},patternProperties:{},additionalProperties:!1,errorMessage:"Unknown editor configuration setting",allowTrailingCommas:!0,allowComments:!0},this.configurationProperties={},this.policyConfigurations=new Map,this.excludedConfigurationProperties={},contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId,this.resourceLanguageSettingsSchema),this.registerOverridePropertyPatternKey()}registerConfiguration(configuration,validate=!0){this.registerConfigurations([configuration],validate)}registerConfigurations(configurations,validate=!0){const properties=this.doRegisterConfigurations(configurations,validate);contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId,this.resourceLanguageSettingsSchema),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties})}registerDefaultConfigurations(configurationDefaults){var _a;const properties=[],overrideIdentifiers=[];for(const{overrides,source}of configurationDefaults)for(const key in overrides)if(properties.push(key),OVERRIDE_PROPERTY_REGEX.test(key)){const configurationDefaultOverride=this.configurationDefaultsOverrides.get(key),valuesSources=null!==(_a=null==configurationDefaultOverride?void 0:configurationDefaultOverride.valuesSources)&&void 0!==_a?_a:new Map;if(source)for(const configuration of Object.keys(overrides[key]))valuesSources.set(configuration,source);const defaultValue=Object.assign(Object.assign({},(null==configurationDefaultOverride?void 0:configurationDefaultOverride.value)||{}),overrides[key]);this.configurationDefaultsOverrides.set(key,{source,value:defaultValue,valuesSources});const plainKey=getLanguageTagSettingPlainKey(key),property={type:"object",default:defaultValue,description:nls.localize("defaultLanguageConfiguration.description","Configure settings to be overridden for the {0} language.",plainKey),$ref:resourceLanguageSettingsSchemaId,defaultDefaultValue:defaultValue,source:types.isString(source)?void 0:source,defaultValueSource:source};overrideIdentifiers.push(...overrideIdentifiersFromKey(key)),this.configurationProperties[key]=property,this.defaultLanguageConfigurationOverridesNode.properties[key]=property}else{this.configurationDefaultsOverrides.set(key,{value:overrides[key],source});const property=this.configurationProperties[key];property&&(this.updatePropertyDefaultValue(key,property),this.updateSchema(key,property))}this.registerOverrideIdentifiers(overrideIdentifiers),this._onDidSchemaChange.fire(),this._onDidUpdateConfiguration.fire({properties,defaultsOverrides:!0})}registerOverrideIdentifiers(overrideIdentifiers){for(const overrideIdentifier of overrideIdentifiers)this.overrideIdentifiers.add(overrideIdentifier);this.updateOverridePropertyPatternKey()}doRegisterConfigurations(configurations,validate){const properties=[];return configurations.forEach((configuration=>{properties.push(...this.validateAndRegisterProperties(configuration,validate,configuration.extensionInfo,configuration.restrictedProperties)),this.configurationContributors.push(configuration),this.registerJSONConfiguration(configuration)})),properties}validateAndRegisterProperties(configuration,validate=!0,extensionInfo,restrictedProperties,scope=3){var _a;scope=types.isUndefinedOrNull(configuration.scope)?scope:configuration.scope;const propertyKeys=[],properties=configuration.properties;if(properties)for(const key in properties){const property=properties[key];validate&&validateProperty(key,property)?delete properties[key]:(property.source=extensionInfo,property.defaultDefaultValue=properties[key].default,this.updatePropertyDefaultValue(key,property),OVERRIDE_PROPERTY_REGEX.test(key)?property.scope=void 0:(property.scope=types.isUndefinedOrNull(property.scope)?scope:property.scope,property.restricted=types.isUndefinedOrNull(property.restricted)?!!(null==restrictedProperties?void 0:restrictedProperties.includes(key)):property.restricted),!properties[key].hasOwnProperty("included")||properties[key].included?(this.configurationProperties[key]=properties[key],(null===(_a=properties[key].policy)||void 0===_a?void 0:_a.name)&&this.policyConfigurations.set(properties[key].policy.name,key),!properties[key].deprecationMessage&&properties[key].markdownDeprecationMessage&&(properties[key].deprecationMessage=properties[key].markdownDeprecationMessage),propertyKeys.push(key)):(this.excludedConfigurationProperties[key]=properties[key],delete properties[key]))}const subNodes=configuration.allOf;if(subNodes)for(const node of subNodes)propertyKeys.push(...this.validateAndRegisterProperties(node,validate,extensionInfo,restrictedProperties,scope));return propertyKeys}getConfigurationProperties(){return this.configurationProperties}getPolicyConfigurations(){return this.policyConfigurations}registerJSONConfiguration(configuration){const register=configuration=>{const properties=configuration.properties;if(properties)for(const key in properties)this.updateSchema(key,properties[key]);const subNodes=configuration.allOf;null==subNodes||subNodes.forEach(register)};register(configuration)}updateSchema(key,property){switch(allSettings.properties[key]=property,property.scope){case 1:applicationSettings.properties[key]=property;break;case 2:machineSettings.properties[key]=property;break;case 6:machineOverridableSettings.properties[key]=property;break;case 3:windowSettings.properties[key]=property;break;case 4:resourceSettings.properties[key]=property;break;case 5:resourceSettings.properties[key]=property,this.resourceLanguageSettingsSchema.properties[key]=property}}updateOverridePropertyPatternKey(){for(const overrideIdentifier of this.overrideIdentifiers.values()){const overrideIdentifierProperty=`[${overrideIdentifier}]`,resourceLanguagePropertiesSchema={type:"object",description:nls.localize("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:nls.localize("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:resourceLanguageSettingsSchemaId};this.updatePropertyDefaultValue(overrideIdentifierProperty,resourceLanguagePropertiesSchema),allSettings.properties[overrideIdentifierProperty]=resourceLanguagePropertiesSchema,applicationSettings.properties[overrideIdentifierProperty]=resourceLanguagePropertiesSchema,machineSettings.properties[overrideIdentifierProperty]=resourceLanguagePropertiesSchema,machineOverridableSettings.properties[overrideIdentifierProperty]=resourceLanguagePropertiesSchema,windowSettings.properties[overrideIdentifierProperty]=resourceLanguagePropertiesSchema,resourceSettings.properties[overrideIdentifierProperty]=resourceLanguagePropertiesSchema}this._onDidSchemaChange.fire()}registerOverridePropertyPatternKey(){const resourceLanguagePropertiesSchema={type:"object",description:nls.localize("overrideSettings.defaultDescription","Configure editor settings to be overridden for a language."),errorMessage:nls.localize("overrideSettings.errorMessage","This setting does not support per-language configuration."),$ref:resourceLanguageSettingsSchemaId};allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=resourceLanguagePropertiesSchema,applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=resourceLanguagePropertiesSchema,machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=resourceLanguagePropertiesSchema,machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=resourceLanguagePropertiesSchema,windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=resourceLanguagePropertiesSchema,resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN]=resourceLanguagePropertiesSchema,this._onDidSchemaChange.fire()}updatePropertyDefaultValue(key,property){const configurationdefaultOverride=this.configurationDefaultsOverrides.get(key);let defaultValue=null==configurationdefaultOverride?void 0:configurationdefaultOverride.value,defaultSource=null==configurationdefaultOverride?void 0:configurationdefaultOverride.source;types.isUndefined(defaultValue)&&(defaultValue=property.defaultDefaultValue,defaultSource=void 0),types.isUndefined(defaultValue)&&(defaultValue=getDefaultValue(property.type)),property.default=defaultValue,property.defaultValueSource=defaultSource}}const OVERRIDE_IDENTIFIER_PATTERN="\\[([^\\]]+)\\]",OVERRIDE_IDENTIFIER_REGEX=new RegExp("\\[([^\\]]+)\\]","g");export const OVERRIDE_PROPERTY_PATTERN="^(\\[([^\\]]+)\\])+$";export const OVERRIDE_PROPERTY_REGEX=new RegExp(OVERRIDE_PROPERTY_PATTERN);export function overrideIdentifiersFromKey(key){const identifiers=[];if(OVERRIDE_PROPERTY_REGEX.test(key)){let matches=OVERRIDE_IDENTIFIER_REGEX.exec(key);for(;null==matches?void 0:matches.length;){const identifier=matches[1].trim();identifier&&identifiers.push(identifier),matches=OVERRIDE_IDENTIFIER_REGEX.exec(key)}}return distinct(identifiers)}export function getDefaultValue(type){switch(Array.isArray(type)?type[0]:type){case"boolean":return!1;case"integer":case"number":return 0;case"string":return"";case"array":return[];case"object":return{};default:return null}}const configurationRegistry=new ConfigurationRegistry;Registry.add(Extensions.Configuration,configurationRegistry);export function validateProperty(property,schema){var _a,_b,_c,_d;return property.trim()?OVERRIDE_PROPERTY_REGEX.test(property)?nls.localize("config.property.languageDefault","Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",property):void 0!==configurationRegistry.getConfigurationProperties()[property]?nls.localize("config.property.duplicate","Cannot register '{0}'. This property is already registered.",property):(null===(_a=schema.policy)||void 0===_a?void 0:_a.name)&&void 0!==configurationRegistry.getPolicyConfigurations().get(null===(_b=schema.policy)||void 0===_b?void 0:_b.name)?nls.localize("config.policy.duplicate","Cannot register '{0}'. The associated policy {1} is already registered with {2}.",property,null===(_c=schema.policy)||void 0===_c?void 0:_c.name,configurationRegistry.getPolicyConfigurations().get(null===(_d=schema.policy)||void 0===_d?void 0:_d.name)):null:nls.localize("config.property.empty","Cannot register an empty property")}