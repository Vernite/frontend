import{createMatches as createFuzzyMatches,fuzzyScore}from"./filters.js";import{sep}from"./path.js";import{isWindows}from"./platform.js";import{stripWildcards}from"./strings.js";const NO_SCORE2=[void 0,[]];export function scoreFuzzy2(target,query,patternStart=0,wordStart=0){const preparedQuery=query;return preparedQuery.values&&preparedQuery.values.length>1?doScoreFuzzy2Multiple(target,preparedQuery.values,patternStart,wordStart):doScoreFuzzy2Single(target,query,patternStart,wordStart)}function doScoreFuzzy2Multiple(target,query,patternStart,wordStart){let totalScore=0;const totalMatches=[];for(const queryPiece of query){const[score,matches]=doScoreFuzzy2Single(target,queryPiece,patternStart,wordStart);if("number"!=typeof score)return NO_SCORE2;totalScore+=score,totalMatches.push(...matches)}return[totalScore,normalizeMatches(totalMatches)]}function doScoreFuzzy2Single(target,query,patternStart,wordStart){const score=fuzzyScore(query.original,query.originalLowercase,patternStart,target,target.toLowerCase(),wordStart,{firstMatchCanBeWeak:!0,boostFullMatch:!0});return score?[score[0],createFuzzyMatches(score)]:NO_SCORE2}const NO_ITEM_SCORE=Object.freeze({score:0});function normalizeMatches(matches){const sortedMatches=matches.sort(((matchA,matchB)=>matchA.start-matchB.start)),normalizedMatches=[];let currentMatch;for(const match of sortedMatches)currentMatch&&matchOverlaps(currentMatch,match)?(currentMatch.start=Math.min(currentMatch.start,match.start),currentMatch.end=Math.max(currentMatch.end,match.end)):(currentMatch=match,normalizedMatches.push(match));return normalizedMatches}function matchOverlaps(matchA,matchB){return!(matchA.end<matchB.start)&&!(matchB.end<matchA.start)}function queryExpectsExactMatch(query){return query.startsWith('"')&&query.endsWith('"')}const MULTIPLE_QUERY_VALUES_SEPARATOR=" ";export function prepareQuery(original){"string"!=typeof original&&(original="");const originalLowercase=original.toLowerCase(),{pathNormalized,normalized,normalizedLowercase}=normalizeQuery(original),containsPathSeparator=pathNormalized.indexOf(sep)>=0,expectExactMatch=queryExpectsExactMatch(original);let values;const originalSplit=original.split(" ");if(originalSplit.length>1)for(const originalPiece of originalSplit){const expectExactMatchPiece=queryExpectsExactMatch(originalPiece),{pathNormalized:pathNormalizedPiece,normalized:normalizedPiece,normalizedLowercase:normalizedLowercasePiece}=normalizeQuery(originalPiece);normalizedPiece&&(values||(values=[]),values.push({original:originalPiece,originalLowercase:originalPiece.toLowerCase(),pathNormalized:pathNormalizedPiece,normalized:normalizedPiece,normalizedLowercase:normalizedLowercasePiece,expectContiguousMatch:expectExactMatchPiece}))}return{original,originalLowercase,pathNormalized,normalized,normalizedLowercase,values,containsPathSeparator,expectContiguousMatch:expectExactMatch}}function normalizeQuery(original){let pathNormalized;pathNormalized=isWindows?original.replace(/\//g,sep):original.replace(/\\/g,sep);const normalized=stripWildcards(pathNormalized).replace(/\s|"/g,"");return{pathNormalized,normalized,normalizedLowercase:normalized.toLowerCase()}}export function pieceToQuery(arg1){return Array.isArray(arg1)?prepareQuery(arg1.map((piece=>piece.original)).join(" ")):prepareQuery(arg1.original)}