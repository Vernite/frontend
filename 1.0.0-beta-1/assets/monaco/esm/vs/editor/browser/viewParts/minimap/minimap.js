import"./minimap.css";import*as dom from"../../../../base/browser/dom.js";import{createFastDomNode}from"../../../../base/browser/fastDomNode.js";import{GlobalPointerMoveMonitor}from"../../../../base/browser/globalPointerMoveMonitor.js";import{Disposable}from"../../../../base/common/lifecycle.js";import*as platform from"../../../../base/common/platform.js";import*as strings from"../../../../base/common/strings.js";import{RenderedLinesCollection}from"../../view/viewLayer.js";import{PartFingerprints,ViewPart}from"../../view/viewPart.js";import{MINIMAP_GUTTER_WIDTH,EditorLayoutInfoComputer}from"../../../common/config/editorOptions.js";import{Range}from"../../../common/core/range.js";import{RGBA8}from"../../../common/core/rgba.js";import{MinimapTokensColorTracker}from"../../../common/viewModel/minimapTokensColorTracker.js";import{ViewModelDecoration}from"../../../common/viewModel.js";import{minimapSelection,scrollbarShadow,minimapBackground,minimapSliderBackground,minimapSliderHoverBackground,minimapSliderActiveBackground,minimapForegroundOpacity}from"../../../../platform/theme/common/colorRegistry.js";import{registerThemingParticipant}from"../../../../platform/theme/common/themeService.js";import{Selection}from"../../../common/core/selection.js";import{EventType,Gesture}from"../../../../base/browser/touch.js";import{MinimapCharRendererFactory}from"./minimapCharRendererFactory.js";import{MinimapPosition}from"../../../common/model.js";import{once}from"../../../../base/common/functional.js";const POINTER_DRAG_RESET_DISTANCE=140,GUTTER_DECORATION_WIDTH=2;class MinimapOptions{constructor(configuration,theme,tokensColorTracker){const options=configuration.options,pixelRatio=options.get(131),layoutInfo=options.get(133),minimapLayout=layoutInfo.minimap,fontInfo=options.get(46),minimapOpts=options.get(67);this.renderMinimap=minimapLayout.renderMinimap,this.size=minimapOpts.size,this.minimapHeightIsEditorHeight=minimapLayout.minimapHeightIsEditorHeight,this.scrollBeyondLastLine=options.get(96),this.showSlider=minimapOpts.showSlider,this.autohide=minimapOpts.autohide,this.pixelRatio=pixelRatio,this.typicalHalfwidthCharacterWidth=fontInfo.typicalHalfwidthCharacterWidth,this.lineHeight=options.get(61),this.minimapLeft=minimapLayout.minimapLeft,this.minimapWidth=minimapLayout.minimapWidth,this.minimapHeight=layoutInfo.height,this.canvasInnerWidth=minimapLayout.minimapCanvasInnerWidth,this.canvasInnerHeight=minimapLayout.minimapCanvasInnerHeight,this.canvasOuterWidth=minimapLayout.minimapCanvasOuterWidth,this.canvasOuterHeight=minimapLayout.minimapCanvasOuterHeight,this.isSampling=minimapLayout.minimapIsSampling,this.editorHeight=layoutInfo.height,this.fontScale=minimapLayout.minimapScale,this.minimapLineHeight=minimapLayout.minimapLineHeight,this.minimapCharWidth=1*this.fontScale,this.charRenderer=once((()=>MinimapCharRendererFactory.create(this.fontScale,fontInfo.fontFamily))),this.defaultBackgroundColor=tokensColorTracker.getColor(2),this.backgroundColor=MinimapOptions._getMinimapBackground(theme,this.defaultBackgroundColor),this.foregroundAlpha=MinimapOptions._getMinimapForegroundOpacity(theme)}static _getMinimapBackground(theme,defaultBackgroundColor){const themeColor=theme.getColor(minimapBackground);return themeColor?new RGBA8(themeColor.rgba.r,themeColor.rgba.g,themeColor.rgba.b,Math.round(255*themeColor.rgba.a)):defaultBackgroundColor}static _getMinimapForegroundOpacity(theme){const themeColor=theme.getColor(minimapForegroundOpacity);return themeColor?RGBA8._clamp(Math.round(255*themeColor.rgba.a)):255}equals(other){return this.renderMinimap===other.renderMinimap&&this.size===other.size&&this.minimapHeightIsEditorHeight===other.minimapHeightIsEditorHeight&&this.scrollBeyondLastLine===other.scrollBeyondLastLine&&this.showSlider===other.showSlider&&this.autohide===other.autohide&&this.pixelRatio===other.pixelRatio&&this.typicalHalfwidthCharacterWidth===other.typicalHalfwidthCharacterWidth&&this.lineHeight===other.lineHeight&&this.minimapLeft===other.minimapLeft&&this.minimapWidth===other.minimapWidth&&this.minimapHeight===other.minimapHeight&&this.canvasInnerWidth===other.canvasInnerWidth&&this.canvasInnerHeight===other.canvasInnerHeight&&this.canvasOuterWidth===other.canvasOuterWidth&&this.canvasOuterHeight===other.canvasOuterHeight&&this.isSampling===other.isSampling&&this.editorHeight===other.editorHeight&&this.fontScale===other.fontScale&&this.minimapLineHeight===other.minimapLineHeight&&this.minimapCharWidth===other.minimapCharWidth&&this.defaultBackgroundColor&&this.defaultBackgroundColor.equals(other.defaultBackgroundColor)&&this.backgroundColor&&this.backgroundColor.equals(other.backgroundColor)&&this.foregroundAlpha===other.foregroundAlpha}}class MinimapLayout{constructor(scrollTop,scrollHeight,sliderNeeded,computedSliderRatio,sliderTop,sliderHeight,startLineNumber,endLineNumber){this.scrollTop=scrollTop,this.scrollHeight=scrollHeight,this.sliderNeeded=sliderNeeded,this._computedSliderRatio=computedSliderRatio,this.sliderTop=sliderTop,this.sliderHeight=sliderHeight,this.startLineNumber=startLineNumber,this.endLineNumber=endLineNumber}getDesiredScrollTopFromDelta(delta){return Math.round(this.scrollTop+delta/this._computedSliderRatio)}getDesiredScrollTopFromTouchLocation(pageY){return Math.round((pageY-this.sliderHeight/2)/this._computedSliderRatio)}static create(options,viewportStartLineNumber,viewportEndLineNumber,viewportStartLineNumberVerticalOffset,viewportHeight,viewportContainsWhitespaceGaps,lineCount,realLineCount,scrollTop,scrollHeight,previousLayout){const pixelRatio=options.pixelRatio,minimapLineHeight=options.minimapLineHeight,minimapLinesFitting=Math.floor(options.canvasInnerHeight/minimapLineHeight),lineHeight=options.lineHeight;if(options.minimapHeightIsEditorHeight){const logicalScrollHeight=realLineCount*options.lineHeight+(options.scrollBeyondLastLine?viewportHeight-options.lineHeight:0),sliderHeight=Math.max(1,Math.floor(viewportHeight*viewportHeight/logicalScrollHeight)),maxMinimapSliderTop=Math.max(0,options.minimapHeight-sliderHeight),computedSliderRatio=maxMinimapSliderTop/(scrollHeight-viewportHeight),sliderTop=scrollTop*computedSliderRatio,sliderNeeded=maxMinimapSliderTop>0,maxLinesFitting=Math.floor(options.canvasInnerHeight/options.minimapLineHeight);return new MinimapLayout(scrollTop,scrollHeight,sliderNeeded,computedSliderRatio,sliderTop,sliderHeight,1,Math.min(lineCount,maxLinesFitting))}let sliderHeight,maxMinimapSliderTop;if(viewportContainsWhitespaceGaps&&viewportEndLineNumber!==lineCount){const viewportLineCount=viewportEndLineNumber-viewportStartLineNumber+1;sliderHeight=Math.floor(viewportLineCount*minimapLineHeight/pixelRatio)}else{const expectedViewportLineCount=viewportHeight/lineHeight;sliderHeight=Math.floor(expectedViewportLineCount*minimapLineHeight/pixelRatio)}maxMinimapSliderTop=options.scrollBeyondLastLine?(lineCount-1)*minimapLineHeight/pixelRatio:Math.max(0,lineCount*minimapLineHeight/pixelRatio-sliderHeight),maxMinimapSliderTop=Math.min(options.minimapHeight-sliderHeight,maxMinimapSliderTop);const computedSliderRatio=maxMinimapSliderTop/(scrollHeight-viewportHeight),sliderTop=scrollTop*computedSliderRatio;let extraLinesAtTheBottom=0;if(options.scrollBeyondLastLine){extraLinesAtTheBottom=viewportHeight/lineHeight-1}if(minimapLinesFitting>=lineCount+extraLinesAtTheBottom){return new MinimapLayout(scrollTop,scrollHeight,maxMinimapSliderTop>0,computedSliderRatio,sliderTop,sliderHeight,1,lineCount)}{let startLineNumber=Math.max(1,Math.floor(viewportStartLineNumber-sliderTop*pixelRatio/minimapLineHeight));previousLayout&&previousLayout.scrollHeight===scrollHeight&&(previousLayout.scrollTop>scrollTop&&(startLineNumber=Math.min(startLineNumber,previousLayout.startLineNumber)),previousLayout.scrollTop<scrollTop&&(startLineNumber=Math.max(startLineNumber,previousLayout.startLineNumber)));const endLineNumber=Math.min(lineCount,startLineNumber+minimapLinesFitting-1);return new MinimapLayout(scrollTop,scrollHeight,!0,computedSliderRatio,(viewportStartLineNumber-startLineNumber+(scrollTop-viewportStartLineNumberVerticalOffset)/lineHeight)*minimapLineHeight/pixelRatio,sliderHeight,startLineNumber,endLineNumber)}}}class MinimapLine{constructor(dy){this.dy=dy}onContentChanged(){this.dy=-1}onTokensChanged(){this.dy=-1}}MinimapLine.INVALID=new MinimapLine(-1);class RenderData{constructor(renderedLayout,imageData,lines){this.renderedLayout=renderedLayout,this._imageData=imageData,this._renderedLines=new RenderedLinesCollection((()=>MinimapLine.INVALID)),this._renderedLines._set(renderedLayout.startLineNumber,lines)}linesEquals(layout){if(!this.scrollEquals(layout))return!1;const lines=this._renderedLines._get().lines;for(let i=0,len=lines.length;i<len;i++)if(-1===lines[i].dy)return!1;return!0}scrollEquals(layout){return this.renderedLayout.startLineNumber===layout.startLineNumber&&this.renderedLayout.endLineNumber===layout.endLineNumber}_get(){const tmp=this._renderedLines._get();return{imageData:this._imageData,rendLineNumberStart:tmp.rendLineNumberStart,lines:tmp.lines}}onLinesChanged(changeFromLineNumber,changeCount){return this._renderedLines.onLinesChanged(changeFromLineNumber,changeCount)}onLinesDeleted(deleteFromLineNumber,deleteToLineNumber){this._renderedLines.onLinesDeleted(deleteFromLineNumber,deleteToLineNumber)}onLinesInserted(insertFromLineNumber,insertToLineNumber){this._renderedLines.onLinesInserted(insertFromLineNumber,insertToLineNumber)}onTokensChanged(ranges){return this._renderedLines.onTokensChanged(ranges)}}class MinimapBuffers{constructor(ctx,WIDTH,HEIGHT,background){this._backgroundFillData=MinimapBuffers._createBackgroundFillData(WIDTH,HEIGHT,background),this._buffers=[ctx.createImageData(WIDTH,HEIGHT),ctx.createImageData(WIDTH,HEIGHT)],this._lastUsedBuffer=0}getBuffer(){this._lastUsedBuffer=1-this._lastUsedBuffer;const result=this._buffers[this._lastUsedBuffer];return result.data.set(this._backgroundFillData),result}static _createBackgroundFillData(WIDTH,HEIGHT,background){const backgroundR=background.r,backgroundG=background.g,backgroundB=background.b,backgroundA=background.a,result=new Uint8ClampedArray(WIDTH*HEIGHT*4);let offset=0;for(let i=0;i<HEIGHT;i++)for(let j=0;j<WIDTH;j++)result[offset]=backgroundR,result[offset+1]=backgroundG,result[offset+2]=backgroundB,result[offset+3]=backgroundA,offset+=4;return result}}class MinimapSamplingState{constructor(samplingRatio,minimapLines){this.samplingRatio=samplingRatio,this.minimapLines=minimapLines}static compute(options,viewLineCount,oldSamplingState){if(0===options.renderMinimap||!options.isSampling)return[null,[]];const pixelRatio=options.pixelRatio,lineHeight=options.lineHeight,scrollBeyondLastLine=options.scrollBeyondLastLine,{minimapLineCount}=EditorLayoutInfoComputer.computeContainedMinimapLineCount({viewLineCount,scrollBeyondLastLine,height:options.editorHeight,lineHeight,pixelRatio}),ratio=viewLineCount/minimapLineCount,halfRatio=ratio/2;if(!oldSamplingState||0===oldSamplingState.minimapLines.length){const result=[];if(result[0]=1,minimapLineCount>1){for(let i=0,lastIndex=minimapLineCount-1;i<lastIndex;i++)result[i]=Math.round(i*ratio+halfRatio);result[minimapLineCount-1]=viewLineCount}return[new MinimapSamplingState(ratio,result),[]]}const oldMinimapLines=oldSamplingState.minimapLines,oldLength=oldMinimapLines.length,result=[];let oldIndex=0,oldDeltaLineCount=0,minViewLineNumber=1;let events=[],lastEvent=null;for(let i=0;i<minimapLineCount;i++){const fromViewLineNumber=Math.max(minViewLineNumber,Math.round(i*ratio)),toViewLineNumber=Math.max(fromViewLineNumber,Math.round((i+1)*ratio));for(;oldIndex<oldLength&&oldMinimapLines[oldIndex]<fromViewLineNumber;){if(events.length<10){const oldMinimapLineNumber=oldIndex+1+oldDeltaLineCount;lastEvent&&"deleted"===lastEvent.type&&lastEvent._oldIndex===oldIndex-1?lastEvent.deleteToLineNumber++:(lastEvent={type:"deleted",_oldIndex:oldIndex,deleteFromLineNumber:oldMinimapLineNumber,deleteToLineNumber:oldMinimapLineNumber},events.push(lastEvent)),oldDeltaLineCount--}oldIndex++}let selectedViewLineNumber;if(oldIndex<oldLength&&oldMinimapLines[oldIndex]<=toViewLineNumber)selectedViewLineNumber=oldMinimapLines[oldIndex],oldIndex++;else if(selectedViewLineNumber=0===i?1:i+1===minimapLineCount?viewLineCount:Math.round(i*ratio+halfRatio),events.length<10){const oldMinimapLineNumber=oldIndex+1+oldDeltaLineCount;lastEvent&&"inserted"===lastEvent.type&&lastEvent._i===i-1?lastEvent.insertToLineNumber++:(lastEvent={type:"inserted",_i:i,insertFromLineNumber:oldMinimapLineNumber,insertToLineNumber:oldMinimapLineNumber},events.push(lastEvent)),oldDeltaLineCount++}result[i]=selectedViewLineNumber,minViewLineNumber=selectedViewLineNumber}if(events.length<10)for(;oldIndex<oldLength;){const oldMinimapLineNumber=oldIndex+1+oldDeltaLineCount;lastEvent&&"deleted"===lastEvent.type&&lastEvent._oldIndex===oldIndex-1?lastEvent.deleteToLineNumber++:(lastEvent={type:"deleted",_oldIndex:oldIndex,deleteFromLineNumber:oldMinimapLineNumber,deleteToLineNumber:oldMinimapLineNumber},events.push(lastEvent)),oldDeltaLineCount--,oldIndex++}else events=[{type:"flush"}];return[new MinimapSamplingState(ratio,result),events]}modelLineToMinimapLine(lineNumber){return Math.min(this.minimapLines.length,Math.max(1,Math.round(lineNumber/this.samplingRatio)))}modelLineRangeToMinimapLineRange(fromLineNumber,toLineNumber){let fromLineIndex=this.modelLineToMinimapLine(fromLineNumber)-1;for(;fromLineIndex>0&&this.minimapLines[fromLineIndex-1]>=fromLineNumber;)fromLineIndex--;let toLineIndex=this.modelLineToMinimapLine(toLineNumber)-1;for(;toLineIndex+1<this.minimapLines.length&&this.minimapLines[toLineIndex+1]<=toLineNumber;)toLineIndex++;if(fromLineIndex===toLineIndex){const sampledLineNumber=this.minimapLines[fromLineIndex];if(sampledLineNumber<fromLineNumber||sampledLineNumber>toLineNumber)return null}return[fromLineIndex+1,toLineIndex+1]}decorationLineRangeToMinimapLineRange(startLineNumber,endLineNumber){let minimapLineStart=this.modelLineToMinimapLine(startLineNumber),minimapLineEnd=this.modelLineToMinimapLine(endLineNumber);return startLineNumber!==endLineNumber&&minimapLineEnd===minimapLineStart&&(minimapLineEnd===this.minimapLines.length?minimapLineStart>1&&minimapLineStart--:minimapLineEnd++),[minimapLineStart,minimapLineEnd]}onLinesDeleted(e){const deletedLineCount=e.toLineNumber-e.fromLineNumber+1;let changeStartIndex=this.minimapLines.length,changeEndIndex=0;for(let i=this.minimapLines.length-1;i>=0&&!(this.minimapLines[i]<e.fromLineNumber);i--)this.minimapLines[i]<=e.toLineNumber?(this.minimapLines[i]=Math.max(1,e.fromLineNumber-1),changeStartIndex=Math.min(changeStartIndex,i),changeEndIndex=Math.max(changeEndIndex,i)):this.minimapLines[i]-=deletedLineCount;return[changeStartIndex,changeEndIndex]}onLinesInserted(e){const insertedLineCount=e.toLineNumber-e.fromLineNumber+1;for(let i=this.minimapLines.length-1;i>=0&&!(this.minimapLines[i]<e.fromLineNumber);i--)this.minimapLines[i]+=insertedLineCount}}export class Minimap extends ViewPart{constructor(context){super(context),this.tokensColorTracker=MinimapTokensColorTracker.getInstance(),this._selections=[],this._minimapSelections=null,this.options=new MinimapOptions(this._context.configuration,this._context.theme,this.tokensColorTracker);const[samplingState]=MinimapSamplingState.compute(this.options,this._context.viewModel.getLineCount(),null);this._samplingState=samplingState,this._shouldCheckSampling=!1,this._actual=new InnerMinimap(context.theme,this)}dispose(){this._actual.dispose(),super.dispose()}getDomNode(){return this._actual.getDomNode()}_onOptionsMaybeChanged(){const opts=new MinimapOptions(this._context.configuration,this._context.theme,this.tokensColorTracker);return!this.options.equals(opts)&&(this.options=opts,this._recreateLineSampling(),this._actual.onDidChangeOptions(),!0)}onConfigurationChanged(e){return this._onOptionsMaybeChanged()}onCursorStateChanged(e){return this._selections=e.selections,this._minimapSelections=null,this._actual.onSelectionChanged()}onDecorationsChanged(e){return!!e.affectsMinimap&&this._actual.onDecorationsChanged()}onFlushed(e){return this._samplingState&&(this._shouldCheckSampling=!0),this._actual.onFlushed()}onLinesChanged(e){if(this._samplingState){const minimapLineRange=this._samplingState.modelLineRangeToMinimapLineRange(e.fromLineNumber,e.fromLineNumber+e.count-1);return!!minimapLineRange&&this._actual.onLinesChanged(minimapLineRange[0],minimapLineRange[1]-minimapLineRange[0]+1)}return this._actual.onLinesChanged(e.fromLineNumber,e.count)}onLinesDeleted(e){if(this._samplingState){const[changeStartIndex,changeEndIndex]=this._samplingState.onLinesDeleted(e);return changeStartIndex<=changeEndIndex&&this._actual.onLinesChanged(changeStartIndex+1,changeEndIndex-changeStartIndex+1),this._shouldCheckSampling=!0,!0}return this._actual.onLinesDeleted(e.fromLineNumber,e.toLineNumber)}onLinesInserted(e){return this._samplingState?(this._samplingState.onLinesInserted(e),this._shouldCheckSampling=!0,!0):this._actual.onLinesInserted(e.fromLineNumber,e.toLineNumber)}onScrollChanged(e){return this._actual.onScrollChanged()}onThemeChanged(e){return this._actual.onThemeChanged(),this._onOptionsMaybeChanged(),!0}onTokensChanged(e){if(this._samplingState){const ranges=[];for(const range of e.ranges){const minimapLineRange=this._samplingState.modelLineRangeToMinimapLineRange(range.fromLineNumber,range.toLineNumber);minimapLineRange&&ranges.push({fromLineNumber:minimapLineRange[0],toLineNumber:minimapLineRange[1]})}return!!ranges.length&&this._actual.onTokensChanged(ranges)}return this._actual.onTokensChanged(e.ranges)}onTokensColorsChanged(e){return this._onOptionsMaybeChanged(),this._actual.onTokensColorsChanged()}onZonesChanged(e){return this._actual.onZonesChanged()}prepareRender(ctx){this._shouldCheckSampling&&(this._shouldCheckSampling=!1,this._recreateLineSampling())}render(ctx){let viewportStartLineNumber=ctx.visibleRange.startLineNumber,viewportEndLineNumber=ctx.visibleRange.endLineNumber;this._samplingState&&(viewportStartLineNumber=this._samplingState.modelLineToMinimapLine(viewportStartLineNumber),viewportEndLineNumber=this._samplingState.modelLineToMinimapLine(viewportEndLineNumber));const minimapCtx={viewportContainsWhitespaceGaps:ctx.viewportData.whitespaceViewportData.length>0,scrollWidth:ctx.scrollWidth,scrollHeight:ctx.scrollHeight,viewportStartLineNumber,viewportEndLineNumber,viewportStartLineNumberVerticalOffset:ctx.getVerticalOffsetForLineNumber(viewportStartLineNumber),scrollTop:ctx.scrollTop,scrollLeft:ctx.scrollLeft,viewportWidth:ctx.viewportWidth,viewportHeight:ctx.viewportHeight};this._actual.render(minimapCtx)}_recreateLineSampling(){this._minimapSelections=null;const wasSampling=Boolean(this._samplingState),[samplingState,events]=MinimapSamplingState.compute(this.options,this._context.viewModel.getLineCount(),this._samplingState);if(this._samplingState=samplingState,wasSampling&&this._samplingState)for(const event of events)switch(event.type){case"deleted":this._actual.onLinesDeleted(event.deleteFromLineNumber,event.deleteToLineNumber);break;case"inserted":this._actual.onLinesInserted(event.insertFromLineNumber,event.insertToLineNumber);break;case"flush":this._actual.onFlushed()}}getLineCount(){return this._samplingState?this._samplingState.minimapLines.length:this._context.viewModel.getLineCount()}getRealLineCount(){return this._context.viewModel.getLineCount()}getLineContent(lineNumber){return this._samplingState?this._context.viewModel.getLineContent(this._samplingState.minimapLines[lineNumber-1]):this._context.viewModel.getLineContent(lineNumber)}getLineMaxColumn(lineNumber){return this._samplingState?this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[lineNumber-1]):this._context.viewModel.getLineMaxColumn(lineNumber)}getMinimapLinesRenderingData(startLineNumber,endLineNumber,needed){if(this._samplingState){const result=[];for(let lineIndex=0,lineCount=endLineNumber-startLineNumber+1;lineIndex<lineCount;lineIndex++)needed[lineIndex]?result[lineIndex]=this._context.viewModel.getViewLineData(this._samplingState.minimapLines[startLineNumber+lineIndex-1]):result[lineIndex]=null;return result}return this._context.viewModel.getMinimapLinesRenderingData(startLineNumber,endLineNumber,needed).data}getSelections(){if(null===this._minimapSelections)if(this._samplingState){this._minimapSelections=[];for(const selection of this._selections){const[minimapLineStart,minimapLineEnd]=this._samplingState.decorationLineRangeToMinimapLineRange(selection.startLineNumber,selection.endLineNumber);this._minimapSelections.push(new Selection(minimapLineStart,selection.startColumn,minimapLineEnd,selection.endColumn))}}else this._minimapSelections=this._selections;return this._minimapSelections}getMinimapDecorationsInViewport(startLineNumber,endLineNumber){let visibleRange;if(this._samplingState){const modelStartLineNumber=this._samplingState.minimapLines[startLineNumber-1],modelEndLineNumber=this._samplingState.minimapLines[endLineNumber-1];visibleRange=new Range(modelStartLineNumber,1,modelEndLineNumber,this._context.viewModel.getLineMaxColumn(modelEndLineNumber))}else visibleRange=new Range(startLineNumber,1,endLineNumber,this._context.viewModel.getLineMaxColumn(endLineNumber));const decorations=this._context.viewModel.getDecorationsInViewport(visibleRange);if(this._samplingState){const result=[];for(const decoration of decorations){if(!decoration.options.minimap)continue;const range=decoration.range,minimapStartLineNumber=this._samplingState.modelLineToMinimapLine(range.startLineNumber),minimapEndLineNumber=this._samplingState.modelLineToMinimapLine(range.endLineNumber);result.push(new ViewModelDecoration(new Range(minimapStartLineNumber,range.startColumn,minimapEndLineNumber,range.endColumn),decoration.options))}return result}return decorations}getOptions(){return this._context.viewModel.model.getOptions()}revealLineNumber(lineNumber){this._samplingState&&(lineNumber=this._samplingState.minimapLines[lineNumber-1]),this._context.viewModel.revealRange("mouse",!1,new Range(lineNumber,1,lineNumber,1),1,0)}setScrollTop(scrollTop){this._context.viewModel.viewLayout.setScrollPosition({scrollTop},1)}}class InnerMinimap extends Disposable{constructor(theme,model){super(),this._renderDecorations=!1,this._gestureInProgress=!1,this._theme=theme,this._model=model,this._lastRenderData=null,this._buffers=null,this._selectionColor=this._theme.getColor(minimapSelection),this._domNode=createFastDomNode(document.createElement("div")),PartFingerprints.write(this._domNode,8),this._domNode.setClassName(this._getMinimapDomNodeClassName()),this._domNode.setPosition("absolute"),this._domNode.setAttribute("role","presentation"),this._domNode.setAttribute("aria-hidden","true"),this._shadow=createFastDomNode(document.createElement("div")),this._shadow.setClassName("minimap-shadow-hidden"),this._domNode.appendChild(this._shadow),this._canvas=createFastDomNode(document.createElement("canvas")),this._canvas.setPosition("absolute"),this._canvas.setLeft(0),this._domNode.appendChild(this._canvas),this._decorationsCanvas=createFastDomNode(document.createElement("canvas")),this._decorationsCanvas.setPosition("absolute"),this._decorationsCanvas.setClassName("minimap-decorations-layer"),this._decorationsCanvas.setLeft(0),this._domNode.appendChild(this._decorationsCanvas),this._slider=createFastDomNode(document.createElement("div")),this._slider.setPosition("absolute"),this._slider.setClassName("minimap-slider"),this._slider.setLayerHinting(!0),this._slider.setContain("strict"),this._domNode.appendChild(this._slider),this._sliderHorizontal=createFastDomNode(document.createElement("div")),this._sliderHorizontal.setPosition("absolute"),this._sliderHorizontal.setClassName("minimap-slider-horizontal"),this._slider.appendChild(this._sliderHorizontal),this._applyLayout(),this._pointerDownListener=dom.addStandardDisposableListener(this._domNode.domNode,dom.EventType.POINTER_DOWN,(e=>{e.preventDefault();if(0===this._model.options.renderMinimap)return;if(!this._lastRenderData)return;if("proportional"!==this._model.options.size){if(0===e.button&&this._lastRenderData){const position=dom.getDomNodePagePosition(this._slider.domNode),initialPosY=position.top+position.height/2;this._startSliderDragging(e,initialPosY,this._lastRenderData.renderedLayout)}return}const minimapLineHeight=this._model.options.minimapLineHeight,internalOffsetY=this._model.options.canvasInnerHeight/this._model.options.canvasOuterHeight*e.offsetY;let lineNumber=Math.floor(internalOffsetY/minimapLineHeight)+this._lastRenderData.renderedLayout.startLineNumber;lineNumber=Math.min(lineNumber,this._model.getLineCount()),this._model.revealLineNumber(lineNumber)})),this._sliderPointerMoveMonitor=new GlobalPointerMoveMonitor,this._sliderPointerDownListener=dom.addStandardDisposableListener(this._slider.domNode,dom.EventType.POINTER_DOWN,(e=>{e.preventDefault(),e.stopPropagation(),0===e.button&&this._lastRenderData&&this._startSliderDragging(e,e.pageY,this._lastRenderData.renderedLayout)})),this._gestureDisposable=Gesture.addTarget(this._domNode.domNode),this._sliderTouchStartListener=dom.addDisposableListener(this._domNode.domNode,EventType.Start,(e=>{e.preventDefault(),e.stopPropagation(),this._lastRenderData&&(this._slider.toggleClassName("active",!0),this._gestureInProgress=!0,this.scrollDueToTouchEvent(e))}),{passive:!1}),this._sliderTouchMoveListener=dom.addDisposableListener(this._domNode.domNode,EventType.Change,(e=>{e.preventDefault(),e.stopPropagation(),this._lastRenderData&&this._gestureInProgress&&this.scrollDueToTouchEvent(e)}),{passive:!1}),this._sliderTouchEndListener=dom.addStandardDisposableListener(this._domNode.domNode,EventType.End,(e=>{e.preventDefault(),e.stopPropagation(),this._gestureInProgress=!1,this._slider.toggleClassName("active",!1)}))}_startSliderDragging(e,initialPosY,initialSliderState){if(!(e.target&&e.target instanceof Element))return;const initialPosX=e.pageX;this._slider.toggleClassName("active",!0);const handlePointerMove=(posy,posx)=>{const pointerOrthogonalDelta=Math.abs(posx-initialPosX);if(platform.isWindows&&pointerOrthogonalDelta>140)return void this._model.setScrollTop(initialSliderState.scrollTop);const pointerDelta=posy-initialPosY;this._model.setScrollTop(initialSliderState.getDesiredScrollTopFromDelta(pointerDelta))};e.pageY!==initialPosY&&handlePointerMove(e.pageY,initialPosX),this._sliderPointerMoveMonitor.startMonitoring(e.target,e.pointerId,e.buttons,(pointerMoveData=>handlePointerMove(pointerMoveData.pageY,pointerMoveData.pageX)),(()=>{this._slider.toggleClassName("active",!1)}))}scrollDueToTouchEvent(touch){const startY=this._domNode.domNode.getBoundingClientRect().top,scrollTop=this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(touch.pageY-startY);this._model.setScrollTop(scrollTop)}dispose(){this._pointerDownListener.dispose(),this._sliderPointerMoveMonitor.dispose(),this._sliderPointerDownListener.dispose(),this._gestureDisposable.dispose(),this._sliderTouchStartListener.dispose(),this._sliderTouchMoveListener.dispose(),this._sliderTouchEndListener.dispose(),super.dispose()}_getMinimapDomNodeClassName(){const class_=["minimap"];return"always"===this._model.options.showSlider?class_.push("slider-always"):class_.push("slider-mouseover"),this._model.options.autohide&&class_.push("autohide"),class_.join(" ")}getDomNode(){return this._domNode}_applyLayout(){this._domNode.setLeft(this._model.options.minimapLeft),this._domNode.setWidth(this._model.options.minimapWidth),this._domNode.setHeight(this._model.options.minimapHeight),this._shadow.setHeight(this._model.options.minimapHeight),this._canvas.setWidth(this._model.options.canvasOuterWidth),this._canvas.setHeight(this._model.options.canvasOuterHeight),this._canvas.domNode.width=this._model.options.canvasInnerWidth,this._canvas.domNode.height=this._model.options.canvasInnerHeight,this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth),this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight),this._decorationsCanvas.domNode.width=this._model.options.canvasInnerWidth,this._decorationsCanvas.domNode.height=this._model.options.canvasInnerHeight,this._slider.setWidth(this._model.options.minimapWidth)}_getBuffer(){return this._buffers||this._model.options.canvasInnerWidth>0&&this._model.options.canvasInnerHeight>0&&(this._buffers=new MinimapBuffers(this._canvas.domNode.getContext("2d"),this._model.options.canvasInnerWidth,this._model.options.canvasInnerHeight,this._model.options.backgroundColor)),this._buffers?this._buffers.getBuffer():null}onDidChangeOptions(){this._lastRenderData=null,this._buffers=null,this._applyLayout(),this._domNode.setClassName(this._getMinimapDomNodeClassName())}onSelectionChanged(){return this._renderDecorations=!0,!0}onDecorationsChanged(){return this._renderDecorations=!0,!0}onFlushed(){return this._lastRenderData=null,!0}onLinesChanged(changeFromLineNumber,changeCount){return!!this._lastRenderData&&this._lastRenderData.onLinesChanged(changeFromLineNumber,changeCount)}onLinesDeleted(deleteFromLineNumber,deleteToLineNumber){var _a;return null===(_a=this._lastRenderData)||void 0===_a||_a.onLinesDeleted(deleteFromLineNumber,deleteToLineNumber),!0}onLinesInserted(insertFromLineNumber,insertToLineNumber){var _a;return null===(_a=this._lastRenderData)||void 0===_a||_a.onLinesInserted(insertFromLineNumber,insertToLineNumber),!0}onScrollChanged(){return this._renderDecorations=!0,!0}onThemeChanged(){return this._selectionColor=this._theme.getColor(minimapSelection),this._renderDecorations=!0,!0}onTokensChanged(ranges){return!!this._lastRenderData&&this._lastRenderData.onTokensChanged(ranges)}onTokensColorsChanged(){return this._lastRenderData=null,this._buffers=null,!0}onZonesChanged(){return this._lastRenderData=null,!0}render(renderingCtx){if(0===this._model.options.renderMinimap)return this._shadow.setClassName("minimap-shadow-hidden"),this._sliderHorizontal.setWidth(0),void this._sliderHorizontal.setHeight(0);renderingCtx.scrollLeft+renderingCtx.viewportWidth>=renderingCtx.scrollWidth?this._shadow.setClassName("minimap-shadow-hidden"):this._shadow.setClassName("minimap-shadow-visible");const layout=MinimapLayout.create(this._model.options,renderingCtx.viewportStartLineNumber,renderingCtx.viewportEndLineNumber,renderingCtx.viewportStartLineNumberVerticalOffset,renderingCtx.viewportHeight,renderingCtx.viewportContainsWhitespaceGaps,this._model.getLineCount(),this._model.getRealLineCount(),renderingCtx.scrollTop,renderingCtx.scrollHeight,this._lastRenderData?this._lastRenderData.renderedLayout:null);this._slider.setDisplay(layout.sliderNeeded?"block":"none"),this._slider.setTop(layout.sliderTop),this._slider.setHeight(layout.sliderHeight),this._sliderHorizontal.setLeft(0),this._sliderHorizontal.setWidth(this._model.options.minimapWidth),this._sliderHorizontal.setTop(0),this._sliderHorizontal.setHeight(layout.sliderHeight),this.renderDecorations(layout),this._lastRenderData=this.renderLines(layout)}renderDecorations(layout){if(this._renderDecorations){this._renderDecorations=!1;const selections=this._model.getSelections();selections.sort(Range.compareRangesUsingStarts);const decorations=this._model.getMinimapDecorationsInViewport(layout.startLineNumber,layout.endLineNumber);decorations.sort(((a,b)=>(a.options.zIndex||0)-(b.options.zIndex||0)));const{canvasInnerWidth,canvasInnerHeight}=this._model.options,lineHeight=this._model.options.minimapLineHeight,characterWidth=this._model.options.minimapCharWidth,tabSize=this._model.getOptions().tabSize,canvasContext=this._decorationsCanvas.domNode.getContext("2d");canvasContext.clearRect(0,0,canvasInnerWidth,canvasInnerHeight);const highlightedLines=new ContiguousLineMap(layout.startLineNumber,layout.endLineNumber,!1);this._renderSelectionLineHighlights(canvasContext,selections,highlightedLines,layout,lineHeight),this._renderDecorationsLineHighlights(canvasContext,decorations,highlightedLines,layout,lineHeight);const lineOffsetMap=new ContiguousLineMap(layout.startLineNumber,layout.endLineNumber,null);this._renderSelectionsHighlights(canvasContext,selections,lineOffsetMap,layout,lineHeight,tabSize,characterWidth,canvasInnerWidth),this._renderDecorationsHighlights(canvasContext,decorations,lineOffsetMap,layout,lineHeight,tabSize,characterWidth,canvasInnerWidth)}}_renderSelectionLineHighlights(canvasContext,selections,highlightedLines,layout,lineHeight){if(!this._selectionColor||this._selectionColor.isTransparent())return;canvasContext.fillStyle=this._selectionColor.transparent(.5).toString();let y1=0,y2=0;for(const selection of selections){const startLineNumber=Math.max(layout.startLineNumber,selection.startLineNumber),endLineNumber=Math.min(layout.endLineNumber,selection.endLineNumber);if(startLineNumber>endLineNumber)continue;for(let line=startLineNumber;line<=endLineNumber;line++)highlightedLines.set(line,!0);const yy1=(startLineNumber-layout.startLineNumber)*lineHeight,yy2=(endLineNumber-layout.startLineNumber)*lineHeight+lineHeight;y2>=yy1||(y2>y1&&canvasContext.fillRect(MINIMAP_GUTTER_WIDTH,y1,canvasContext.canvas.width,y2-y1),y1=yy1),y2=yy2}y2>y1&&canvasContext.fillRect(MINIMAP_GUTTER_WIDTH,y1,canvasContext.canvas.width,y2-y1)}_renderDecorationsLineHighlights(canvasContext,decorations,highlightedLines,layout,lineHeight){const highlightColors=new Map;for(let i=decorations.length-1;i>=0;i--){const decoration=decorations[i],minimapOptions=decoration.options.minimap;if(!minimapOptions||minimapOptions.position!==MinimapPosition.Inline)continue;const startLineNumber=Math.max(layout.startLineNumber,decoration.range.startLineNumber),endLineNumber=Math.min(layout.endLineNumber,decoration.range.endLineNumber);if(startLineNumber>endLineNumber)continue;const decorationColor=minimapOptions.getColor(this._theme.value);if(!decorationColor||decorationColor.isTransparent())continue;let highlightColor=highlightColors.get(decorationColor.toString());highlightColor||(highlightColor=decorationColor.transparent(.5).toString(),highlightColors.set(decorationColor.toString(),highlightColor)),canvasContext.fillStyle=highlightColor;for(let line=startLineNumber;line<=endLineNumber;line++){if(highlightedLines.has(line))continue;highlightedLines.set(line,!0);const y=(startLineNumber-layout.startLineNumber)*lineHeight;canvasContext.fillRect(MINIMAP_GUTTER_WIDTH,y,canvasContext.canvas.width,lineHeight)}}}_renderSelectionsHighlights(canvasContext,selections,lineOffsetMap,layout,lineHeight,tabSize,characterWidth,canvasInnerWidth){if(this._selectionColor&&!this._selectionColor.isTransparent())for(const selection of selections){const startLineNumber=Math.max(layout.startLineNumber,selection.startLineNumber),endLineNumber=Math.min(layout.endLineNumber,selection.endLineNumber);if(!(startLineNumber>endLineNumber))for(let line=startLineNumber;line<=endLineNumber;line++)this.renderDecorationOnLine(canvasContext,lineOffsetMap,selection,this._selectionColor,layout,line,lineHeight,lineHeight,tabSize,characterWidth,canvasInnerWidth)}}_renderDecorationsHighlights(canvasContext,decorations,lineOffsetMap,layout,lineHeight,tabSize,characterWidth,canvasInnerWidth){for(const decoration of decorations){const minimapOptions=decoration.options.minimap;if(!minimapOptions)continue;const startLineNumber=Math.max(layout.startLineNumber,decoration.range.startLineNumber),endLineNumber=Math.min(layout.endLineNumber,decoration.range.endLineNumber);if(startLineNumber>endLineNumber)continue;const decorationColor=minimapOptions.getColor(this._theme.value);if(decorationColor&&!decorationColor.isTransparent())for(let line=startLineNumber;line<=endLineNumber;line++)switch(minimapOptions.position){case MinimapPosition.Inline:this.renderDecorationOnLine(canvasContext,lineOffsetMap,decoration.range,decorationColor,layout,line,lineHeight,lineHeight,tabSize,characterWidth,canvasInnerWidth);continue;case MinimapPosition.Gutter:{const y=(line-layout.startLineNumber)*lineHeight,x=2;this.renderDecoration(canvasContext,decorationColor,x,y,2,lineHeight);continue}}}}renderDecorationOnLine(canvasContext,lineOffsetMap,decorationRange,decorationColor,layout,lineNumber,height,lineHeight,tabSize,charWidth,canvasInnerWidth){const y=(lineNumber-layout.startLineNumber)*lineHeight;if(y+height<0||y>this._model.options.canvasInnerHeight)return;const{startLineNumber,endLineNumber}=decorationRange,startColumn=startLineNumber===lineNumber?decorationRange.startColumn:1,endColumn=endLineNumber===lineNumber?decorationRange.endColumn:this._model.getLineMaxColumn(lineNumber),x1=this.getXOffsetForPosition(lineOffsetMap,lineNumber,startColumn,tabSize,charWidth,canvasInnerWidth),x2=this.getXOffsetForPosition(lineOffsetMap,lineNumber,endColumn,tabSize,charWidth,canvasInnerWidth);this.renderDecoration(canvasContext,decorationColor,x1,y,x2-x1,height)}getXOffsetForPosition(lineOffsetMap,lineNumber,column,tabSize,charWidth,canvasInnerWidth){if(1===column)return MINIMAP_GUTTER_WIDTH;if((column-1)*charWidth>=canvasInnerWidth)return canvasInnerWidth;let lineIndexToXOffset=lineOffsetMap.get(lineNumber);if(!lineIndexToXOffset){const lineData=this._model.getLineContent(lineNumber);lineIndexToXOffset=[MINIMAP_GUTTER_WIDTH];let prevx=MINIMAP_GUTTER_WIDTH;for(let i=1;i<lineData.length+1;i++){const charCode=lineData.charCodeAt(i-1),x=prevx+(9===charCode?tabSize*charWidth:strings.isFullWidthCharacter(charCode)?2*charWidth:charWidth);if(x>=canvasInnerWidth){lineIndexToXOffset[i]=canvasInnerWidth;break}lineIndexToXOffset[i]=x,prevx=x}lineOffsetMap.set(lineNumber,lineIndexToXOffset)}return column-1<lineIndexToXOffset.length?lineIndexToXOffset[column-1]:canvasInnerWidth}renderDecoration(canvasContext,decorationColor,x,y,width,height){canvasContext.fillStyle=decorationColor&&decorationColor.toString()||"",canvasContext.fillRect(x,y,width,height)}renderLines(layout){const startLineNumber=layout.startLineNumber,endLineNumber=layout.endLineNumber,minimapLineHeight=this._model.options.minimapLineHeight;if(this._lastRenderData&&this._lastRenderData.linesEquals(layout)){const _lastData=this._lastRenderData._get();return new RenderData(layout,_lastData.imageData,_lastData.lines)}const imageData=this._getBuffer();if(!imageData)return null;const[_dirtyY1,_dirtyY2,needed]=InnerMinimap._renderUntouchedLines(imageData,startLineNumber,endLineNumber,minimapLineHeight,this._lastRenderData),lineInfo=this._model.getMinimapLinesRenderingData(startLineNumber,endLineNumber,needed),tabSize=this._model.getOptions().tabSize,defaultBackground=this._model.options.defaultBackgroundColor,background=this._model.options.backgroundColor,foregroundAlpha=this._model.options.foregroundAlpha,tokensColorTracker=this._model.tokensColorTracker,useLighterFont=tokensColorTracker.backgroundIsLight(),renderMinimap=this._model.options.renderMinimap,charRenderer=this._model.options.charRenderer(),fontScale=this._model.options.fontScale,minimapCharWidth=this._model.options.minimapCharWidth,renderMinimapLineHeight=(1===renderMinimap?2:3)*fontScale,innerLinePadding=minimapLineHeight>renderMinimapLineHeight?Math.floor((minimapLineHeight-renderMinimapLineHeight)/2):0,backgroundA=background.a/255,renderBackground=new RGBA8(Math.round((background.r-defaultBackground.r)*backgroundA+defaultBackground.r),Math.round((background.g-defaultBackground.g)*backgroundA+defaultBackground.g),Math.round((background.b-defaultBackground.b)*backgroundA+defaultBackground.b),255);let dy=0;const renderedLines=[];for(let lineIndex=0,lineCount=endLineNumber-startLineNumber+1;lineIndex<lineCount;lineIndex++)needed[lineIndex]&&InnerMinimap._renderLine(imageData,renderBackground,background.a,useLighterFont,renderMinimap,minimapCharWidth,tokensColorTracker,foregroundAlpha,charRenderer,dy,innerLinePadding,tabSize,lineInfo[lineIndex],fontScale,minimapLineHeight),renderedLines[lineIndex]=new MinimapLine(dy),dy+=minimapLineHeight;const dirtyY1=-1===_dirtyY1?0:_dirtyY1,dirtyHeight=(-1===_dirtyY2?imageData.height:_dirtyY2)-dirtyY1;return this._canvas.domNode.getContext("2d").putImageData(imageData,0,0,0,dirtyY1,imageData.width,dirtyHeight),new RenderData(layout,imageData,renderedLines)}static _renderUntouchedLines(target,startLineNumber,endLineNumber,minimapLineHeight,lastRenderData){const needed=[];if(!lastRenderData){for(let i=0,len=endLineNumber-startLineNumber+1;i<len;i++)needed[i]=!0;return[-1,-1,needed]}const _lastData=lastRenderData._get(),lastTargetData=_lastData.imageData.data,lastStartLineNumber=_lastData.rendLineNumberStart,lastLines=_lastData.lines,lastLinesLength=lastLines.length,WIDTH=target.width,targetData=target.data,maxDestPixel=(endLineNumber-startLineNumber+1)*minimapLineHeight*WIDTH*4;let dirtyPixel1=-1,dirtyPixel2=-1,copySourceStart=-1,copySourceEnd=-1,copyDestStart=-1,copyDestEnd=-1,dest_dy=0;for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){const lineIndex=lineNumber-startLineNumber,lastLineIndex=lineNumber-lastStartLineNumber,source_dy=lastLineIndex>=0&&lastLineIndex<lastLinesLength?lastLines[lastLineIndex].dy:-1;if(-1===source_dy){needed[lineIndex]=!0,dest_dy+=minimapLineHeight;continue}const sourceStart=source_dy*WIDTH*4,sourceEnd=(source_dy+minimapLineHeight)*WIDTH*4,destStart=dest_dy*WIDTH*4,destEnd=(dest_dy+minimapLineHeight)*WIDTH*4;copySourceEnd===sourceStart&&copyDestEnd===destStart?(copySourceEnd=sourceEnd,copyDestEnd=destEnd):(-1!==copySourceStart&&(targetData.set(lastTargetData.subarray(copySourceStart,copySourceEnd),copyDestStart),-1===dirtyPixel1&&0===copySourceStart&&copySourceStart===copyDestStart&&(dirtyPixel1=copySourceEnd),-1===dirtyPixel2&&copySourceEnd===maxDestPixel&&copySourceStart===copyDestStart&&(dirtyPixel2=copySourceStart)),copySourceStart=sourceStart,copySourceEnd=sourceEnd,copyDestStart=destStart,copyDestEnd=destEnd),needed[lineIndex]=!1,dest_dy+=minimapLineHeight}-1!==copySourceStart&&(targetData.set(lastTargetData.subarray(copySourceStart,copySourceEnd),copyDestStart),-1===dirtyPixel1&&0===copySourceStart&&copySourceStart===copyDestStart&&(dirtyPixel1=copySourceEnd),-1===dirtyPixel2&&copySourceEnd===maxDestPixel&&copySourceStart===copyDestStart&&(dirtyPixel2=copySourceStart));return[-1===dirtyPixel1?-1:dirtyPixel1/(4*WIDTH),-1===dirtyPixel2?-1:dirtyPixel2/(4*WIDTH),needed]}static _renderLine(target,backgroundColor,backgroundAlpha,useLighterFont,renderMinimap,charWidth,colorTracker,foregroundAlpha,minimapCharRenderer,dy,innerLinePadding,tabSize,lineData,fontScale,minimapLineHeight){const content=lineData.content,tokens=lineData.tokens,maxDx=target.width-charWidth,force1pxHeight=1===minimapLineHeight;let dx=MINIMAP_GUTTER_WIDTH,charIndex=0,tabsCharDelta=0;for(let tokenIndex=0,tokensLen=tokens.getCount();tokenIndex<tokensLen;tokenIndex++){const tokenEndIndex=tokens.getEndOffset(tokenIndex),tokenColorId=tokens.getForeground(tokenIndex),tokenColor=colorTracker.getColor(tokenColorId);for(;charIndex<tokenEndIndex;charIndex++){if(dx>maxDx)return;const charCode=content.charCodeAt(charIndex);if(9===charCode){const insertSpacesCount=tabSize-(charIndex+tabsCharDelta)%tabSize;tabsCharDelta+=insertSpacesCount-1,dx+=insertSpacesCount*charWidth}else if(32===charCode)dx+=charWidth;else{const count=strings.isFullWidthCharacter(charCode)?2:1;for(let i=0;i<count;i++)if(2===renderMinimap?minimapCharRenderer.blockRenderChar(target,dx,dy+innerLinePadding,tokenColor,foregroundAlpha,backgroundColor,backgroundAlpha,force1pxHeight):minimapCharRenderer.renderChar(target,dx,dy+innerLinePadding,charCode,tokenColor,foregroundAlpha,backgroundColor,backgroundAlpha,fontScale,useLighterFont,force1pxHeight),dx+=charWidth,dx>maxDx)return}}}}}class ContiguousLineMap{constructor(startLineNumber,endLineNumber,defaultValue){this._startLineNumber=startLineNumber,this._endLineNumber=endLineNumber,this._defaultValue=defaultValue,this._values=[];for(let i=0,count=this._endLineNumber-this._startLineNumber+1;i<count;i++)this._values[i]=defaultValue}has(lineNumber){return this.get(lineNumber)!==this._defaultValue}set(lineNumber,value){lineNumber<this._startLineNumber||lineNumber>this._endLineNumber||(this._values[lineNumber-this._startLineNumber]=value)}get(lineNumber){return lineNumber<this._startLineNumber||lineNumber>this._endLineNumber?this._defaultValue:this._values[lineNumber-this._startLineNumber]}}registerThemingParticipant(((theme,collector)=>{const sliderBackground=theme.getColor(minimapSliderBackground);sliderBackground&&collector.addRule(`.monaco-editor .minimap-slider .minimap-slider-horizontal { background: ${sliderBackground}; }`);const sliderHoverBackground=theme.getColor(minimapSliderHoverBackground);sliderHoverBackground&&collector.addRule(`.monaco-editor .minimap-slider:hover .minimap-slider-horizontal { background: ${sliderHoverBackground}; }`);const sliderActiveBackground=theme.getColor(minimapSliderActiveBackground);sliderActiveBackground&&collector.addRule(`.monaco-editor .minimap-slider.active .minimap-slider-horizontal { background: ${sliderActiveBackground}; }`);const shadow=theme.getColor(scrollbarShadow);shadow&&collector.addRule(`.monaco-editor .minimap-shadow-visible { box-shadow: ${shadow} -6px 0 6px -6px inset; }`)}));