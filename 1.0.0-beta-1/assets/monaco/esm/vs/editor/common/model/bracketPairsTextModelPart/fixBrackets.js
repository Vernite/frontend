import{LanguageAgnosticBracketTokens}from"./bracketPairsTree/brackets.js";import{lengthAdd,lengthGetColumnCountIfZeroLineCount,lengthZero}from"./bracketPairsTree/length.js";import{parseDocument}from"./bracketPairsTree/parser.js";import{DenseKeyProvider}from"./bracketPairsTree/smallImmutableSet.js";import{TextBufferTokenizer}from"./bracketPairsTree/tokenizer.js";export function fixBracketsInLine(tokens,languageConfigurationService){const denseKeyProvider=new DenseKeyProvider,bracketTokens=new LanguageAgnosticBracketTokens(denseKeyProvider,(languageId=>languageConfigurationService.getLanguageConfiguration(languageId))),tokenizer=new TextBufferTokenizer(new StaticTokenizerSource([tokens]),bracketTokens),node=parseDocument(tokenizer,[],void 0,!0);let str="";const line=tokens.getLineContent();return function processNode(node,offset){if(2===node.kind)if(processNode(node.openingBracket,offset),offset=lengthAdd(offset,node.openingBracket.length),node.child&&(processNode(node.child,offset),offset=lengthAdd(offset,node.child.length)),node.closingBracket)processNode(node.closingBracket,offset),offset=lengthAdd(offset,node.closingBracket.length);else{const closingTokenText=bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId).findClosingTokenText(node.openingBracket.bracketIds);str+=closingTokenText}else if(3===node.kind);else if(0===node.kind||1===node.kind)str+=line.substring(lengthGetColumnCountIfZeroLineCount(offset),lengthGetColumnCountIfZeroLineCount(lengthAdd(offset,node.length)));else if(4===node.kind)for(const child of node.children)processNode(child,offset),offset=lengthAdd(offset,child.length)}(node,lengthZero),str}class StaticTokenizerSource{constructor(lines){this.lines=lines,this.tokenization={getLineTokens:lineNumber=>this.lines[lineNumber-1]}}getLineCount(){return this.lines.length}getLineLength(lineNumber){return this.lines[lineNumber-1].getLineContent().length}}