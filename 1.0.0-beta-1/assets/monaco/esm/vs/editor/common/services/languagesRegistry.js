import{onUnexpectedError}from"../../../base/common/errors.js";import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{regExpLeadsToEndlessLoop}from"../../../base/common/strings.js";import{clearPlatformLanguageAssociations,getLanguageIds,registerPlatformLanguageAssociation}from"./languagesAssociations.js";import{ModesRegistry,PLAINTEXT_LANGUAGE_ID}from"../languages/modesRegistry.js";import{Extensions}from"../../../platform/configuration/common/configurationRegistry.js";import{Registry}from"../../../platform/registry/common/platform.js";const hasOwnProperty=Object.prototype.hasOwnProperty,NULL_LANGUAGE_ID="vs.editor.nullLanguage";export class LanguageIdCodec{constructor(){this._languageIdToLanguage=[],this._languageToLanguageId=new Map,this._register(NULL_LANGUAGE_ID,0),this._register(PLAINTEXT_LANGUAGE_ID,1),this._nextLanguageId=2}_register(language,languageId){this._languageIdToLanguage[languageId]=language,this._languageToLanguageId.set(language,languageId)}register(language){if(this._languageToLanguageId.has(language))return;const languageId=this._nextLanguageId++;this._register(language,languageId)}encodeLanguageId(languageId){return this._languageToLanguageId.get(languageId)||0}decodeLanguageId(languageId){return this._languageIdToLanguage[languageId]||NULL_LANGUAGE_ID}}export class LanguagesRegistry extends Disposable{constructor(useModesRegistry=!0,warnOnOverwrite=!1){super(),this._onDidChange=this._register(new Emitter),this.onDidChange=this._onDidChange.event,LanguagesRegistry.instanceCount++,this._warnOnOverwrite=warnOnOverwrite,this.languageIdCodec=new LanguageIdCodec,this._dynamicLanguages=[],this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},useModesRegistry&&(this._initializeFromRegistry(),this._register(ModesRegistry.onDidChangeLanguages((m=>{this._initializeFromRegistry()}))))}dispose(){LanguagesRegistry.instanceCount--,super.dispose()}_initializeFromRegistry(){this._languages={},this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},clearPlatformLanguageAssociations();const desc=[].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);this._registerLanguages(desc)}_registerLanguages(desc){for(const d of desc)this._registerLanguage(d);this._mimeTypesMap={},this._nameMap={},this._lowercaseNameMap={},Object.keys(this._languages).forEach((langId=>{const language=this._languages[langId];language.name&&(this._nameMap[language.name]=language.identifier),language.aliases.forEach((alias=>{this._lowercaseNameMap[alias.toLowerCase()]=language.identifier})),language.mimetypes.forEach((mimetype=>{this._mimeTypesMap[mimetype]=language.identifier}))})),Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds()),this._onDidChange.fire()}_registerLanguage(lang){const langId=lang.id;let resolvedLanguage;hasOwnProperty.call(this._languages,langId)?resolvedLanguage=this._languages[langId]:(this.languageIdCodec.register(langId),resolvedLanguage={identifier:langId,name:null,mimetypes:[],aliases:[],extensions:[],filenames:[],configurationFiles:[],icons:[]},this._languages[langId]=resolvedLanguage),this._mergeLanguage(resolvedLanguage,lang)}_mergeLanguage(resolvedLanguage,lang){const langId=lang.id;let primaryMime=null;if(Array.isArray(lang.mimetypes)&&lang.mimetypes.length>0&&(resolvedLanguage.mimetypes.push(...lang.mimetypes),primaryMime=lang.mimetypes[0]),primaryMime||(primaryMime=`text/x-${langId}`,resolvedLanguage.mimetypes.push(primaryMime)),Array.isArray(lang.extensions)){lang.configuration?resolvedLanguage.extensions=lang.extensions.concat(resolvedLanguage.extensions):resolvedLanguage.extensions=resolvedLanguage.extensions.concat(lang.extensions);for(const extension of lang.extensions)registerPlatformLanguageAssociation({id:langId,mime:primaryMime,extension},this._warnOnOverwrite)}if(Array.isArray(lang.filenames))for(const filename of lang.filenames)registerPlatformLanguageAssociation({id:langId,mime:primaryMime,filename},this._warnOnOverwrite),resolvedLanguage.filenames.push(filename);if(Array.isArray(lang.filenamePatterns))for(const filenamePattern of lang.filenamePatterns)registerPlatformLanguageAssociation({id:langId,mime:primaryMime,filepattern:filenamePattern},this._warnOnOverwrite);if("string"==typeof lang.firstLine&&lang.firstLine.length>0){let firstLineRegexStr=lang.firstLine;"^"!==firstLineRegexStr.charAt(0)&&(firstLineRegexStr="^"+firstLineRegexStr);try{const firstLineRegex=new RegExp(firstLineRegexStr);regExpLeadsToEndlessLoop(firstLineRegex)||registerPlatformLanguageAssociation({id:langId,mime:primaryMime,firstline:firstLineRegex},this._warnOnOverwrite)}catch(err){onUnexpectedError(err)}}resolvedLanguage.aliases.push(langId);let langAliases=null;if(void 0!==lang.aliases&&Array.isArray(lang.aliases)&&(langAliases=0===lang.aliases.length?[null]:lang.aliases),null!==langAliases)for(const langAlias of langAliases)langAlias&&0!==langAlias.length&&resolvedLanguage.aliases.push(langAlias);const containsAliases=null!==langAliases&&langAliases.length>0;if(containsAliases&&null===langAliases[0]);else{const bestName=(containsAliases?langAliases[0]:null)||langId;!containsAliases&&resolvedLanguage.name||(resolvedLanguage.name=bestName)}lang.configuration&&resolvedLanguage.configurationFiles.push(lang.configuration),lang.icon&&resolvedLanguage.icons.push(lang.icon)}isRegisteredLanguageId(languageId){return!!languageId&&hasOwnProperty.call(this._languages,languageId)}getRegisteredLanguageIds(){return Object.keys(this._languages)}getLanguageIdByLanguageName(languageName){const languageNameLower=languageName.toLowerCase();return hasOwnProperty.call(this._lowercaseNameMap,languageNameLower)?this._lowercaseNameMap[languageNameLower]:null}getLanguageIdByMimeType(mimeType){return mimeType&&hasOwnProperty.call(this._mimeTypesMap,mimeType)?this._mimeTypesMap[mimeType]:null}guessLanguageIdByFilepathOrFirstLine(resource,firstLine){return resource||firstLine?getLanguageIds(resource,firstLine):[]}}LanguagesRegistry.instanceCount=0;