import{Emitter}from"../../../base/common/event.js";import{Disposable}from"../../../base/common/lifecycle.js";import{Scrollable}from"../../../base/common/scrollable.js";import{LinesLayout}from"./linesLayout.js";import{Viewport}from"../viewModel.js";import{ContentSizeChangedEvent}from"../viewModelEventDispatcher.js";const SMOOTH_SCROLLING_TIME=125;class EditorScrollDimensions{constructor(width,contentWidth,height,contentHeight){(width|=0)<0&&(width=0),(contentWidth|=0)<0&&(contentWidth=0),(height|=0)<0&&(height=0),(contentHeight|=0)<0&&(contentHeight=0),this.width=width,this.contentWidth=contentWidth,this.scrollWidth=Math.max(width,contentWidth),this.height=height,this.contentHeight=contentHeight,this.scrollHeight=Math.max(height,contentHeight)}equals(other){return this.width===other.width&&this.contentWidth===other.contentWidth&&this.height===other.height&&this.contentHeight===other.contentHeight}}class EditorScrollable extends Disposable{constructor(smoothScrollDuration,scheduleAtNextAnimationFrame){super(),this._onDidContentSizeChange=this._register(new Emitter),this.onDidContentSizeChange=this._onDidContentSizeChange.event,this._dimensions=new EditorScrollDimensions(0,0,0,0),this._scrollable=this._register(new Scrollable({forceIntegerValues:!0,smoothScrollDuration,scheduleAtNextAnimationFrame})),this.onDidScroll=this._scrollable.onScroll}getScrollable(){return this._scrollable}setSmoothScrollDuration(smoothScrollDuration){this._scrollable.setSmoothScrollDuration(smoothScrollDuration)}validateScrollPosition(scrollPosition){return this._scrollable.validateScrollPosition(scrollPosition)}getScrollDimensions(){return this._dimensions}setScrollDimensions(dimensions){if(this._dimensions.equals(dimensions))return;const oldDimensions=this._dimensions;this._dimensions=dimensions,this._scrollable.setScrollDimensions({width:dimensions.width,scrollWidth:dimensions.scrollWidth,height:dimensions.height,scrollHeight:dimensions.scrollHeight},!0);const contentWidthChanged=oldDimensions.contentWidth!==dimensions.contentWidth,contentHeightChanged=oldDimensions.contentHeight!==dimensions.contentHeight;(contentWidthChanged||contentHeightChanged)&&this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth,oldDimensions.contentHeight,dimensions.contentWidth,dimensions.contentHeight))}getFutureScrollPosition(){return this._scrollable.getFutureScrollPosition()}getCurrentScrollPosition(){return this._scrollable.getCurrentScrollPosition()}setScrollPositionNow(update){this._scrollable.setScrollPositionNow(update)}setScrollPositionSmooth(update){this._scrollable.setScrollPositionSmooth(update)}}export class ViewLayout extends Disposable{constructor(configuration,lineCount,scheduleAtNextAnimationFrame){super(),this._configuration=configuration;const options=this._configuration.options,layoutInfo=options.get(133),padding=options.get(77);this._linesLayout=new LinesLayout(lineCount,options.get(61),padding.top,padding.bottom),this._scrollable=this._register(new EditorScrollable(0,scheduleAtNextAnimationFrame)),this._configureSmoothScrollDuration(),this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth,0,layoutInfo.height,0)),this.onDidScroll=this._scrollable.onDidScroll,this.onDidContentSizeChange=this._scrollable.onDidContentSizeChange,this._updateHeight()}dispose(){super.dispose()}getScrollable(){return this._scrollable.getScrollable()}onHeightMaybeChanged(){this._updateHeight()}_configureSmoothScrollDuration(){this._scrollable.setSmoothScrollDuration(this._configuration.options.get(105)?125:0)}onConfigurationChanged(e){const options=this._configuration.options;if(e.hasChanged(61)&&this._linesLayout.setLineHeight(options.get(61)),e.hasChanged(77)){const padding=options.get(77);this._linesLayout.setPadding(padding.top,padding.bottom)}if(e.hasChanged(133)){const layoutInfo=options.get(133),width=layoutInfo.contentWidth,height=layoutInfo.height,scrollDimensions=this._scrollable.getScrollDimensions(),contentWidth=scrollDimensions.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(width,scrollDimensions.contentWidth,height,this._getContentHeight(width,height,contentWidth)))}else this._updateHeight();e.hasChanged(105)&&this._configureSmoothScrollDuration()}onFlushed(lineCount){this._linesLayout.onFlushed(lineCount)}onLinesDeleted(fromLineNumber,toLineNumber){this._linesLayout.onLinesDeleted(fromLineNumber,toLineNumber)}onLinesInserted(fromLineNumber,toLineNumber){this._linesLayout.onLinesInserted(fromLineNumber,toLineNumber)}_getHorizontalScrollbarHeight(width,scrollWidth){const scrollbar=this._configuration.options.get(94);return 2===scrollbar.horizontal||width>=scrollWidth?0:scrollbar.horizontalScrollbarSize}_getContentHeight(width,height,contentWidth){const options=this._configuration.options;let result=this._linesLayout.getLinesTotalHeight();return options.get(96)?result+=Math.max(0,height-options.get(61)-options.get(77).bottom):result+=this._getHorizontalScrollbarHeight(width,contentWidth),result}_updateHeight(){const scrollDimensions=this._scrollable.getScrollDimensions(),width=scrollDimensions.width,height=scrollDimensions.height,contentWidth=scrollDimensions.contentWidth;this._scrollable.setScrollDimensions(new EditorScrollDimensions(width,scrollDimensions.contentWidth,height,this._getContentHeight(width,height,contentWidth)))}getCurrentViewport(){const scrollDimensions=this._scrollable.getScrollDimensions(),currentScrollPosition=this._scrollable.getCurrentScrollPosition();return new Viewport(currentScrollPosition.scrollTop,currentScrollPosition.scrollLeft,scrollDimensions.width,scrollDimensions.height)}getFutureViewport(){const scrollDimensions=this._scrollable.getScrollDimensions(),currentScrollPosition=this._scrollable.getFutureScrollPosition();return new Viewport(currentScrollPosition.scrollTop,currentScrollPosition.scrollLeft,scrollDimensions.width,scrollDimensions.height)}_computeContentWidth(maxLineWidth){const options=this._configuration.options,wrappingInfo=options.get(134),fontInfo=options.get(46),layoutInfo=options.get(133);if(wrappingInfo.isViewportWrapping){const minimap=options.get(67);return maxLineWidth>layoutInfo.contentWidth+fontInfo.typicalHalfwidthCharacterWidth&&minimap.enabled&&"right"===minimap.side?maxLineWidth+layoutInfo.verticalScrollbarWidth:maxLineWidth}{const extraHorizontalSpace=options.get(95)*fontInfo.typicalHalfwidthCharacterWidth,whitespaceMinWidth=this._linesLayout.getWhitespaceMinWidth();return Math.max(maxLineWidth+extraHorizontalSpace+layoutInfo.verticalScrollbarWidth,whitespaceMinWidth)}}setMaxLineWidth(maxLineWidth){const scrollDimensions=this._scrollable.getScrollDimensions();this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width,this._computeContentWidth(maxLineWidth),scrollDimensions.height,scrollDimensions.contentHeight)),this._updateHeight()}saveState(){const currentScrollPosition=this._scrollable.getFutureScrollPosition(),scrollTop=currentScrollPosition.scrollTop,firstLineNumberInViewport=this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);return{scrollTop,scrollTopWithoutViewZones:scrollTop-this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport),scrollLeft:currentScrollPosition.scrollLeft}}changeWhitespace(callback){const hadAChange=this._linesLayout.changeWhitespace(callback);return hadAChange&&this.onHeightMaybeChanged(),hadAChange}getVerticalOffsetForLineNumber(lineNumber,includeViewZones=!1){return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber,includeViewZones)}getVerticalOffsetAfterLineNumber(lineNumber,includeViewZones=!1){return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber,includeViewZones)}isAfterLines(verticalOffset){return this._linesLayout.isAfterLines(verticalOffset)}isInTopPadding(verticalOffset){return this._linesLayout.isInTopPadding(verticalOffset)}isInBottomPadding(verticalOffset){return this._linesLayout.isInBottomPadding(verticalOffset)}getLineNumberAtVerticalOffset(verticalOffset){return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset)}getWhitespaceAtVerticalOffset(verticalOffset){return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset)}getLinesViewportData(){const visibleBox=this.getCurrentViewport();return this._linesLayout.getLinesViewportData(visibleBox.top,visibleBox.top+visibleBox.height)}getLinesViewportDataAtScrollTop(scrollTop){const scrollDimensions=this._scrollable.getScrollDimensions();return scrollTop+scrollDimensions.height>scrollDimensions.scrollHeight&&(scrollTop=scrollDimensions.scrollHeight-scrollDimensions.height),scrollTop<0&&(scrollTop=0),this._linesLayout.getLinesViewportData(scrollTop,scrollTop+scrollDimensions.height)}getWhitespaceViewportData(){const visibleBox=this.getCurrentViewport();return this._linesLayout.getWhitespaceViewportData(visibleBox.top,visibleBox.top+visibleBox.height)}getWhitespaces(){return this._linesLayout.getWhitespaces()}getContentWidth(){return this._scrollable.getScrollDimensions().contentWidth}getScrollWidth(){return this._scrollable.getScrollDimensions().scrollWidth}getContentHeight(){return this._scrollable.getScrollDimensions().contentHeight}getScrollHeight(){return this._scrollable.getScrollDimensions().scrollHeight}getCurrentScrollLeft(){return this._scrollable.getCurrentScrollPosition().scrollLeft}getCurrentScrollTop(){return this._scrollable.getCurrentScrollPosition().scrollTop}validateScrollPosition(scrollPosition){return this._scrollable.validateScrollPosition(scrollPosition)}setScrollPosition(position,type){1===type?this._scrollable.setScrollPositionNow(position):this._scrollable.setScrollPositionSmooth(position)}deltaScrollNow(deltaScrollLeft,deltaScrollTop){const currentScrollPosition=this._scrollable.getCurrentScrollPosition();this._scrollable.setScrollPositionNow({scrollLeft:currentScrollPosition.scrollLeft+deltaScrollLeft,scrollTop:currentScrollPosition.scrollTop+deltaScrollTop})}}