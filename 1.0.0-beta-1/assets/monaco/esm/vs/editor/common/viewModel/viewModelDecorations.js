import{Position}from"../core/position.js";import{Range}from"../core/range.js";import{InlineDecoration,ViewModelDecoration}from"../viewModel.js";import{filterValidationDecorations}from"../config/editorOptions.js";export class ViewModelDecorations{constructor(editorId,model,configuration,linesCollection,coordinatesConverter){this.editorId=editorId,this.model=model,this.configuration=configuration,this._linesCollection=linesCollection,this._coordinatesConverter=coordinatesConverter,this._decorationsCache=Object.create(null),this._cachedModelDecorationsResolver=null,this._cachedModelDecorationsResolverViewRange=null}_clearCachedModelDecorationsResolver(){this._cachedModelDecorationsResolver=null,this._cachedModelDecorationsResolverViewRange=null}dispose(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}reset(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}onModelDecorationsChanged(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}onLineMappingChanged(){this._decorationsCache=Object.create(null),this._clearCachedModelDecorationsResolver()}_getOrCreateViewModelDecoration(modelDecoration){const id=modelDecoration.id;let r=this._decorationsCache[id];if(!r){const modelRange=modelDecoration.range,options=modelDecoration.options;let viewRange;if(options.isWholeLine){const start=this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber,1),0),end=this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber,this.model.getLineMaxColumn(modelRange.endLineNumber)),1);viewRange=new Range(start.lineNumber,start.column,end.lineNumber,end.column)}else viewRange=this._coordinatesConverter.convertModelRangeToViewRange(modelRange,1);r=new ViewModelDecoration(viewRange,options),this._decorationsCache[id]=r}return r}getDecorationsViewportData(viewRange){let cacheIsValid=null!==this._cachedModelDecorationsResolver;return cacheIsValid=cacheIsValid&&viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange),cacheIsValid||(this._cachedModelDecorationsResolver=this._getDecorationsInRange(viewRange),this._cachedModelDecorationsResolverViewRange=viewRange),this._cachedModelDecorationsResolver}getInlineDecorationsOnLine(lineNumber){const range=new Range(lineNumber,this._linesCollection.getViewLineMinColumn(lineNumber),lineNumber,this._linesCollection.getViewLineMaxColumn(lineNumber));return this._getDecorationsInRange(range).inlineDecorations[0]}_getDecorationsInRange(viewRange){const modelDecorations=this._linesCollection.getDecorationsInRange(viewRange,this.editorId,filterValidationDecorations(this.configuration.options)),startLineNumber=viewRange.startLineNumber,endLineNumber=viewRange.endLineNumber,decorationsInViewport=[];let decorationsInViewportLen=0;const inlineDecorations=[];for(let j=startLineNumber;j<=endLineNumber;j++)inlineDecorations[j-startLineNumber]=[];for(let i=0,len=modelDecorations.length;i<len;i++){const modelDecoration=modelDecorations[i],decorationOptions=modelDecoration.options;if(!isModelDecorationVisible(this.model,modelDecoration))continue;const viewModelDecoration=this._getOrCreateViewModelDecoration(modelDecoration),viewRange=viewModelDecoration.range;if(decorationsInViewport[decorationsInViewportLen++]=viewModelDecoration,decorationOptions.inlineClassName){const inlineDecoration=new InlineDecoration(viewRange,decorationOptions.inlineClassName,decorationOptions.inlineClassNameAffectsLetterSpacing?3:0),intersectedStartLineNumber=Math.max(startLineNumber,viewRange.startLineNumber),intersectedEndLineNumber=Math.min(endLineNumber,viewRange.endLineNumber);for(let j=intersectedStartLineNumber;j<=intersectedEndLineNumber;j++)inlineDecorations[j-startLineNumber].push(inlineDecoration)}if(decorationOptions.beforeContentClassName&&startLineNumber<=viewRange.startLineNumber&&viewRange.startLineNumber<=endLineNumber){const inlineDecoration=new InlineDecoration(new Range(viewRange.startLineNumber,viewRange.startColumn,viewRange.startLineNumber,viewRange.startColumn),decorationOptions.beforeContentClassName,1);inlineDecorations[viewRange.startLineNumber-startLineNumber].push(inlineDecoration)}if(decorationOptions.afterContentClassName&&startLineNumber<=viewRange.endLineNumber&&viewRange.endLineNumber<=endLineNumber){const inlineDecoration=new InlineDecoration(new Range(viewRange.endLineNumber,viewRange.endColumn,viewRange.endLineNumber,viewRange.endColumn),decorationOptions.afterContentClassName,2);inlineDecorations[viewRange.endLineNumber-startLineNumber].push(inlineDecoration)}}return{decorations:decorationsInViewport,inlineDecorations}}}export function isModelDecorationVisible(model,decoration){return(!decoration.options.hideInCommentTokens||!isModelDecorationInComment(model,decoration))&&(!decoration.options.hideInStringTokens||!isModelDecorationInString(model,decoration))}export function isModelDecorationInComment(model,decoration){return testTokensInRange(model,decoration.range,(tokenType=>1===tokenType))}export function isModelDecorationInString(model,decoration){return testTokensInRange(model,decoration.range,(tokenType=>2===tokenType))}function testTokensInRange(model,range,callback){for(let lineNumber=range.startLineNumber;lineNumber<=range.endLineNumber;lineNumber++){const lineTokens=model.tokenization.getLineTokens(lineNumber),isFirstLine=lineNumber===range.startLineNumber,isEndLine=lineNumber===range.endLineNumber;let tokenIdx=isFirstLine?lineTokens.findTokenIndexAtOffset(range.startColumn-1):0;for(;tokenIdx<lineTokens.getCount();){if(isEndLine){if(lineTokens.getStartOffset(tokenIdx)>range.endColumn-1)break}if(!callback(lineTokens.getStandardTokenType(tokenIdx)))return!1;tokenIdx++}}return!0}