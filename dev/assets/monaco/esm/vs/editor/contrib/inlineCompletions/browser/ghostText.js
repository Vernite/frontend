import{Emitter}from"../../../../base/common/event.js";import{Disposable}from"../../../../base/common/lifecycle.js";import{applyEdits}from"./utils.js";export class GhostText{constructor(lineNumber,parts,additionalReservedLineCount=0){this.lineNumber=lineNumber,this.parts=parts,this.additionalReservedLineCount=additionalReservedLineCount}renderForScreenReader(lineText){if(0===this.parts.length)return"";const lastPart=this.parts[this.parts.length-1],cappedLineText=lineText.substr(0,lastPart.column-1);return applyEdits(cappedLineText,this.parts.map((p=>({range:{startLineNumber:1,endLineNumber:1,startColumn:p.column,endColumn:p.column},text:p.lines.join("\n")})))).substring(this.parts[0].column-1)}isEmpty(){return this.parts.every((p=>0===p.lines.length))}}export class GhostTextPart{constructor(column,lines,preview){this.column=column,this.lines=lines,this.preview=preview}}export class GhostTextReplacement{constructor(lineNumber,columnStart,length,newLines,additionalReservedLineCount=0){this.lineNumber=lineNumber,this.columnStart=columnStart,this.length=length,this.newLines=newLines,this.additionalReservedLineCount=additionalReservedLineCount,this.parts=[new GhostTextPart(this.columnStart+this.length,this.newLines,!1)]}renderForScreenReader(_lineText){return this.newLines.join("\n")}}export class BaseGhostTextWidgetModel extends Disposable{constructor(editor){super(),this.editor=editor,this._expanded=void 0,this.onDidChangeEmitter=new Emitter,this.onDidChange=this.onDidChangeEmitter.event,this._register(editor.onDidChangeConfiguration((e=>{e.hasChanged(108)&&void 0===this._expanded&&this.onDidChangeEmitter.fire()})))}setExpanded(expanded){this._expanded=!0,this.onDidChangeEmitter.fire()}}