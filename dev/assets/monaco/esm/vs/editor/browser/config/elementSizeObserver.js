import{Disposable}from"../../../base/common/lifecycle.js";import{Emitter}from"../../../base/common/event.js";export class ElementSizeObserver extends Disposable{constructor(referenceDomElement,dimension){super(),this._onDidChange=this._register(new Emitter),this.onDidChange=this._onDidChange.event,this._referenceDomElement=referenceDomElement,this._width=-1,this._height=-1,this._resizeObserver=null,this.measureReferenceDomElement(!1,dimension)}dispose(){this.stopObserving(),super.dispose()}getWidth(){return this._width}getHeight(){return this._height}startObserving(){!this._resizeObserver&&this._referenceDomElement&&(this._resizeObserver=new ResizeObserver((entries=>{entries&&entries[0]&&entries[0].contentRect?this.observe({width:entries[0].contentRect.width,height:entries[0].contentRect.height}):this.observe()})),this._resizeObserver.observe(this._referenceDomElement))}stopObserving(){this._resizeObserver&&(this._resizeObserver.disconnect(),this._resizeObserver=null)}observe(dimension){this.measureReferenceDomElement(!0,dimension)}measureReferenceDomElement(emitEvent,dimension){let observedWidth=0,observedHeight=0;dimension?(observedWidth=dimension.width,observedHeight=dimension.height):this._referenceDomElement&&(observedWidth=this._referenceDomElement.clientWidth,observedHeight=this._referenceDomElement.clientHeight),observedWidth=Math.max(5,observedWidth),observedHeight=Math.max(5,observedHeight),this._width===observedWidth&&this._height===observedHeight||(this._width=observedWidth,this._height=observedHeight,emitEvent&&this._onDidChange.fire())}}