var _a;import{createFastDomNode}from"../../../base/browser/fastDomNode.js";import{createStringBuilder}from"../../common/core/stringBuilder.js";export class RenderedLinesCollection{constructor(createLine){this._createLine=createLine,this._set(1,[])}flush(){this._set(1,[])}_set(rendLineNumberStart,lines){this._lines=lines,this._rendLineNumberStart=rendLineNumberStart}_get(){return{rendLineNumberStart:this._rendLineNumberStart,lines:this._lines}}getStartLineNumber(){return this._rendLineNumberStart}getEndLineNumber(){return this._rendLineNumberStart+this._lines.length-1}getCount(){return this._lines.length}getLine(lineNumber){const lineIndex=lineNumber-this._rendLineNumberStart;if(lineIndex<0||lineIndex>=this._lines.length)throw new Error("Illegal value for lineNumber");return this._lines[lineIndex]}onLinesDeleted(deleteFromLineNumber,deleteToLineNumber){if(0===this.getCount())return null;const startLineNumber=this.getStartLineNumber(),endLineNumber=this.getEndLineNumber();if(deleteToLineNumber<startLineNumber){const deleteCnt=deleteToLineNumber-deleteFromLineNumber+1;return this._rendLineNumberStart-=deleteCnt,null}if(deleteFromLineNumber>endLineNumber)return null;let deleteStartIndex=0,deleteCount=0;for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){const lineIndex=lineNumber-this._rendLineNumberStart;deleteFromLineNumber<=lineNumber&&lineNumber<=deleteToLineNumber&&(0===deleteCount?(deleteStartIndex=lineIndex,deleteCount=1):deleteCount++)}if(deleteFromLineNumber<startLineNumber){let deleteAboveCount=0;deleteAboveCount=deleteToLineNumber<startLineNumber?deleteToLineNumber-deleteFromLineNumber+1:startLineNumber-deleteFromLineNumber,this._rendLineNumberStart-=deleteAboveCount}return this._lines.splice(deleteStartIndex,deleteCount)}onLinesChanged(changeFromLineNumber,changeCount){const changeToLineNumber=changeFromLineNumber+changeCount-1;if(0===this.getCount())return!1;const startLineNumber=this.getStartLineNumber(),endLineNumber=this.getEndLineNumber();let someoneNotified=!1;for(let changedLineNumber=changeFromLineNumber;changedLineNumber<=changeToLineNumber;changedLineNumber++)changedLineNumber>=startLineNumber&&changedLineNumber<=endLineNumber&&(this._lines[changedLineNumber-this._rendLineNumberStart].onContentChanged(),someoneNotified=!0);return someoneNotified}onLinesInserted(insertFromLineNumber,insertToLineNumber){if(0===this.getCount())return null;const insertCnt=insertToLineNumber-insertFromLineNumber+1,startLineNumber=this.getStartLineNumber(),endLineNumber=this.getEndLineNumber();if(insertFromLineNumber<=startLineNumber)return this._rendLineNumberStart+=insertCnt,null;if(insertFromLineNumber>endLineNumber)return null;if(insertCnt+insertFromLineNumber>endLineNumber){return this._lines.splice(insertFromLineNumber-this._rendLineNumberStart,endLineNumber-insertFromLineNumber+1)}const newLines=[];for(let i=0;i<insertCnt;i++)newLines[i]=this._createLine();const insertIndex=insertFromLineNumber-this._rendLineNumberStart,beforeLines=this._lines.slice(0,insertIndex),afterLines=this._lines.slice(insertIndex,this._lines.length-insertCnt),deletedLines=this._lines.slice(this._lines.length-insertCnt,this._lines.length);return this._lines=beforeLines.concat(newLines).concat(afterLines),deletedLines}onTokensChanged(ranges){if(0===this.getCount())return!1;const startLineNumber=this.getStartLineNumber(),endLineNumber=this.getEndLineNumber();let notifiedSomeone=!1;for(let i=0,len=ranges.length;i<len;i++){const rng=ranges[i];if(rng.toLineNumber<startLineNumber||rng.fromLineNumber>endLineNumber)continue;const from=Math.max(startLineNumber,rng.fromLineNumber),to=Math.min(endLineNumber,rng.toLineNumber);for(let lineNumber=from;lineNumber<=to;lineNumber++){const lineIndex=lineNumber-this._rendLineNumberStart;this._lines[lineIndex].onTokensChanged(),notifiedSomeone=!0}}return notifiedSomeone}}export class VisibleLinesCollection{constructor(host){this._host=host,this.domNode=this._createDomNode(),this._linesCollection=new RenderedLinesCollection((()=>this._host.createVisibleLine()))}_createDomNode(){const domNode=createFastDomNode(document.createElement("div"));return domNode.setClassName("view-layer"),domNode.setPosition("absolute"),domNode.domNode.setAttribute("role","presentation"),domNode.domNode.setAttribute("aria-hidden","true"),domNode}onConfigurationChanged(e){return!!e.hasChanged(133)}onFlushed(e){return this._linesCollection.flush(),!0}onLinesChanged(e){return this._linesCollection.onLinesChanged(e.fromLineNumber,e.count)}onLinesDeleted(e){const deleted=this._linesCollection.onLinesDeleted(e.fromLineNumber,e.toLineNumber);if(deleted)for(let i=0,len=deleted.length;i<len;i++){const lineDomNode=deleted[i].getDomNode();lineDomNode&&this.domNode.domNode.removeChild(lineDomNode)}return!0}onLinesInserted(e){const deleted=this._linesCollection.onLinesInserted(e.fromLineNumber,e.toLineNumber);if(deleted)for(let i=0,len=deleted.length;i<len;i++){const lineDomNode=deleted[i].getDomNode();lineDomNode&&this.domNode.domNode.removeChild(lineDomNode)}return!0}onScrollChanged(e){return e.scrollTopChanged}onTokensChanged(e){return this._linesCollection.onTokensChanged(e.ranges)}onZonesChanged(e){return!0}getStartLineNumber(){return this._linesCollection.getStartLineNumber()}getEndLineNumber(){return this._linesCollection.getEndLineNumber()}getVisibleLine(lineNumber){return this._linesCollection.getLine(lineNumber)}renderLines(viewportData){const inp=this._linesCollection._get(),renderer=new ViewLayerRenderer(this.domNode.domNode,this._host,viewportData),ctx={rendLineNumberStart:inp.rendLineNumberStart,lines:inp.lines,linesLength:inp.lines.length},resCtx=renderer.render(ctx,viewportData.startLineNumber,viewportData.endLineNumber,viewportData.relativeVerticalOffset);this._linesCollection._set(resCtx.rendLineNumberStart,resCtx.lines)}}class ViewLayerRenderer{constructor(domNode,host,viewportData){this.domNode=domNode,this.host=host,this.viewportData=viewportData}render(inContext,startLineNumber,stopLineNumber,deltaTop){const ctx={rendLineNumberStart:inContext.rendLineNumberStart,lines:inContext.lines.slice(0),linesLength:inContext.linesLength};if(ctx.rendLineNumberStart+ctx.linesLength-1<startLineNumber||stopLineNumber<ctx.rendLineNumberStart){ctx.rendLineNumberStart=startLineNumber,ctx.linesLength=stopLineNumber-startLineNumber+1,ctx.lines=[];for(let x=startLineNumber;x<=stopLineNumber;x++)ctx.lines[x-startLineNumber]=this.host.createVisibleLine();return this._finishRendering(ctx,!0,deltaTop),ctx}if(this._renderUntouchedLines(ctx,Math.max(startLineNumber-ctx.rendLineNumberStart,0),Math.min(stopLineNumber-ctx.rendLineNumberStart,ctx.linesLength-1),deltaTop,startLineNumber),ctx.rendLineNumberStart>startLineNumber){const fromLineNumber=startLineNumber,toLineNumber=Math.min(stopLineNumber,ctx.rendLineNumberStart-1);fromLineNumber<=toLineNumber&&(this._insertLinesBefore(ctx,fromLineNumber,toLineNumber,deltaTop,startLineNumber),ctx.linesLength+=toLineNumber-fromLineNumber+1)}else if(ctx.rendLineNumberStart<startLineNumber){const removeCnt=Math.min(ctx.linesLength,startLineNumber-ctx.rendLineNumberStart);removeCnt>0&&(this._removeLinesBefore(ctx,removeCnt),ctx.linesLength-=removeCnt)}if(ctx.rendLineNumberStart=startLineNumber,ctx.rendLineNumberStart+ctx.linesLength-1<stopLineNumber){const fromLineNumber=ctx.rendLineNumberStart+ctx.linesLength,toLineNumber=stopLineNumber;fromLineNumber<=toLineNumber&&(this._insertLinesAfter(ctx,fromLineNumber,toLineNumber,deltaTop,startLineNumber),ctx.linesLength+=toLineNumber-fromLineNumber+1)}else if(ctx.rendLineNumberStart+ctx.linesLength-1>stopLineNumber){const fromLineNumber=Math.max(0,stopLineNumber-ctx.rendLineNumberStart+1),removeCnt=ctx.linesLength-1-fromLineNumber+1;removeCnt>0&&(this._removeLinesAfter(ctx,removeCnt),ctx.linesLength-=removeCnt)}return this._finishRendering(ctx,!1,deltaTop),ctx}_renderUntouchedLines(ctx,startIndex,endIndex,deltaTop,deltaLN){const rendLineNumberStart=ctx.rendLineNumberStart,lines=ctx.lines;for(let i=startIndex;i<=endIndex;i++){const lineNumber=rendLineNumberStart+i;lines[i].layoutLine(lineNumber,deltaTop[lineNumber-deltaLN])}}_insertLinesBefore(ctx,fromLineNumber,toLineNumber,deltaTop,deltaLN){const newLines=[];let newLinesLen=0;for(let lineNumber=fromLineNumber;lineNumber<=toLineNumber;lineNumber++)newLines[newLinesLen++]=this.host.createVisibleLine();ctx.lines=newLines.concat(ctx.lines)}_removeLinesBefore(ctx,removeCount){for(let i=0;i<removeCount;i++){const lineDomNode=ctx.lines[i].getDomNode();lineDomNode&&this.domNode.removeChild(lineDomNode)}ctx.lines.splice(0,removeCount)}_insertLinesAfter(ctx,fromLineNumber,toLineNumber,deltaTop,deltaLN){const newLines=[];let newLinesLen=0;for(let lineNumber=fromLineNumber;lineNumber<=toLineNumber;lineNumber++)newLines[newLinesLen++]=this.host.createVisibleLine();ctx.lines=ctx.lines.concat(newLines)}_removeLinesAfter(ctx,removeCount){const removeIndex=ctx.linesLength-removeCount;for(let i=0;i<removeCount;i++){const lineDomNode=ctx.lines[removeIndex+i].getDomNode();lineDomNode&&this.domNode.removeChild(lineDomNode)}ctx.lines.splice(removeIndex,removeCount)}_finishRenderingNewLines(ctx,domNodeIsEmpty,newLinesHTML,wasNew){ViewLayerRenderer._ttPolicy&&(newLinesHTML=ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML));const lastChild=this.domNode.lastChild;domNodeIsEmpty||!lastChild?this.domNode.innerHTML=newLinesHTML:lastChild.insertAdjacentHTML("afterend",newLinesHTML);let currChild=this.domNode.lastChild;for(let i=ctx.linesLength-1;i>=0;i--){const line=ctx.lines[i];wasNew[i]&&(line.setDomNode(currChild),currChild=currChild.previousSibling)}}_finishRenderingInvalidLines(ctx,invalidLinesHTML,wasInvalid){const hugeDomNode=document.createElement("div");ViewLayerRenderer._ttPolicy&&(invalidLinesHTML=ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML)),hugeDomNode.innerHTML=invalidLinesHTML;for(let i=0;i<ctx.linesLength;i++){const line=ctx.lines[i];if(wasInvalid[i]){const source=hugeDomNode.firstChild,lineDomNode=line.getDomNode();lineDomNode.parentNode.replaceChild(source,lineDomNode),line.setDomNode(source)}}}_finishRendering(ctx,domNodeIsEmpty,deltaTop){const sb=ViewLayerRenderer._sb,linesLength=ctx.linesLength,lines=ctx.lines,rendLineNumberStart=ctx.rendLineNumberStart,wasNew=[];{sb.reset();let hadNewLine=!1;for(let i=0;i<linesLength;i++){const line=lines[i];wasNew[i]=!1;if(line.getDomNode())continue;line.renderLine(i+rendLineNumberStart,deltaTop[i],this.viewportData,sb)&&(wasNew[i]=!0,hadNewLine=!0)}hadNewLine&&this._finishRenderingNewLines(ctx,domNodeIsEmpty,sb.build(),wasNew)}{sb.reset();let hadInvalidLine=!1;const wasInvalid=[];for(let i=0;i<linesLength;i++){const line=lines[i];if(wasInvalid[i]=!1,wasNew[i])continue;line.renderLine(i+rendLineNumberStart,deltaTop[i],this.viewportData,sb)&&(wasInvalid[i]=!0,hadInvalidLine=!0)}hadInvalidLine&&this._finishRenderingInvalidLines(ctx,sb.build(),wasInvalid)}}}ViewLayerRenderer._ttPolicy=null===(_a=window.trustedTypes)||void 0===_a?void 0:_a.createPolicy("editorViewLayer",{createHTML:value=>value}),ViewLayerRenderer._sb=createStringBuilder(1e5);