import{createDecorator}from"../../../platform/instantiation/common/instantiation.js";import{URI}from"../../../base/common/uri.js";import{isObject}from"../../../base/common/types.js";export const IBulkEditService=createDecorator("IWorkspaceEditService");export class ResourceEdit{constructor(metadata){this.metadata=metadata}static convert(edit){return edit.edits.map((edit=>{if(ResourceTextEdit.is(edit))return ResourceTextEdit.lift(edit);if(ResourceFileEdit.is(edit))return ResourceFileEdit.lift(edit);throw new Error("Unsupported edit")}))}}export class ResourceTextEdit extends ResourceEdit{constructor(resource,textEdit,versionId,metadata){super(metadata),this.resource=resource,this.textEdit=textEdit,this.versionId=versionId}static is(candidate){return candidate instanceof ResourceTextEdit||isObject(candidate)&&URI.isUri(candidate.resource)&&isObject(candidate.textEdit)}static lift(edit){return edit instanceof ResourceTextEdit?edit:new ResourceTextEdit(edit.resource,edit.textEdit,edit.versionId,edit.metadata)}}export class ResourceFileEdit extends ResourceEdit{constructor(oldResource,newResource,options={},metadata){super(metadata),this.oldResource=oldResource,this.newResource=newResource,this.options=options}static is(candidate){return candidate instanceof ResourceFileEdit||isObject(candidate)&&(Boolean(candidate.newResource)||Boolean(candidate.oldResource))}static lift(edit){return edit instanceof ResourceFileEdit?edit:new ResourceFileEdit(edit.oldResource,edit.newResource,edit.options,edit.metadata)}}