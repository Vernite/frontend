export function isFuzzyActionArr(what){return Array.isArray(what)}export function isFuzzyAction(what){return!isFuzzyActionArr(what)}export function isString(what){return"string"==typeof what}export function isIAction(what){return!isString(what)}export function empty(s){return!s}export function fixCase(lexer,str){return lexer.ignoreCase&&str?str.toLowerCase():str}export function sanitize(s){return s.replace(/[&<>'"_]/g,"-")}export function log(lexer,msg){console.log(`${lexer.languageId}: ${msg}`)}export function createError(lexer,msg){return new Error(`${lexer.languageId}: ${msg}`)}export function substituteMatches(lexer,str,id,matches,state){let stateMatches=null;return str.replace(/\$((\$)|(#)|(\d\d?)|[sS](\d\d?)|@(\w+))/g,(function(full,sub,dollar,hash,n,s,attr,ofs,total){return empty(dollar)?empty(hash)?!empty(n)&&n<matches.length?fixCase(lexer,matches[n]):!empty(attr)&&lexer&&"string"==typeof lexer[attr]?lexer[attr]:(null===stateMatches&&(stateMatches=state.split("."),stateMatches.unshift(state)),!empty(s)&&s<stateMatches.length?fixCase(lexer,stateMatches[s]):""):fixCase(lexer,id):"$"}))}export function findRules(lexer,inState){let state=inState;for(;state&&state.length>0;){const rules=lexer.tokenizer[state];if(rules)return rules;const idx=state.lastIndexOf(".");state=idx<0?null:state.substr(0,idx)}return null}export function stateExists(lexer,inState){let state=inState;for(;state&&state.length>0;){if(lexer.stateNames[state])return!0;const idx=state.lastIndexOf(".");state=idx<0?null:state.substr(0,idx)}return!1}