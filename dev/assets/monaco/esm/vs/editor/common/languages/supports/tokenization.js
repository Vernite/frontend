import{Color}from"../../../../base/common/color.js";export class ParsedTokenThemeRule{constructor(token,index,fontStyle,foreground,background){this._parsedThemeRuleBrand=void 0,this.token=token,this.index=index,this.fontStyle=fontStyle,this.foreground=foreground,this.background=background}}export function parseTokenTheme(source){if(!source||!Array.isArray(source))return[];const result=[];let resultLen=0;for(let i=0,len=source.length;i<len;i++){const entry=source[i];let fontStyle=-1;if("string"==typeof entry.fontStyle){fontStyle=0;const segments=entry.fontStyle.split(" ");for(let j=0,lenJ=segments.length;j<lenJ;j++){switch(segments[j]){case"italic":fontStyle|=1;break;case"bold":fontStyle|=2;break;case"underline":fontStyle|=4;break;case"strikethrough":fontStyle|=8}}}let foreground=null;"string"==typeof entry.foreground&&(foreground=entry.foreground);let background=null;"string"==typeof entry.background&&(background=entry.background),result[resultLen++]=new ParsedTokenThemeRule(entry.token||"",i,fontStyle,foreground,background)}return result}function resolveParsedTokenThemeRules(parsedThemeRules,customTokenColors){parsedThemeRules.sort(((a,b)=>{const r=strcmp(a.token,b.token);return 0!==r?r:a.index-b.index}));let defaultFontStyle=0,defaultForeground="000000",defaultBackground="ffffff";for(;parsedThemeRules.length>=1&&""===parsedThemeRules[0].token;){const incomingDefaults=parsedThemeRules.shift();-1!==incomingDefaults.fontStyle&&(defaultFontStyle=incomingDefaults.fontStyle),null!==incomingDefaults.foreground&&(defaultForeground=incomingDefaults.foreground),null!==incomingDefaults.background&&(defaultBackground=incomingDefaults.background)}const colorMap=new ColorMap;for(const color of customTokenColors)colorMap.getId(color);const foregroundColorId=colorMap.getId(defaultForeground),backgroundColorId=colorMap.getId(defaultBackground),defaults=new ThemeTrieElementRule(defaultFontStyle,foregroundColorId,backgroundColorId),root=new ThemeTrieElement(defaults);for(let i=0,len=parsedThemeRules.length;i<len;i++){const rule=parsedThemeRules[i];root.insert(rule.token,rule.fontStyle,colorMap.getId(rule.foreground),colorMap.getId(rule.background))}return new TokenTheme(colorMap,root)}const colorRegExp=/^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;export class ColorMap{constructor(){this._lastColorId=0,this._id2color=[],this._color2id=new Map}getId(color){if(null===color)return 0;const match=color.match(colorRegExp);if(!match)throw new Error("Illegal value for token color: "+color);color=match[1].toUpperCase();let value=this._color2id.get(color);return value||(value=++this._lastColorId,this._color2id.set(color,value),this._id2color[value]=Color.fromHex("#"+color),value)}getColorMap(){return this._id2color.slice(0)}}export class TokenTheme{constructor(colorMap,root){this._colorMap=colorMap,this._root=root,this._cache=new Map}static createFromRawTokenTheme(source,customTokenColors){return this.createFromParsedTokenTheme(parseTokenTheme(source),customTokenColors)}static createFromParsedTokenTheme(source,customTokenColors){return resolveParsedTokenThemeRules(source,customTokenColors)}getColorMap(){return this._colorMap.getColorMap()}_match(token){return this._root.match(token)}match(languageId,token){let result=this._cache.get(token);if(void 0===result){const rule=this._match(token),standardToken=toStandardTokenType(token);result=(rule.metadata|standardToken<<8)>>>0,this._cache.set(token,result)}return(result|languageId<<0)>>>0}}const STANDARD_TOKEN_TYPE_REGEXP=/\b(comment|string|regex|regexp)\b/;export function toStandardTokenType(tokenType){const m=tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);if(!m)return 0;switch(m[1]){case"comment":return 1;case"string":return 2;case"regex":case"regexp":return 3}throw new Error("Unexpected match for standard token type!")}export function strcmp(a,b){return a<b?-1:a>b?1:0}export class ThemeTrieElementRule{constructor(fontStyle,foreground,background){this._themeTrieElementRuleBrand=void 0,this._fontStyle=fontStyle,this._foreground=foreground,this._background=background,this.metadata=(this._fontStyle<<11|this._foreground<<15|this._background<<24)>>>0}clone(){return new ThemeTrieElementRule(this._fontStyle,this._foreground,this._background)}acceptOverwrite(fontStyle,foreground,background){-1!==fontStyle&&(this._fontStyle=fontStyle),0!==foreground&&(this._foreground=foreground),0!==background&&(this._background=background),this.metadata=(this._fontStyle<<11|this._foreground<<15|this._background<<24)>>>0}}export class ThemeTrieElement{constructor(mainRule){this._themeTrieElementBrand=void 0,this._mainRule=mainRule,this._children=new Map}match(token){if(""===token)return this._mainRule;const dotIndex=token.indexOf(".");let head,tail;-1===dotIndex?(head=token,tail=""):(head=token.substring(0,dotIndex),tail=token.substring(dotIndex+1));const child=this._children.get(head);return void 0!==child?child.match(tail):this._mainRule}insert(token,fontStyle,foreground,background){if(""===token)return void this._mainRule.acceptOverwrite(fontStyle,foreground,background);const dotIndex=token.indexOf(".");let head,tail;-1===dotIndex?(head=token,tail=""):(head=token.substring(0,dotIndex),tail=token.substring(dotIndex+1));let child=this._children.get(head);void 0===child&&(child=new ThemeTrieElement(this._mainRule.clone()),this._children.set(head,child)),child.insert(tail,fontStyle,foreground,background)}}export function generateTokensCSSForColorMap(colorMap){const rules=[];for(let i=1,len=colorMap.length;i<len;i++){const color=colorMap[i];rules[i]=`.mtk${i} { color: ${color}; }`}return rules.push(".mtki { font-style: italic; }"),rules.push(".mtkb { font-weight: bold; }"),rules.push(".mtku { text-decoration: underline; text-underline-position: under; }"),rules.push(".mtks { text-decoration: line-through; }"),rules.push(".mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }"),rules.join("\n")}