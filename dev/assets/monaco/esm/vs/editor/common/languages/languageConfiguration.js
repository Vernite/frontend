export var IndentAction;!function(IndentAction){IndentAction[IndentAction.None=0]="None",IndentAction[IndentAction.Indent=1]="Indent",IndentAction[IndentAction.IndentOutdent=2]="IndentOutdent",IndentAction[IndentAction.Outdent=3]="Outdent"}(IndentAction||(IndentAction={}));export class StandardAutoClosingPairConditional{constructor(source){if(this._neutralCharacter=null,this._neutralCharacterSearched=!1,this.open=source.open,this.close=source.close,this._inString=!0,this._inComment=!0,this._inRegEx=!0,Array.isArray(source.notIn))for(let i=0,len=source.notIn.length;i<len;i++){switch(source.notIn[i]){case"string":this._inString=!1;break;case"comment":this._inComment=!1;break;case"regex":this._inRegEx=!1}}}isOK(standardToken){switch(standardToken){case 0:return!0;case 1:return this._inComment;case 2:return this._inString;case 3:return this._inRegEx}}shouldAutoClose(context,column){if(0===context.getTokenCount())return!0;const tokenIndex=context.findTokenIndexAtOffset(column-2),standardTokenType=context.getStandardTokenType(tokenIndex);return this.isOK(standardTokenType)}_findNeutralCharacterInRange(fromCharCode,toCharCode){for(let charCode=fromCharCode;charCode<=toCharCode;charCode++){const character=String.fromCharCode(charCode);if(!this.open.includes(character)&&!this.close.includes(character))return character}return null}findNeutralCharacter(){return this._neutralCharacterSearched||(this._neutralCharacterSearched=!0,this._neutralCharacter||(this._neutralCharacter=this._findNeutralCharacterInRange(48,57)),this._neutralCharacter||(this._neutralCharacter=this._findNeutralCharacterInRange(97,122)),this._neutralCharacter||(this._neutralCharacter=this._findNeutralCharacterInRange(65,90))),this._neutralCharacter}}export class AutoClosingPairs{constructor(autoClosingPairs){this.autoClosingPairsOpenByStart=new Map,this.autoClosingPairsOpenByEnd=new Map,this.autoClosingPairsCloseByStart=new Map,this.autoClosingPairsCloseByEnd=new Map,this.autoClosingPairsCloseSingleChar=new Map;for(const pair of autoClosingPairs)appendEntry(this.autoClosingPairsOpenByStart,pair.open.charAt(0),pair),appendEntry(this.autoClosingPairsOpenByEnd,pair.open.charAt(pair.open.length-1),pair),appendEntry(this.autoClosingPairsCloseByStart,pair.close.charAt(0),pair),appendEntry(this.autoClosingPairsCloseByEnd,pair.close.charAt(pair.close.length-1),pair),1===pair.close.length&&1===pair.open.length&&appendEntry(this.autoClosingPairsCloseSingleChar,pair.close,pair)}}function appendEntry(target,key,value){target.has(key)?target.get(key).push(value):target.set(key,[value])}