import*as nls from"../../../nls.js";import{onUnexpectedError}from"../../../base/common/errors.js";import{Selection}from"../core/selection.js";import{URI}from"../../../base/common/uri.js";import{TextChange,compressConsecutiveTextChanges}from"../core/textChange.js";import*as buffer from"../../../base/common/buffer.js";import{basename}from"../../../base/common/resources.js";function uriGetComparisonKey(resource){return resource.toString()}export class SingleModelEditStackData{constructor(beforeVersionId,afterVersionId,beforeEOL,afterEOL,beforeCursorState,afterCursorState,changes){this.beforeVersionId=beforeVersionId,this.afterVersionId=afterVersionId,this.beforeEOL=beforeEOL,this.afterEOL=afterEOL,this.beforeCursorState=beforeCursorState,this.afterCursorState=afterCursorState,this.changes=changes}static create(model,beforeCursorState){const alternativeVersionId=model.getAlternativeVersionId(),eol=getModelEOL(model);return new SingleModelEditStackData(alternativeVersionId,alternativeVersionId,eol,eol,beforeCursorState,beforeCursorState,[])}append(model,textChanges,afterEOL,afterVersionId,afterCursorState){textChanges.length>0&&(this.changes=compressConsecutiveTextChanges(this.changes,textChanges)),this.afterEOL=afterEOL,this.afterVersionId=afterVersionId,this.afterCursorState=afterCursorState}static _writeSelectionsSize(selections){return 4+16*(selections?selections.length:0)}static _writeSelections(b,selections,offset){if(buffer.writeUInt32BE(b,selections?selections.length:0,offset),offset+=4,selections)for(const selection of selections)buffer.writeUInt32BE(b,selection.selectionStartLineNumber,offset),offset+=4,buffer.writeUInt32BE(b,selection.selectionStartColumn,offset),offset+=4,buffer.writeUInt32BE(b,selection.positionLineNumber,offset),offset+=4,buffer.writeUInt32BE(b,selection.positionColumn,offset),offset+=4;return offset}static _readSelections(b,offset,dest){const count=buffer.readUInt32BE(b,offset);offset+=4;for(let i=0;i<count;i++){const selectionStartLineNumber=buffer.readUInt32BE(b,offset);offset+=4;const selectionStartColumn=buffer.readUInt32BE(b,offset);offset+=4;const positionLineNumber=buffer.readUInt32BE(b,offset);offset+=4;const positionColumn=buffer.readUInt32BE(b,offset);offset+=4,dest.push(new Selection(selectionStartLineNumber,selectionStartColumn,positionLineNumber,positionColumn))}return offset}serialize(){let necessarySize=10+SingleModelEditStackData._writeSelectionsSize(this.beforeCursorState)+SingleModelEditStackData._writeSelectionsSize(this.afterCursorState)+4;for(const change of this.changes)necessarySize+=change.writeSize();const b=new Uint8Array(necessarySize);let offset=0;buffer.writeUInt32BE(b,this.beforeVersionId,offset),offset+=4,buffer.writeUInt32BE(b,this.afterVersionId,offset),offset+=4,buffer.writeUInt8(b,this.beforeEOL,offset),offset+=1,buffer.writeUInt8(b,this.afterEOL,offset),offset+=1,offset=SingleModelEditStackData._writeSelections(b,this.beforeCursorState,offset),offset=SingleModelEditStackData._writeSelections(b,this.afterCursorState,offset),buffer.writeUInt32BE(b,this.changes.length,offset),offset+=4;for(const change of this.changes)offset=change.write(b,offset);return b.buffer}static deserialize(source){const b=new Uint8Array(source);let offset=0;const beforeVersionId=buffer.readUInt32BE(b,offset);offset+=4;const afterVersionId=buffer.readUInt32BE(b,offset);offset+=4;const beforeEOL=buffer.readUInt8(b,offset);offset+=1;const afterEOL=buffer.readUInt8(b,offset);offset+=1;const beforeCursorState=[];offset=SingleModelEditStackData._readSelections(b,offset,beforeCursorState);const afterCursorState=[];offset=SingleModelEditStackData._readSelections(b,offset,afterCursorState);const changeCount=buffer.readUInt32BE(b,offset);offset+=4;const changes=[];for(let i=0;i<changeCount;i++)offset=TextChange.read(b,offset,changes);return new SingleModelEditStackData(beforeVersionId,afterVersionId,beforeEOL,afterEOL,beforeCursorState,afterCursorState,changes)}}export class SingleModelEditStackElement{constructor(label,code,model,beforeCursorState){this.label=label,this.code=code,this.model=model,this._data=SingleModelEditStackData.create(model,beforeCursorState)}get type(){return 0}get resource(){return URI.isUri(this.model)?this.model:this.model.uri}toString(){return(this._data instanceof SingleModelEditStackData?this._data:SingleModelEditStackData.deserialize(this._data)).changes.map((change=>change.toString())).join(", ")}matchesResource(resource){return(URI.isUri(this.model)?this.model:this.model.uri).toString()===resource.toString()}setModel(model){this.model=model}canAppend(model){return this.model===model&&this._data instanceof SingleModelEditStackData}append(model,textChanges,afterEOL,afterVersionId,afterCursorState){this._data instanceof SingleModelEditStackData&&this._data.append(model,textChanges,afterEOL,afterVersionId,afterCursorState)}close(){this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize())}open(){this._data instanceof SingleModelEditStackData||(this._data=SingleModelEditStackData.deserialize(this._data))}undo(){if(URI.isUri(this.model))throw new Error("Invalid SingleModelEditStackElement");this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize());const data=SingleModelEditStackData.deserialize(this._data);this.model._applyUndo(data.changes,data.beforeEOL,data.beforeVersionId,data.beforeCursorState)}redo(){if(URI.isUri(this.model))throw new Error("Invalid SingleModelEditStackElement");this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize());const data=SingleModelEditStackData.deserialize(this._data);this.model._applyRedo(data.changes,data.afterEOL,data.afterVersionId,data.afterCursorState)}heapSize(){return this._data instanceof SingleModelEditStackData&&(this._data=this._data.serialize()),this._data.byteLength+168}}export class MultiModelEditStackElement{constructor(label,code,editStackElements){this.label=label,this.code=code,this.type=1,this._isOpen=!0,this._editStackElementsArr=editStackElements.slice(0),this._editStackElementsMap=new Map;for(const editStackElement of this._editStackElementsArr){const key=uriGetComparisonKey(editStackElement.resource);this._editStackElementsMap.set(key,editStackElement)}this._delegate=null}get resources(){return this._editStackElementsArr.map((editStackElement=>editStackElement.resource))}prepareUndoRedo(){if(this._delegate)return this._delegate.prepareUndoRedo(this)}matchesResource(resource){const key=uriGetComparisonKey(resource);return this._editStackElementsMap.has(key)}setModel(model){const key=uriGetComparisonKey(URI.isUri(model)?model:model.uri);this._editStackElementsMap.has(key)&&this._editStackElementsMap.get(key).setModel(model)}canAppend(model){if(!this._isOpen)return!1;const key=uriGetComparisonKey(model.uri);if(this._editStackElementsMap.has(key)){return this._editStackElementsMap.get(key).canAppend(model)}return!1}append(model,textChanges,afterEOL,afterVersionId,afterCursorState){const key=uriGetComparisonKey(model.uri);this._editStackElementsMap.get(key).append(model,textChanges,afterEOL,afterVersionId,afterCursorState)}close(){this._isOpen=!1}open(){}undo(){this._isOpen=!1;for(const editStackElement of this._editStackElementsArr)editStackElement.undo()}redo(){for(const editStackElement of this._editStackElementsArr)editStackElement.redo()}heapSize(resource){const key=uriGetComparisonKey(resource);if(this._editStackElementsMap.has(key)){return this._editStackElementsMap.get(key).heapSize()}return 0}split(){return this._editStackElementsArr}toString(){const result=[];for(const editStackElement of this._editStackElementsArr)result.push(`${basename(editStackElement.resource)}: ${editStackElement}`);return`{${result.join(", ")}}`}}function getModelEOL(model){return"\n"===model.getEOL()?0:1}export function isEditStackElement(element){return!!element&&(element instanceof SingleModelEditStackElement||element instanceof MultiModelEditStackElement)}export class EditStack{constructor(model,undoRedoService){this._model=model,this._undoRedoService=undoRedoService}pushStackElement(){const lastElement=this._undoRedoService.getLastElement(this._model.uri);isEditStackElement(lastElement)&&lastElement.close()}popStackElement(){const lastElement=this._undoRedoService.getLastElement(this._model.uri);isEditStackElement(lastElement)&&lastElement.open()}clear(){this._undoRedoService.removeElements(this._model.uri)}_getOrCreateEditStackElement(beforeCursorState){const lastElement=this._undoRedoService.getLastElement(this._model.uri);if(isEditStackElement(lastElement)&&lastElement.canAppend(this._model))return lastElement;const newElement=new SingleModelEditStackElement(nls.localize("edit","Typing"),"undoredo.textBufferEdit",this._model,beforeCursorState);return this._undoRedoService.pushElement(newElement),newElement}pushEOL(eol){const editStackElement=this._getOrCreateEditStackElement(null);this._model.setEOL(eol),editStackElement.append(this._model,[],getModelEOL(this._model),this._model.getAlternativeVersionId(),null)}pushEditOperation(beforeCursorState,editOperations,cursorStateComputer){const editStackElement=this._getOrCreateEditStackElement(beforeCursorState),inverseEditOperations=this._model.applyEdits(editOperations,!0),afterCursorState=EditStack._computeCursorState(cursorStateComputer,inverseEditOperations),textChanges=inverseEditOperations.map(((op,index)=>({index,textChange:op.textChange})));return textChanges.sort(((a,b)=>a.textChange.oldPosition===b.textChange.oldPosition?a.index-b.index:a.textChange.oldPosition-b.textChange.oldPosition)),editStackElement.append(this._model,textChanges.map((op=>op.textChange)),getModelEOL(this._model),this._model.getAlternativeVersionId(),afterCursorState),afterCursorState}static _computeCursorState(cursorStateComputer,inverseEditOperations){try{return cursorStateComputer?cursorStateComputer(inverseEditOperations):null}catch(e){return onUnexpectedError(e),null}}}