class SpacesDiffResult{constructor(){this.spacesDiff=0,this.looksLikeAlignment=!1}}function spacesDiff(a,aLength,b,bLength,result){let i;for(result.spacesDiff=0,result.looksLikeAlignment=!1,i=0;i<aLength&&i<bLength;i++){if(a.charCodeAt(i)!==b.charCodeAt(i))break}let aSpacesCnt=0,aTabsCount=0;for(let j=i;j<aLength;j++){32===a.charCodeAt(j)?aSpacesCnt++:aTabsCount++}let bSpacesCnt=0,bTabsCount=0;for(let j=i;j<bLength;j++){32===b.charCodeAt(j)?bSpacesCnt++:bTabsCount++}if(aSpacesCnt>0&&aTabsCount>0)return;if(bSpacesCnt>0&&bTabsCount>0)return;const tabsDiff=Math.abs(aTabsCount-bTabsCount),spacesDiff=Math.abs(aSpacesCnt-bSpacesCnt);if(0===tabsDiff)return result.spacesDiff=spacesDiff,void(spacesDiff>0&&0<=bSpacesCnt-1&&bSpacesCnt-1<a.length&&bSpacesCnt<b.length&&32!==b.charCodeAt(bSpacesCnt)&&32===a.charCodeAt(bSpacesCnt-1)&&44===a.charCodeAt(a.length-1)&&(result.looksLikeAlignment=!0));spacesDiff%tabsDiff!=0||(result.spacesDiff=spacesDiff/tabsDiff)}export function guessIndentation(source,defaultTabSize,defaultInsertSpaces){const linesCount=Math.min(source.getLineCount(),1e4);let linesIndentedWithTabsCount=0,linesIndentedWithSpacesCount=0,previousLineText="",previousLineIndentation=0;const ALLOWED_TAB_SIZE_GUESSES=[2,4,6,8,3,5,7],spacesDiffCount=[0,0,0,0,0,0,0,0,0],tmp=new SpacesDiffResult;for(let lineNumber=1;lineNumber<=linesCount;lineNumber++){const currentLineLength=source.getLineLength(lineNumber),currentLineText=source.getLineContent(lineNumber),useCurrentLineText=currentLineLength<=65536;let currentLineHasContent=!1,currentLineIndentation=0,currentLineSpacesCount=0,currentLineTabsCount=0;for(let j=0,lenJ=currentLineLength;j<lenJ;j++){const charCode=useCurrentLineText?currentLineText.charCodeAt(j):source.getLineCharCode(lineNumber,j);if(9===charCode)currentLineTabsCount++;else{if(32!==charCode){currentLineHasContent=!0,currentLineIndentation=j;break}currentLineSpacesCount++}}if(!currentLineHasContent)continue;if(currentLineTabsCount>0?linesIndentedWithTabsCount++:currentLineSpacesCount>1&&linesIndentedWithSpacesCount++,spacesDiff(previousLineText,previousLineIndentation,currentLineText,currentLineIndentation,tmp),tmp.looksLikeAlignment&&(!defaultInsertSpaces||defaultTabSize!==tmp.spacesDiff))continue;const currentSpacesDiff=tmp.spacesDiff;currentSpacesDiff<=8&&spacesDiffCount[currentSpacesDiff]++,previousLineText=currentLineText,previousLineIndentation=currentLineIndentation}let insertSpaces=defaultInsertSpaces;linesIndentedWithTabsCount!==linesIndentedWithSpacesCount&&(insertSpaces=linesIndentedWithTabsCount<linesIndentedWithSpacesCount);let tabSize=defaultTabSize;if(insertSpaces){let tabSizeScore=insertSpaces?0:.1*linesCount;ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize=>{const possibleTabSizeScore=spacesDiffCount[possibleTabSize];possibleTabSizeScore>tabSizeScore&&(tabSizeScore=possibleTabSizeScore,tabSize=possibleTabSize)})),4===tabSize&&spacesDiffCount[4]>0&&spacesDiffCount[2]>0&&spacesDiffCount[2]>=spacesDiffCount[4]/2&&(tabSize=2)}return{insertSpaces,tabSize}}