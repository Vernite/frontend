import*as dom from"../../dom.js";import{renderLabelWithIcons}from"../iconLabel/iconLabels.js";import*as objects from"../../../common/objects.js";export class HighlightedLabel{constructor(container,options){var _a;this.text="",this.title="",this.highlights=[],this.didEverRender=!1,this.supportIcons=null!==(_a=null==options?void 0:options.supportIcons)&&void 0!==_a&&_a,this.domNode=dom.append(container,dom.$("span.monaco-highlighted-label"))}get element(){return this.domNode}set(text,highlights=[],title="",escapeNewLines){text||(text=""),escapeNewLines&&(text=HighlightedLabel.escapeNewLines(text,highlights)),this.didEverRender&&this.text===text&&this.title===title&&objects.equals(this.highlights,highlights)||(this.text=text,this.title=title,this.highlights=highlights,this.render())}render(){const children=[];let pos=0;for(const highlight of this.highlights){if(highlight.end===highlight.start)continue;if(pos<highlight.start){const substring=this.text.substring(pos,highlight.start);children.push(dom.$("span",void 0,...this.supportIcons?renderLabelWithIcons(substring):[substring])),pos=highlight.end}const substring=this.text.substring(highlight.start,highlight.end),element=dom.$("span.highlight",void 0,...this.supportIcons?renderLabelWithIcons(substring):[substring]);highlight.extraClasses&&element.classList.add(...highlight.extraClasses),children.push(element),pos=highlight.end}if(pos<this.text.length){const substring=this.text.substring(pos);children.push(dom.$("span",void 0,...this.supportIcons?renderLabelWithIcons(substring):[substring]))}dom.reset(this.domNode,...children),this.title?this.domNode.title=this.title:this.domNode.removeAttribute("title"),this.didEverRender=!0}static escapeNewLines(text,highlights){let total=0,extra=0;return text.replace(/\r\n|\r|\n/g,((match,offset)=>{extra="\r\n"===match?-1:0,offset+=total;for(const highlight of highlights)highlight.end<=offset||(highlight.start>=offset&&(highlight.start+=extra),highlight.end>=offset&&(highlight.end+=extra));return total+=extra,"‚èé"}))}}