var _a;import*as nls from"../../nls.js";const LANGUAGE_DEFAULT="en";let _locale,_translationsConfigFile,_userAgent,nodeProcess,_isWindows=!1,_isMacintosh=!1,_isLinux=!1,_isLinuxSnap=!1,_isNative=!1,_isWeb=!1,_isElectron=!1,_isIOS=!1,_isCI=!1,_language="en";export const globals="object"==typeof self?self:"object"==typeof global?global:{};void 0!==globals.vscode&&void 0!==globals.vscode.process?nodeProcess=globals.vscode.process:"undefined"!=typeof process&&(nodeProcess=process);const isElectronProcess="string"==typeof(null===(_a=null==nodeProcess?void 0:nodeProcess.versions)||void 0===_a?void 0:_a.electron),isElectronRenderer=isElectronProcess&&"renderer"===(null==nodeProcess?void 0:nodeProcess.type);if("object"!=typeof navigator||isElectronRenderer)if("object"==typeof nodeProcess){_isWindows="win32"===nodeProcess.platform,_isMacintosh="darwin"===nodeProcess.platform,_isLinux="linux"===nodeProcess.platform,_isLinuxSnap=_isLinux&&!!nodeProcess.env.SNAP&&!!nodeProcess.env.SNAP_REVISION,_isElectron=isElectronProcess,_isCI=!!nodeProcess.env.CI||!!nodeProcess.env.BUILD_ARTIFACTSTAGINGDIRECTORY,_locale="en",_language="en";const rawNlsConfig=nodeProcess.env.VSCODE_NLS_CONFIG;if(rawNlsConfig)try{const nlsConfig=JSON.parse(rawNlsConfig),resolved=nlsConfig.availableLanguages["*"];_locale=nlsConfig.locale,_language=resolved||"en",_translationsConfigFile=nlsConfig._translationsConfigFile}catch(e){}_isNative=!0}else console.error("Unable to resolve platform.");else{_userAgent=navigator.userAgent,_isWindows=_userAgent.indexOf("Windows")>=0,_isMacintosh=_userAgent.indexOf("Macintosh")>=0,_isIOS=(_userAgent.indexOf("Macintosh")>=0||_userAgent.indexOf("iPad")>=0||_userAgent.indexOf("iPhone")>=0)&&!!navigator.maxTouchPoints&&navigator.maxTouchPoints>0,_isLinux=_userAgent.indexOf("Linux")>=0,_isWeb=!0;_locale=nls.getConfiguredDefaultLocale(nls.localize({key:"ensureLoaderPluginIsLoaded",comment:["{Locked}"]},"_"))||"en",_language=_locale}let _platform=0;_isMacintosh?_platform=1:_isWindows?_platform=3:_isLinux&&(_platform=2);export const isWindows=_isWindows;export const isMacintosh=_isMacintosh;export const isLinux=_isLinux;export const isNative=_isNative;export const isWeb=_isWeb;export const isWebWorker=_isWeb&&"function"==typeof globals.importScripts;export const isIOS=_isIOS;export const userAgent=_userAgent;export const language=_language;export const setTimeout0IsFaster="function"==typeof globals.postMessage&&!globals.importScripts;export const setTimeout0=(()=>{if(setTimeout0IsFaster){const pending=[];globals.addEventListener("message",(e=>{if(e.data&&e.data.vscodeScheduleAsyncWork)for(let i=0,len=pending.length;i<len;i++){const candidate=pending[i];if(candidate.id===e.data.vscodeScheduleAsyncWork)return pending.splice(i,1),void candidate.callback()}}));let lastId=0;return callback=>{const myId=++lastId;pending.push({id:myId,callback}),globals.postMessage({vscodeScheduleAsyncWork:myId},"*")}}return callback=>setTimeout(callback)})();export const OS=_isMacintosh||_isIOS?2:_isWindows?1:3;let _isLittleEndian=!0,_isLittleEndianComputed=!1;export function isLittleEndian(){if(!_isLittleEndianComputed){_isLittleEndianComputed=!0;const test=new Uint8Array(2);test[0]=1,test[1]=2;const view=new Uint16Array(test.buffer);_isLittleEndian=513===view[0]}return _isLittleEndian}export const isChrome=!!(userAgent&&userAgent.indexOf("Chrome")>=0);export const isFirefox=!!(userAgent&&userAgent.indexOf("Firefox")>=0);export const isSafari=!!(!isChrome&&userAgent&&userAgent.indexOf("Safari")>=0);export const isEdge=!!(userAgent&&userAgent.indexOf("Edg/")>=0);export const isAndroid=!!(userAgent&&userAgent.indexOf("Android")>=0);