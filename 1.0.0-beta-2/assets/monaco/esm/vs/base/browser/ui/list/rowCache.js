import{$}from"../../dom.js";function removeFromParent(element){var _a;try{null===(_a=element.parentElement)||void 0===_a||_a.removeChild(element)}catch(e){}}export class RowCache{constructor(renderers){this.renderers=renderers,this.cache=new Map}alloc(templateId){let result=this.getTemplateCache(templateId).pop();if(!result){const domNode=$(".monaco-list-row");result={domNode,templateId,templateData:this.getRenderer(templateId).renderTemplate(domNode)}}return result}release(row){row&&this.releaseRow(row)}releaseRow(row){const{domNode,templateId}=row;domNode&&(domNode.classList.remove("scrolling"),removeFromParent(domNode));this.getTemplateCache(templateId).push(row)}getTemplateCache(templateId){let result=this.cache.get(templateId);return result||(result=[],this.cache.set(templateId,result)),result}dispose(){this.cache.forEach(((cachedRows,templateId)=>{for(const cachedRow of cachedRows){this.getRenderer(templateId).disposeTemplate(cachedRow.templateData),cachedRow.templateData=null}})),this.cache.clear()}getRenderer(templateId){const renderer=this.renderers.get(templateId);if(!renderer)throw new Error(`No renderer found for ${templateId}`);return renderer}}