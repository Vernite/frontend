import{onUnexpectedError}from"../../../base/common/errors.js";import*as strings from"../../../base/common/strings.js";import{CursorCollection}from"./cursorCollection.js";import{CursorState,EditOperationResult}from"../cursorCommon.js";import{CursorContext}from"./cursorContext.js";import{DeleteOperations}from"./cursorDeleteOperations.js";import{CompositionOutcome,TypeOperations,TypeWithAutoClosingCommand}from"./cursorTypeOperations.js";import{Range}from"../core/range.js";import{Selection}from"../core/selection.js";import{ModelInjectedTextChangedEvent}from"../textModelEvents.js";import{ViewCursorStateChangedEvent,ViewRevealRangeRequestEvent}from"../viewEvents.js";import{dispose,Disposable}from"../../../base/common/lifecycle.js";import{CursorStateChangedEvent}from"../viewModelEventDispatcher.js";export class CursorsController extends Disposable{constructor(model,viewModel,coordinatesConverter,cursorConfig){super(),this._model=model,this._knownModelVersionId=this._model.getVersionId(),this._viewModel=viewModel,this._coordinatesConverter=coordinatesConverter,this.context=new CursorContext(this._model,this._viewModel,this._coordinatesConverter,cursorConfig),this._cursors=new CursorCollection(this.context),this._hasFocus=!1,this._isHandling=!1,this._compositionState=null,this._columnSelectData=null,this._autoClosedActions=[],this._prevEditOperationType=0}dispose(){this._cursors.dispose(),this._autoClosedActions=dispose(this._autoClosedActions),super.dispose()}updateConfiguration(cursorConfig){this.context=new CursorContext(this._model,this._viewModel,this._coordinatesConverter,cursorConfig),this._cursors.updateContext(this.context)}onLineMappingChanged(eventsCollector){this._knownModelVersionId===this._model.getVersionId()&&this.setStates(eventsCollector,"viewModel",0,this.getCursorStates())}setHasFocus(hasFocus){this._hasFocus=hasFocus}_validateAutoClosedActions(){if(this._autoClosedActions.length>0){const selections=this._cursors.getSelections();for(let i=0;i<this._autoClosedActions.length;i++){const autoClosedAction=this._autoClosedActions[i];autoClosedAction.isValid(selections)||(autoClosedAction.dispose(),this._autoClosedActions.splice(i,1),i--)}}}getPrimaryCursorState(){return this._cursors.getPrimaryCursor()}getLastAddedCursorIndex(){return this._cursors.getLastAddedCursorIndex()}getCursorStates(){return this._cursors.getAll()}setStates(eventsCollector,source,reason,states){let reachedMaxCursorCount=!1;null!==states&&states.length>CursorsController.MAX_CURSOR_COUNT&&(states=states.slice(0,CursorsController.MAX_CURSOR_COUNT),reachedMaxCursorCount=!0);const oldState=CursorModelState.from(this._model,this);return this._cursors.setStates(states),this._cursors.normalize(),this._columnSelectData=null,this._validateAutoClosedActions(),this._emitStateChangedIfNecessary(eventsCollector,source,reason,oldState,reachedMaxCursorCount)}setCursorColumnSelectData(columnSelectData){this._columnSelectData=columnSelectData}revealPrimary(eventsCollector,source,minimalReveal,verticalType,revealHorizontal,scrollType){const viewPositions=this._cursors.getViewPositions();let revealViewRange=null,revealViewSelections=null;viewPositions.length>1?revealViewSelections=this._cursors.getViewSelections():revealViewRange=Range.fromPositions(viewPositions[0],viewPositions[0]),eventsCollector.emitViewEvent(new ViewRevealRangeRequestEvent(source,minimalReveal,revealViewRange,revealViewSelections,verticalType,revealHorizontal,scrollType))}saveState(){const result=[],selections=this._cursors.getSelections();for(let i=0,len=selections.length;i<len;i++){const selection=selections[i];result.push({inSelectionMode:!selection.isEmpty(),selectionStart:{lineNumber:selection.selectionStartLineNumber,column:selection.selectionStartColumn},position:{lineNumber:selection.positionLineNumber,column:selection.positionColumn}})}return result}restoreState(eventsCollector,states){const desiredSelections=[];for(let i=0,len=states.length;i<len;i++){const state=states[i];let positionLineNumber=1,positionColumn=1;state.position&&state.position.lineNumber&&(positionLineNumber=state.position.lineNumber),state.position&&state.position.column&&(positionColumn=state.position.column);let selectionStartLineNumber=positionLineNumber,selectionStartColumn=positionColumn;state.selectionStart&&state.selectionStart.lineNumber&&(selectionStartLineNumber=state.selectionStart.lineNumber),state.selectionStart&&state.selectionStart.column&&(selectionStartColumn=state.selectionStart.column),desiredSelections.push({selectionStartLineNumber,selectionStartColumn,positionLineNumber,positionColumn})}this.setStates(eventsCollector,"restoreState",0,CursorState.fromModelSelections(desiredSelections)),this.revealPrimary(eventsCollector,"restoreState",!1,0,!0,1)}onModelContentChanged(eventsCollector,event){if(event instanceof ModelInjectedTextChangedEvent){if(this._isHandling)return;this._isHandling=!0;try{this.setStates(eventsCollector,"modelChange",0,this.getCursorStates())}finally{this._isHandling=!1}}else{const e=event.rawContentChangedEvent;if(this._knownModelVersionId=e.versionId,this._isHandling)return;const hadFlushEvent=e.containsEvent(1);if(this._prevEditOperationType=0,hadFlushEvent)this._cursors.dispose(),this._cursors=new CursorCollection(this.context),this._validateAutoClosedActions(),this._emitStateChangedIfNecessary(eventsCollector,"model",1,null,!1);else if(this._hasFocus&&e.resultingSelection&&e.resultingSelection.length>0){const cursorState=CursorState.fromModelSelections(e.resultingSelection);this.setStates(eventsCollector,"modelChange",e.isUndoing?5:e.isRedoing?6:2,cursorState)&&this.revealPrimary(eventsCollector,"modelChange",!1,0,!0,0)}else{const selectionsFromMarkers=this._cursors.readSelectionFromMarkers();this.setStates(eventsCollector,"modelChange",2,CursorState.fromModelSelections(selectionsFromMarkers))}}}getSelection(){return this._cursors.getPrimaryCursor().modelState.selection}getTopMostViewPosition(){return this._cursors.getTopMostViewPosition()}getBottomMostViewPosition(){return this._cursors.getBottomMostViewPosition()}getCursorColumnSelectData(){if(this._columnSelectData)return this._columnSelectData;const primaryCursor=this._cursors.getPrimaryCursor(),viewSelectionStart=primaryCursor.viewState.selectionStart.getStartPosition(),viewPosition=primaryCursor.viewState.position;return{isReal:!1,fromViewLineNumber:viewSelectionStart.lineNumber,fromViewVisualColumn:this.context.cursorConfig.visibleColumnFromColumn(this._viewModel,viewSelectionStart),toViewLineNumber:viewPosition.lineNumber,toViewVisualColumn:this.context.cursorConfig.visibleColumnFromColumn(this._viewModel,viewPosition)}}getSelections(){return this._cursors.getSelections()}setSelections(eventsCollector,source,selections,reason){this.setStates(eventsCollector,source,reason,CursorState.fromModelSelections(selections))}getPrevEditOperationType(){return this._prevEditOperationType}setPrevEditOperationType(type){this._prevEditOperationType=type}_pushAutoClosedAction(autoClosedCharactersRanges,autoClosedEnclosingRanges){const autoClosedCharactersDeltaDecorations=[],autoClosedEnclosingDeltaDecorations=[];for(let i=0,len=autoClosedCharactersRanges.length;i<len;i++)autoClosedCharactersDeltaDecorations.push({range:autoClosedCharactersRanges[i],options:{description:"auto-closed-character",inlineClassName:"auto-closed-character",stickiness:1}}),autoClosedEnclosingDeltaDecorations.push({range:autoClosedEnclosingRanges[i],options:{description:"auto-closed-enclosing",stickiness:1}});const autoClosedCharactersDecorations=this._model.deltaDecorations([],autoClosedCharactersDeltaDecorations),autoClosedEnclosingDecorations=this._model.deltaDecorations([],autoClosedEnclosingDeltaDecorations);this._autoClosedActions.push(new AutoClosedAction(this._model,autoClosedCharactersDecorations,autoClosedEnclosingDecorations))}_executeEditOperation(opResult){if(!opResult)return;opResult.shouldPushStackElementBefore&&this._model.pushStackElement();const result=CommandExecutor.executeCommands(this._model,this._cursors.getSelections(),opResult.commands);if(result){this._interpretCommandResult(result);const autoClosedCharactersRanges=[],autoClosedEnclosingRanges=[];for(let i=0;i<opResult.commands.length;i++){const command=opResult.commands[i];command instanceof TypeWithAutoClosingCommand&&command.enclosingRange&&command.closeCharacterRange&&(autoClosedCharactersRanges.push(command.closeCharacterRange),autoClosedEnclosingRanges.push(command.enclosingRange))}autoClosedCharactersRanges.length>0&&this._pushAutoClosedAction(autoClosedCharactersRanges,autoClosedEnclosingRanges),this._prevEditOperationType=opResult.type}opResult.shouldPushStackElementAfter&&this._model.pushStackElement()}_interpretCommandResult(cursorState){cursorState&&0!==cursorState.length||(cursorState=this._cursors.readSelectionFromMarkers()),this._columnSelectData=null,this._cursors.setSelections(cursorState),this._cursors.normalize()}_emitStateChangedIfNecessary(eventsCollector,source,reason,oldState,reachedMaxCursorCount){const newState=CursorModelState.from(this._model,this);if(newState.equals(oldState))return!1;const selections=this._cursors.getSelections(),viewSelections=this._cursors.getViewSelections();if(eventsCollector.emitViewEvent(new ViewCursorStateChangedEvent(viewSelections,selections)),!oldState||oldState.cursorState.length!==newState.cursorState.length||newState.cursorState.some(((newCursorState,i)=>!newCursorState.modelState.equals(oldState.cursorState[i].modelState)))){const oldSelections=oldState?oldState.cursorState.map((s=>s.modelState.selection)):null,oldModelVersionId=oldState?oldState.modelVersionId:0;eventsCollector.emitOutgoingEvent(new CursorStateChangedEvent(oldSelections,selections,oldModelVersionId,newState.modelVersionId,source||"keyboard",reason,reachedMaxCursorCount))}return!0}_findAutoClosingPairs(edits){if(!edits.length)return null;const indices=[];for(let i=0,len=edits.length;i<len;i++){const edit=edits[i];if(!edit.text||edit.text.indexOf("\n")>=0)return null;const m=edit.text.match(/([)\]}>'"`])([^)\]}>'"`]*)$/);if(!m)return null;const closeChar=m[1],autoClosingPairsCandidates=this.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(closeChar);if(!autoClosingPairsCandidates||1!==autoClosingPairsCandidates.length)return null;const openChar=autoClosingPairsCandidates[0].open,closeCharIndex=edit.text.length-m[2].length-1,openCharIndex=edit.text.lastIndexOf(openChar,closeCharIndex-1);if(-1===openCharIndex)return null;indices.push([openCharIndex,closeCharIndex])}return indices}executeEdits(eventsCollector,source,edits,cursorStateComputer){let autoClosingIndices=null;"snippet"===source&&(autoClosingIndices=this._findAutoClosingPairs(edits)),autoClosingIndices&&(edits[0]._isTracked=!0);const autoClosedCharactersRanges=[],autoClosedEnclosingRanges=[],selections=this._model.pushEditOperations(this.getSelections(),edits,(undoEdits=>{if(autoClosingIndices)for(let i=0,len=autoClosingIndices.length;i<len;i++){const[openCharInnerIndex,closeCharInnerIndex]=autoClosingIndices[i],undoEdit=undoEdits[i],lineNumber=undoEdit.range.startLineNumber,openCharIndex=undoEdit.range.startColumn-1+openCharInnerIndex,closeCharIndex=undoEdit.range.startColumn-1+closeCharInnerIndex;autoClosedCharactersRanges.push(new Range(lineNumber,closeCharIndex+1,lineNumber,closeCharIndex+2)),autoClosedEnclosingRanges.push(new Range(lineNumber,openCharIndex+1,lineNumber,closeCharIndex+2))}const selections=cursorStateComputer(undoEdits);return selections&&(this._isHandling=!0),selections}));selections&&(this._isHandling=!1,this.setSelections(eventsCollector,source,selections,0)),autoClosedCharactersRanges.length>0&&this._pushAutoClosedAction(autoClosedCharactersRanges,autoClosedEnclosingRanges)}_executeEdit(callback,eventsCollector,source,cursorChangeReason=0){if(this.context.cursorConfig.readOnly)return;const oldState=CursorModelState.from(this._model,this);this._cursors.stopTrackingSelections(),this._isHandling=!0;try{this._cursors.ensureValidState(),callback()}catch(err){onUnexpectedError(err)}this._isHandling=!1,this._cursors.startTrackingSelections(),this._validateAutoClosedActions(),this._emitStateChangedIfNecessary(eventsCollector,source,cursorChangeReason,oldState,!1)&&this.revealPrimary(eventsCollector,source,!1,0,!0,0)}getAutoClosedCharacters(){return AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions)}startComposition(eventsCollector){this._compositionState=new CompositionState(this._model,this.getSelections())}endComposition(eventsCollector,source){const compositionOutcome=this._compositionState?this._compositionState.deduceOutcome(this._model,this.getSelections()):null;this._compositionState=null,this._executeEdit((()=>{"keyboard"===source&&this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType,this.context.cursorConfig,this._model,compositionOutcome,this.getSelections(),this.getAutoClosedCharacters()))}),eventsCollector,source)}type(eventsCollector,text,source){this._executeEdit((()=>{if("keyboard"===source){const len=text.length;let offset=0;for(;offset<len;){const charLength=strings.nextCharLength(text,offset),chr=text.substr(offset,charLength);this._executeEditOperation(TypeOperations.typeWithInterceptors(!!this._compositionState,this._prevEditOperationType,this.context.cursorConfig,this._model,this.getSelections(),this.getAutoClosedCharacters(),chr)),offset+=charLength}}else this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType,this.context.cursorConfig,this._model,this.getSelections(),text))}),eventsCollector,source)}compositionType(eventsCollector,text,replacePrevCharCnt,replaceNextCharCnt,positionDelta,source){if(0!==text.length||0!==replacePrevCharCnt||0!==replaceNextCharCnt)this._executeEdit((()=>{this._executeEditOperation(TypeOperations.compositionType(this._prevEditOperationType,this.context.cursorConfig,this._model,this.getSelections(),text,replacePrevCharCnt,replaceNextCharCnt,positionDelta))}),eventsCollector,source);else if(0!==positionDelta){const newSelections=this.getSelections().map((selection=>{const position=selection.getPosition();return new Selection(position.lineNumber,position.column+positionDelta,position.lineNumber,position.column+positionDelta)}));this.setSelections(eventsCollector,source,newSelections,0)}}paste(eventsCollector,text,pasteOnNewLine,multicursorText,source){this._executeEdit((()=>{this._executeEditOperation(TypeOperations.paste(this.context.cursorConfig,this._model,this.getSelections(),text,pasteOnNewLine,multicursorText||[]))}),eventsCollector,source,4)}cut(eventsCollector,source){this._executeEdit((()=>{this._executeEditOperation(DeleteOperations.cut(this.context.cursorConfig,this._model,this.getSelections()))}),eventsCollector,source)}executeCommand(eventsCollector,command,source){this._executeEdit((()=>{this._cursors.killSecondaryCursors(),this._executeEditOperation(new EditOperationResult(0,[command],{shouldPushStackElementBefore:!1,shouldPushStackElementAfter:!1}))}),eventsCollector,source)}executeCommands(eventsCollector,commands,source){this._executeEdit((()=>{this._executeEditOperation(new EditOperationResult(0,commands,{shouldPushStackElementBefore:!1,shouldPushStackElementAfter:!1}))}),eventsCollector,source)}}CursorsController.MAX_CURSOR_COUNT=1e4;class CursorModelState{constructor(modelVersionId,cursorState){this.modelVersionId=modelVersionId,this.cursorState=cursorState}static from(model,cursor){return new CursorModelState(model.getVersionId(),cursor.getCursorStates())}equals(other){if(!other)return!1;if(this.modelVersionId!==other.modelVersionId)return!1;if(this.cursorState.length!==other.cursorState.length)return!1;for(let i=0,len=this.cursorState.length;i<len;i++)if(!this.cursorState[i].equals(other.cursorState[i]))return!1;return!0}}class AutoClosedAction{constructor(model,autoClosedCharactersDecorations,autoClosedEnclosingDecorations){this._model=model,this._autoClosedCharactersDecorations=autoClosedCharactersDecorations,this._autoClosedEnclosingDecorations=autoClosedEnclosingDecorations}static getAllAutoClosedCharacters(autoClosedActions){let autoClosedCharacters=[];for(const autoClosedAction of autoClosedActions)autoClosedCharacters=autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());return autoClosedCharacters}dispose(){this._autoClosedCharactersDecorations=this._model.deltaDecorations(this._autoClosedCharactersDecorations,[]),this._autoClosedEnclosingDecorations=this._model.deltaDecorations(this._autoClosedEnclosingDecorations,[])}getAutoClosedCharactersRanges(){const result=[];for(let i=0;i<this._autoClosedCharactersDecorations.length;i++){const decorationRange=this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);decorationRange&&result.push(decorationRange)}return result}isValid(selections){const enclosingRanges=[];for(let i=0;i<this._autoClosedEnclosingDecorations.length;i++){const decorationRange=this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);if(decorationRange&&(enclosingRanges.push(decorationRange),decorationRange.startLineNumber!==decorationRange.endLineNumber))return!1}enclosingRanges.sort(Range.compareRangesUsingStarts),selections.sort(Range.compareRangesUsingStarts);for(let i=0;i<selections.length;i++){if(i>=enclosingRanges.length)return!1;if(!enclosingRanges[i].strictContainsRange(selections[i]))return!1}return!0}}class CommandExecutor{static executeCommands(model,selectionsBefore,commands){const ctx={model,selectionsBefore,trackedRanges:[],trackedRangesDirection:[]},result=this._innerExecuteCommands(ctx,commands);for(let i=0,len=ctx.trackedRanges.length;i<len;i++)ctx.model._setTrackedRange(ctx.trackedRanges[i],null,0);return result}static _innerExecuteCommands(ctx,commands){if(this._arrayIsEmpty(commands))return null;const commandsData=this._getEditOperations(ctx,commands);if(0===commandsData.operations.length)return null;const rawOperations=commandsData.operations,loserCursorsMap=this._getLoserCursorMap(rawOperations);if(loserCursorsMap.hasOwnProperty("0"))return console.warn("Ignoring commands"),null;const filteredOperations=[];for(let i=0,len=rawOperations.length;i<len;i++)loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())||filteredOperations.push(rawOperations[i]);commandsData.hadTrackedEditOperation&&filteredOperations.length>0&&(filteredOperations[0]._isTracked=!0);let selectionsAfter=ctx.model.pushEditOperations(ctx.selectionsBefore,filteredOperations,(inverseEditOperations=>{const groupedInverseEditOperations=[];for(let i=0;i<ctx.selectionsBefore.length;i++)groupedInverseEditOperations[i]=[];for(const op of inverseEditOperations)op.identifier&&groupedInverseEditOperations[op.identifier.major].push(op);const minorBasedSorter=(a,b)=>a.identifier.minor-b.identifier.minor,cursorSelections=[];for(let i=0;i<ctx.selectionsBefore.length;i++)groupedInverseEditOperations[i].length>0?(groupedInverseEditOperations[i].sort(minorBasedSorter),cursorSelections[i]=commands[i].computeCursorState(ctx.model,{getInverseEditOperations:()=>groupedInverseEditOperations[i],getTrackedSelection:id=>{const idx=parseInt(id,10),range=ctx.model._getTrackedRange(ctx.trackedRanges[idx]);return 0===ctx.trackedRangesDirection[idx]?new Selection(range.startLineNumber,range.startColumn,range.endLineNumber,range.endColumn):new Selection(range.endLineNumber,range.endColumn,range.startLineNumber,range.startColumn)}})):cursorSelections[i]=ctx.selectionsBefore[i];return cursorSelections}));selectionsAfter||(selectionsAfter=ctx.selectionsBefore);const losingCursors=[];for(const losingCursorIndex in loserCursorsMap)loserCursorsMap.hasOwnProperty(losingCursorIndex)&&losingCursors.push(parseInt(losingCursorIndex,10));losingCursors.sort(((a,b)=>b-a));for(const losingCursor of losingCursors)selectionsAfter.splice(losingCursor,1);return selectionsAfter}static _arrayIsEmpty(commands){for(let i=0,len=commands.length;i<len;i++)if(commands[i])return!1;return!0}static _getEditOperations(ctx,commands){let operations=[],hadTrackedEditOperation=!1;for(let i=0,len=commands.length;i<len;i++){const command=commands[i];if(command){const r=this._getEditOperationsFromCommand(ctx,i,command);operations=operations.concat(r.operations),hadTrackedEditOperation=hadTrackedEditOperation||r.hadTrackedEditOperation}}return{operations,hadTrackedEditOperation}}static _getEditOperationsFromCommand(ctx,majorIdentifier,command){const operations=[];let operationMinor=0;const addEditOperation=(range,text,forceMoveMarkers=!1)=>{Range.isEmpty(range)&&""===text||operations.push({identifier:{major:majorIdentifier,minor:operationMinor++},range,text,forceMoveMarkers,isAutoWhitespaceEdit:command.insertsAutoWhitespace})};let hadTrackedEditOperation=!1;const editOperationBuilder={addEditOperation,addTrackedEditOperation:(selection,text,forceMoveMarkers)=>{hadTrackedEditOperation=!0,addEditOperation(selection,text,forceMoveMarkers)},trackSelection:(_selection,trackPreviousOnEmpty)=>{const selection=Selection.liftSelection(_selection);let stickiness;if(selection.isEmpty())if("boolean"==typeof trackPreviousOnEmpty)stickiness=trackPreviousOnEmpty?2:3;else{const maxLineColumn=ctx.model.getLineMaxColumn(selection.startLineNumber);stickiness=selection.startColumn===maxLineColumn?2:3}else stickiness=1;const l=ctx.trackedRanges.length,id=ctx.model._setTrackedRange(null,selection,stickiness);return ctx.trackedRanges[l]=id,ctx.trackedRangesDirection[l]=selection.getDirection(),l.toString()}};try{command.getEditOperations(ctx.model,editOperationBuilder)}catch(e){return onUnexpectedError(e),{operations:[],hadTrackedEditOperation:!1}}return{operations,hadTrackedEditOperation}}static _getLoserCursorMap(operations){(operations=operations.slice(0)).sort(((a,b)=>-Range.compareRangesUsingEnds(a.range,b.range)));const loserCursorsMap={};for(let i=1;i<operations.length;i++){const previousOp=operations[i-1],currentOp=operations[i];if(Range.getStartPosition(previousOp.range).isBefore(Range.getEndPosition(currentOp.range))){let loserMajor;loserMajor=previousOp.identifier.major>currentOp.identifier.major?previousOp.identifier.major:currentOp.identifier.major,loserCursorsMap[loserMajor.toString()]=!0;for(let j=0;j<operations.length;j++)operations[j].identifier.major===loserMajor&&(operations.splice(j,1),j<i&&i--,j--);i>0&&i--}}return loserCursorsMap}}class CompositionLineState{constructor(text,startSelection,endSelection){this.text=text,this.startSelection=startSelection,this.endSelection=endSelection}}class CompositionState{constructor(textModel,selections){this._original=CompositionState._capture(textModel,selections)}static _capture(textModel,selections){const result=[];for(const selection of selections){if(selection.startLineNumber!==selection.endLineNumber)return null;result.push(new CompositionLineState(textModel.getLineContent(selection.startLineNumber),selection.startColumn-1,selection.endColumn-1))}return result}deduceOutcome(textModel,selections){if(!this._original)return null;const current=CompositionState._capture(textModel,selections);if(!current)return null;if(this._original.length!==current.length)return null;const result=[];for(let i=0,len=this._original.length;i<len;i++)result.push(CompositionState._deduceOutcome(this._original[i],current[i]));return result}static _deduceOutcome(original,current){const commonPrefix=Math.min(original.startSelection,current.startSelection,strings.commonPrefixLength(original.text,current.text)),commonSuffix=Math.min(original.text.length-original.endSelection,current.text.length-current.endSelection,strings.commonSuffixLength(original.text,current.text)),deletedText=original.text.substring(commonPrefix,original.text.length-commonSuffix),insertedText=current.text.substring(commonPrefix,current.text.length-commonSuffix);return new CompositionOutcome(deletedText,original.startSelection-commonPrefix,original.endSelection-commonPrefix,insertedText,current.startSelection-commonPrefix,current.endSelection-commonPrefix)}}