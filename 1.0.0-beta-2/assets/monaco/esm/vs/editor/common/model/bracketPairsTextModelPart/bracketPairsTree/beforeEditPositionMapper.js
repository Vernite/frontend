import{lengthAdd,lengthDiffNonNegative,lengthLessThanEqual,lengthToObj,toLength}from"./length.js";export class TextEditInfo{constructor(startOffset,endOffset,newLength){this.startOffset=startOffset,this.endOffset=endOffset,this.newLength=newLength}}export class BeforeEditPositionMapper{constructor(edits,documentLength){this.documentLength=documentLength,this.nextEditIdx=0,this.deltaOldToNewLineCount=0,this.deltaOldToNewColumnCount=0,this.deltaLineIdxInOld=-1,this.edits=edits.map((edit=>TextEditInfoCache.from(edit)))}getOffsetBeforeChange(offset){return this.adjustNextEdit(offset),this.translateCurToOld(offset)}getDistanceToNextChange(offset){this.adjustNextEdit(offset);const nextEdit=this.edits[this.nextEditIdx],nextChangeOffset=nextEdit?this.translateOldToCur(nextEdit.offsetObj):this.documentLength;return lengthDiffNonNegative(offset,nextChangeOffset)}translateOldToCur(oldOffsetObj){return oldOffsetObj.lineCount===this.deltaLineIdxInOld?toLength(oldOffsetObj.lineCount+this.deltaOldToNewLineCount,oldOffsetObj.columnCount+this.deltaOldToNewColumnCount):toLength(oldOffsetObj.lineCount+this.deltaOldToNewLineCount,oldOffsetObj.columnCount)}translateCurToOld(newOffset){const offsetObj=lengthToObj(newOffset);return offsetObj.lineCount-this.deltaOldToNewLineCount===this.deltaLineIdxInOld?toLength(offsetObj.lineCount-this.deltaOldToNewLineCount,offsetObj.columnCount-this.deltaOldToNewColumnCount):toLength(offsetObj.lineCount-this.deltaOldToNewLineCount,offsetObj.columnCount)}adjustNextEdit(offset){for(;this.nextEditIdx<this.edits.length;){const nextEdit=this.edits[this.nextEditIdx],nextEditEndOffsetInCur=this.translateOldToCur(nextEdit.endOffsetAfterObj);if(!lengthLessThanEqual(nextEditEndOffsetInCur,offset))break;{this.nextEditIdx++;const nextEditEndOffsetInCurObj=lengthToObj(nextEditEndOffsetInCur),nextEditEndOffsetBeforeInCurObj=lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj)),lineDelta=nextEditEndOffsetInCurObj.lineCount-nextEditEndOffsetBeforeInCurObj.lineCount;this.deltaOldToNewLineCount+=lineDelta;const previousColumnDelta=this.deltaLineIdxInOld===nextEdit.endOffsetBeforeObj.lineCount?this.deltaOldToNewColumnCount:0,columnDelta=nextEditEndOffsetInCurObj.columnCount-nextEditEndOffsetBeforeInCurObj.columnCount;this.deltaOldToNewColumnCount=previousColumnDelta+columnDelta,this.deltaLineIdxInOld=nextEdit.endOffsetBeforeObj.lineCount}}}}class TextEditInfoCache{constructor(startOffset,endOffset,textLength){this.endOffsetBeforeObj=lengthToObj(endOffset),this.endOffsetAfterObj=lengthToObj(lengthAdd(startOffset,textLength)),this.offsetObj=lengthToObj(startOffset)}static from(edit){return new TextEditInfoCache(edit.startOffset,edit.endOffset,edit.newLength)}}