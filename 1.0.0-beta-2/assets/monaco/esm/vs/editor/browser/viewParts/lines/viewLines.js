import"./viewLines.css";import*as platform from"../../../../base/common/platform.js";import{RunOnceScheduler}from"../../../../base/common/async.js";import{applyFontInfo}from"../../config/domFontInfo.js";import{VisibleLinesCollection}from"../../view/viewLayer.js";import{PartFingerprints,ViewPart}from"../../view/viewPart.js";import{DomReadingContext,ViewLine,ViewLineOptions}from"./viewLine.js";import{Position}from"../../../common/core/position.js";import{Range}from"../../../common/core/range.js";import{LineVisibleRanges,HorizontalPosition,HorizontalRange}from"../../view/renderingContext.js";import{MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}from"../../../../base/browser/ui/mouseCursor/mouseCursor.js";class LastRenderedData{constructor(){this._currentVisibleRange=new Range(1,1,1,1)}getCurrentVisibleRange(){return this._currentVisibleRange}setCurrentVisibleRange(currentVisibleRange){this._currentVisibleRange=currentVisibleRange}}class HorizontalRevealRangeRequest{constructor(minimalReveal,lineNumber,startColumn,endColumn,startScrollTop,stopScrollTop,scrollType){this.minimalReveal=minimalReveal,this.lineNumber=lineNumber,this.startColumn=startColumn,this.endColumn=endColumn,this.startScrollTop=startScrollTop,this.stopScrollTop=stopScrollTop,this.scrollType=scrollType,this.type="range",this.minLineNumber=lineNumber,this.maxLineNumber=lineNumber}}class HorizontalRevealSelectionsRequest{constructor(minimalReveal,selections,startScrollTop,stopScrollTop,scrollType){this.minimalReveal=minimalReveal,this.selections=selections,this.startScrollTop=startScrollTop,this.stopScrollTop=stopScrollTop,this.scrollType=scrollType,this.type="selections";let minLineNumber=selections[0].startLineNumber,maxLineNumber=selections[0].endLineNumber;for(let i=1,len=selections.length;i<len;i++){const selection=selections[i];minLineNumber=Math.min(minLineNumber,selection.startLineNumber),maxLineNumber=Math.max(maxLineNumber,selection.endLineNumber)}this.minLineNumber=minLineNumber,this.maxLineNumber=maxLineNumber}}export class ViewLines extends ViewPart{constructor(context,linesContent){super(context),this._linesContent=linesContent,this._textRangeRestingSpot=document.createElement("div"),this._visibleLines=new VisibleLinesCollection(this),this.domNode=this._visibleLines.domNode;const conf=this._context.configuration,options=this._context.configuration.options,fontInfo=options.get(46),wrappingInfo=options.get(134),layoutInfo=options.get(133);this._lineHeight=options.get(61),this._typicalHalfwidthCharacterWidth=fontInfo.typicalHalfwidthCharacterWidth,this._isViewportWrapping=wrappingInfo.isViewportWrapping,this._revealHorizontalRightPadding=options.get(91),this._horizontalScrollbarHeight=layoutInfo.horizontalScrollbarHeight,this._cursorSurroundingLines=options.get(25),this._cursorSurroundingLinesStyle=options.get(26),this._canUseLayerHinting=!options.get(28),this._viewLineOptions=new ViewLineOptions(conf,this._context.theme.type),PartFingerprints.write(this.domNode,7),this.domNode.setClassName(`view-lines ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`),applyFontInfo(this.domNode,fontInfo),this._maxLineWidth=0,this._asyncUpdateLineWidths=new RunOnceScheduler((()=>{this._updateLineWidthsSlow()}),200),this._asyncCheckMonospaceFontAssumptions=new RunOnceScheduler((()=>{this._checkMonospaceFontAssumptions()}),2e3),this._lastRenderedData=new LastRenderedData,this._horizontalRevealRequest=null}dispose(){this._asyncUpdateLineWidths.dispose(),this._asyncCheckMonospaceFontAssumptions.dispose(),super.dispose()}getDomNode(){return this.domNode}createVisibleLine(){return new ViewLine(this._viewLineOptions)}onConfigurationChanged(e){this._visibleLines.onConfigurationChanged(e),e.hasChanged(134)&&(this._maxLineWidth=0);const options=this._context.configuration.options,fontInfo=options.get(46),wrappingInfo=options.get(134),layoutInfo=options.get(133);return this._lineHeight=options.get(61),this._typicalHalfwidthCharacterWidth=fontInfo.typicalHalfwidthCharacterWidth,this._isViewportWrapping=wrappingInfo.isViewportWrapping,this._revealHorizontalRightPadding=options.get(91),this._horizontalScrollbarHeight=layoutInfo.horizontalScrollbarHeight,this._cursorSurroundingLines=options.get(25),this._cursorSurroundingLinesStyle=options.get(26),this._canUseLayerHinting=!options.get(28),applyFontInfo(this.domNode,fontInfo),this._onOptionsMaybeChanged(),e.hasChanged(133)&&(this._maxLineWidth=0),!0}_onOptionsMaybeChanged(){const conf=this._context.configuration,newViewLineOptions=new ViewLineOptions(conf,this._context.theme.type);if(!this._viewLineOptions.equals(newViewLineOptions)){this._viewLineOptions=newViewLineOptions;const startLineNumber=this._visibleLines.getStartLineNumber(),endLineNumber=this._visibleLines.getEndLineNumber();for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){this._visibleLines.getVisibleLine(lineNumber).onOptionsChanged(this._viewLineOptions)}return!0}return!1}onCursorStateChanged(e){const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();let r=!1;for(let lineNumber=rendStartLineNumber;lineNumber<=rendEndLineNumber;lineNumber++)r=this._visibleLines.getVisibleLine(lineNumber).onSelectionChanged()||r;return r}onDecorationsChanged(e){{const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();for(let lineNumber=rendStartLineNumber;lineNumber<=rendEndLineNumber;lineNumber++)this._visibleLines.getVisibleLine(lineNumber).onDecorationsChanged()}return!0}onFlushed(e){const shouldRender=this._visibleLines.onFlushed(e);return this._maxLineWidth=0,shouldRender}onLinesChanged(e){return this._visibleLines.onLinesChanged(e)}onLinesDeleted(e){return this._visibleLines.onLinesDeleted(e)}onLinesInserted(e){return this._visibleLines.onLinesInserted(e)}onRevealRangeRequest(e){const desiredScrollTop=this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(),e.source,e.minimalReveal,e.range,e.selections,e.verticalType);if(-1===desiredScrollTop)return!1;let newScrollPosition=this._context.viewLayout.validateScrollPosition({scrollTop:desiredScrollTop});e.revealHorizontal?e.range&&e.range.startLineNumber!==e.range.endLineNumber?newScrollPosition={scrollTop:newScrollPosition.scrollTop,scrollLeft:0}:e.range?this._horizontalRevealRequest=new HorizontalRevealRangeRequest(e.minimalReveal,e.range.startLineNumber,e.range.startColumn,e.range.endColumn,this._context.viewLayout.getCurrentScrollTop(),newScrollPosition.scrollTop,e.scrollType):e.selections&&e.selections.length>0&&(this._horizontalRevealRequest=new HorizontalRevealSelectionsRequest(e.minimalReveal,e.selections,this._context.viewLayout.getCurrentScrollTop(),newScrollPosition.scrollTop,e.scrollType)):this._horizontalRevealRequest=null;const scrollType=Math.abs(this._context.viewLayout.getCurrentScrollTop()-newScrollPosition.scrollTop)<=this._lineHeight?1:e.scrollType;return this._context.viewModel.viewLayout.setScrollPosition(newScrollPosition,scrollType),!0}onScrollChanged(e){if(this._horizontalRevealRequest&&e.scrollLeftChanged&&(this._horizontalRevealRequest=null),this._horizontalRevealRequest&&e.scrollTopChanged){const min=Math.min(this._horizontalRevealRequest.startScrollTop,this._horizontalRevealRequest.stopScrollTop),max=Math.max(this._horizontalRevealRequest.startScrollTop,this._horizontalRevealRequest.stopScrollTop);(e.scrollTop<min||e.scrollTop>max)&&(this._horizontalRevealRequest=null)}return this.domNode.setWidth(e.scrollWidth),this._visibleLines.onScrollChanged(e)||!0}onTokensChanged(e){return this._visibleLines.onTokensChanged(e)}onZonesChanged(e){return this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth),this._visibleLines.onZonesChanged(e)}onThemeChanged(e){return this._onOptionsMaybeChanged()}getPositionFromDOMInfo(spanNode,offset){const viewLineDomNode=this._getViewLineDomNode(spanNode);if(null===viewLineDomNode)return null;const lineNumber=this._getLineNumberFor(viewLineDomNode);if(-1===lineNumber)return null;if(lineNumber<1||lineNumber>this._context.viewModel.getLineCount())return null;if(1===this._context.viewModel.getLineMaxColumn(lineNumber))return new Position(lineNumber,1);const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();if(lineNumber<rendStartLineNumber||lineNumber>rendEndLineNumber)return null;let column=this._visibleLines.getVisibleLine(lineNumber).getColumnOfNodeOffset(lineNumber,spanNode,offset);const minColumn=this._context.viewModel.getLineMinColumn(lineNumber);return column<minColumn&&(column=minColumn),new Position(lineNumber,column)}_getViewLineDomNode(node){for(;node&&1===node.nodeType;){if(node.className===ViewLine.CLASS_NAME)return node;node=node.parentElement}return null}_getLineNumberFor(domNode){const startLineNumber=this._visibleLines.getStartLineNumber(),endLineNumber=this._visibleLines.getEndLineNumber();for(let lineNumber=startLineNumber;lineNumber<=endLineNumber;lineNumber++){if(domNode===this._visibleLines.getVisibleLine(lineNumber).getDomNode())return lineNumber}return-1}getLineWidth(lineNumber){const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();return lineNumber<rendStartLineNumber||lineNumber>rendEndLineNumber?-1:this._visibleLines.getVisibleLine(lineNumber).getWidth()}linesVisibleRangesForRange(_range,includeNewLines){if(this.shouldRender())return null;const originalEndLineNumber=_range.endLineNumber,range=Range.intersectRanges(_range,this._lastRenderedData.getCurrentVisibleRange());if(!range)return null;const visibleRanges=[];let visibleRangesLen=0;const domReadingContext=new DomReadingContext(this.domNode.domNode,this._textRangeRestingSpot);let nextLineModelLineNumber=0;includeNewLines&&(nextLineModelLineNumber=this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber,1)).lineNumber);const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();for(let lineNumber=range.startLineNumber;lineNumber<=range.endLineNumber;lineNumber++){if(lineNumber<rendStartLineNumber||lineNumber>rendEndLineNumber)continue;const startColumn=lineNumber===range.startLineNumber?range.startColumn:1,endColumn=lineNumber===range.endLineNumber?range.endColumn:this._context.viewModel.getLineMaxColumn(lineNumber),visibleRangesForLine=this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber,startColumn,endColumn,domReadingContext);if(visibleRangesForLine){if(includeNewLines&&lineNumber<originalEndLineNumber){const currentLineModelLineNumber=nextLineModelLineNumber;nextLineModelLineNumber=this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber+1,1)).lineNumber,currentLineModelLineNumber!==nextLineModelLineNumber&&(visibleRangesForLine.ranges[visibleRangesForLine.ranges.length-1].width+=this._typicalHalfwidthCharacterWidth)}visibleRanges[visibleRangesLen++]=new LineVisibleRanges(visibleRangesForLine.outsideRenderedLine,lineNumber,HorizontalRange.from(visibleRangesForLine.ranges))}}return 0===visibleRangesLen?null:visibleRanges}_visibleRangesForLineRange(lineNumber,startColumn,endColumn){return this.shouldRender()||lineNumber<this._visibleLines.getStartLineNumber()||lineNumber>this._visibleLines.getEndLineNumber()?null:this._visibleLines.getVisibleLine(lineNumber).getVisibleRangesForRange(lineNumber,startColumn,endColumn,new DomReadingContext(this.domNode.domNode,this._textRangeRestingSpot))}visibleRangeForPosition(position){const visibleRanges=this._visibleRangesForLineRange(position.lineNumber,position.column,position.column);return visibleRanges?new HorizontalPosition(visibleRanges.outsideRenderedLine,visibleRanges.ranges[0].left):null}updateLineWidths(){this._updateLineWidths(!1)}_updateLineWidthsFast(){return this._updateLineWidths(!0)}_updateLineWidthsSlow(){this._updateLineWidths(!1)}_updateLineWidths(fast){const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();let localMaxLineWidth=1,allWidthsComputed=!0;for(let lineNumber=rendStartLineNumber;lineNumber<=rendEndLineNumber;lineNumber++){const visibleLine=this._visibleLines.getVisibleLine(lineNumber);!fast||visibleLine.getWidthIsFast()?localMaxLineWidth=Math.max(localMaxLineWidth,visibleLine.getWidth()):allWidthsComputed=!1}return allWidthsComputed&&1===rendStartLineNumber&&rendEndLineNumber===this._context.viewModel.getLineCount()&&(this._maxLineWidth=0),this._ensureMaxLineWidth(localMaxLineWidth),allWidthsComputed}_checkMonospaceFontAssumptions(){let longestLineNumber=-1,longestWidth=-1;const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();for(let lineNumber=rendStartLineNumber;lineNumber<=rendEndLineNumber;lineNumber++){const visibleLine=this._visibleLines.getVisibleLine(lineNumber);if(visibleLine.needsMonospaceFontCheck()){const lineWidth=visibleLine.getWidth();lineWidth>longestWidth&&(longestWidth=lineWidth,longestLineNumber=lineNumber)}}if(-1!==longestLineNumber&&!this._visibleLines.getVisibleLine(longestLineNumber).monospaceAssumptionsAreValid())for(let lineNumber=rendStartLineNumber;lineNumber<=rendEndLineNumber;lineNumber++){this._visibleLines.getVisibleLine(lineNumber).onMonospaceAssumptionsInvalidated()}}prepareRender(){throw new Error("Not supported")}render(){throw new Error("Not supported")}renderText(viewportData){if(this._visibleLines.renderLines(viewportData),this._lastRenderedData.setCurrentVisibleRange(viewportData.visibleRange),this.domNode.setWidth(this._context.viewLayout.getScrollWidth()),this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(),1e6)),this._horizontalRevealRequest){const horizontalRevealRequest=this._horizontalRevealRequest;if(viewportData.startLineNumber<=horizontalRevealRequest.minLineNumber&&horizontalRevealRequest.maxLineNumber<=viewportData.endLineNumber){this._horizontalRevealRequest=null,this.onDidRender();const newScrollLeft=this._computeScrollLeftToReveal(horizontalRevealRequest);newScrollLeft&&(this._isViewportWrapping||this._ensureMaxLineWidth(newScrollLeft.maxHorizontalOffset),this._context.viewModel.viewLayout.setScrollPosition({scrollLeft:newScrollLeft.scrollLeft},horizontalRevealRequest.scrollType))}}if(this._updateLineWidthsFast()||this._asyncUpdateLineWidths.schedule(),platform.isLinux&&!this._asyncCheckMonospaceFontAssumptions.isScheduled()){const rendStartLineNumber=this._visibleLines.getStartLineNumber(),rendEndLineNumber=this._visibleLines.getEndLineNumber();for(let lineNumber=rendStartLineNumber;lineNumber<=rendEndLineNumber;lineNumber++){if(this._visibleLines.getVisibleLine(lineNumber).needsMonospaceFontCheck()){this._asyncCheckMonospaceFontAssumptions.schedule();break}}}this._linesContent.setLayerHinting(this._canUseLayerHinting),this._linesContent.setContain("strict");const adjustedScrollTop=this._context.viewLayout.getCurrentScrollTop()-viewportData.bigNumbersDelta;this._linesContent.setTop(-adjustedScrollTop),this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft())}_ensureMaxLineWidth(lineWidth){const iLineWidth=Math.ceil(lineWidth);this._maxLineWidth<iLineWidth&&(this._maxLineWidth=iLineWidth,this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth))}_computeScrollTopToRevealRange(viewport,source,minimalReveal,range,selections,verticalType){const viewportStartY=viewport.top,viewportHeight=viewport.height,viewportEndY=viewportStartY+viewportHeight;let boxIsSingleRange,boxStartY,boxEndY;if(selections&&selections.length>0){let minLineNumber=selections[0].startLineNumber,maxLineNumber=selections[0].endLineNumber;for(let i=1,len=selections.length;i<len;i++){const selection=selections[i];minLineNumber=Math.min(minLineNumber,selection.startLineNumber),maxLineNumber=Math.max(maxLineNumber,selection.endLineNumber)}boxIsSingleRange=!1,boxStartY=this._context.viewLayout.getVerticalOffsetForLineNumber(minLineNumber),boxEndY=this._context.viewLayout.getVerticalOffsetForLineNumber(maxLineNumber)+this._lineHeight}else{if(!range)return-1;boxIsSingleRange=!0,boxStartY=this._context.viewLayout.getVerticalOffsetForLineNumber(range.startLineNumber),boxEndY=this._context.viewLayout.getVerticalOffsetForLineNumber(range.endLineNumber)+this._lineHeight}if(("mouse"===source||minimalReveal)&&"default"===this._cursorSurroundingLinesStyle)minimalReveal||(boxStartY-=this._lineHeight);else{const context=Math.min(viewportHeight/this._lineHeight/2,this._cursorSurroundingLines);boxStartY-=context*this._lineHeight,boxEndY+=Math.max(0,context-1)*this._lineHeight}let newScrollTop;if(0!==verticalType&&4!==verticalType||(boxEndY+=minimalReveal?this._horizontalScrollbarHeight:this._lineHeight),boxEndY-boxStartY>viewportHeight){if(!boxIsSingleRange)return-1;newScrollTop=boxStartY}else if(5===verticalType||6===verticalType)if(6===verticalType&&viewportStartY<=boxStartY&&boxEndY<=viewportEndY)newScrollTop=viewportStartY;else{const desiredScrollTop=boxStartY-Math.max(5*this._lineHeight,.2*viewportHeight),minScrollTop=boxEndY-viewportHeight;newScrollTop=Math.max(minScrollTop,desiredScrollTop)}else if(1===verticalType||2===verticalType)if(2===verticalType&&viewportStartY<=boxStartY&&boxEndY<=viewportEndY)newScrollTop=viewportStartY;else{const boxMiddleY=(boxStartY+boxEndY)/2;newScrollTop=Math.max(0,boxMiddleY-viewportHeight/2)}else newScrollTop=this._computeMinimumScrolling(viewportStartY,viewportEndY,boxStartY,boxEndY,3===verticalType,4===verticalType);return newScrollTop}_computeScrollLeftToReveal(horizontalRevealRequest){const viewport=this._context.viewLayout.getCurrentViewport(),viewportStartX=viewport.left,viewportEndX=viewportStartX+viewport.width;let boxStartX=1073741824,boxEndX=0;if("range"===horizontalRevealRequest.type){const visibleRanges=this._visibleRangesForLineRange(horizontalRevealRequest.lineNumber,horizontalRevealRequest.startColumn,horizontalRevealRequest.endColumn);if(!visibleRanges)return null;for(const visibleRange of visibleRanges.ranges)boxStartX=Math.min(boxStartX,Math.round(visibleRange.left)),boxEndX=Math.max(boxEndX,Math.round(visibleRange.left+visibleRange.width))}else for(const selection of horizontalRevealRequest.selections){if(selection.startLineNumber!==selection.endLineNumber)return null;const visibleRanges=this._visibleRangesForLineRange(selection.startLineNumber,selection.startColumn,selection.endColumn);if(!visibleRanges)return null;for(const visibleRange of visibleRanges.ranges)boxStartX=Math.min(boxStartX,Math.round(visibleRange.left)),boxEndX=Math.max(boxEndX,Math.round(visibleRange.left+visibleRange.width))}if(horizontalRevealRequest.minimalReveal||(boxStartX=Math.max(0,boxStartX-ViewLines.HORIZONTAL_EXTRA_PX),boxEndX+=this._revealHorizontalRightPadding),"selections"===horizontalRevealRequest.type&&boxEndX-boxStartX>viewport.width)return null;return{scrollLeft:this._computeMinimumScrolling(viewportStartX,viewportEndX,boxStartX,boxEndX),maxHorizontalOffset:boxEndX}}_computeMinimumScrolling(viewportStart,viewportEnd,boxStart,boxEnd,revealAtStart,revealAtEnd){revealAtStart=!!revealAtStart,revealAtEnd=!!revealAtEnd;const viewportLength=(viewportEnd|=0)-(viewportStart|=0);return(boxEnd|=0)-(boxStart|=0)<viewportLength?revealAtStart?boxStart:revealAtEnd?Math.max(0,boxEnd-viewportLength):boxStart<viewportStart?boxStart:boxEnd>viewportEnd?Math.max(0,boxEnd-viewportLength):viewportStart:boxStart}}ViewLines.HORIZONTAL_EXTRA_PX=30;