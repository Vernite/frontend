import{EditorCommand,registerEditorCommand}from"../../../browser/editorExtensions.js";import{IContextKeyService,RawContextKey}from"../../../../platform/contextkey/common/contextkey.js";import{CancellationTokenSource}from"../../../../base/common/cancellation.js";import{LinkedList}from"../../../../base/common/linkedList.js";import{createDecorator}from"../../../../platform/instantiation/common/instantiation.js";import{registerSingleton}from"../../../../platform/instantiation/common/extensions.js";import{localize}from"../../../../nls.js";const IEditorCancellationTokens=createDecorator("IEditorCancelService"),ctxCancellableOperation=new RawContextKey("cancellableOperation",!1,localize("cancellableOperation","Whether the editor runs a cancellable operation, e.g. like 'Peek References'"));registerSingleton(IEditorCancellationTokens,class{constructor(){this._tokens=new WeakMap}add(editor,cts){let removeFn,data=this._tokens.get(editor);return data||(data=editor.invokeWithinContext((accessor=>({key:ctxCancellableOperation.bindTo(accessor.get(IContextKeyService)),tokens:new LinkedList}))),this._tokens.set(editor,data)),data.key.set(!0),removeFn=data.tokens.push(cts),()=>{removeFn&&(removeFn(),data.key.set(!data.tokens.isEmpty()),removeFn=void 0)}}cancel(editor){const data=this._tokens.get(editor);if(!data)return;const cts=data.tokens.pop();cts&&(cts.cancel(),data.key.set(!data.tokens.isEmpty()))}},!0);export class EditorKeybindingCancellationTokenSource extends CancellationTokenSource{constructor(editor,parent){super(parent),this.editor=editor,this._unregister=editor.invokeWithinContext((accessor=>accessor.get(IEditorCancellationTokens).add(editor,this)))}dispose(){this._unregister(),super.dispose()}}registerEditorCommand(new class extends EditorCommand{constructor(){super({id:"editor.cancelOperation",kbOpts:{weight:100,primary:9},precondition:ctxCancellableOperation})}runEditorCommand(accessor,editor){accessor.get(IEditorCancellationTokens).cancel(editor)}});