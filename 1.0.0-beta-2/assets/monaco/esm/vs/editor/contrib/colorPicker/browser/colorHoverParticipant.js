var __decorate=this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},__param=this&&this.__param||function(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}},__awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};import{AsyncIterableObject}from"../../../../base/common/async.js";import{CancellationToken}from"../../../../base/common/cancellation.js";import{Color,RGBA}from"../../../../base/common/color.js";import{Disposable,DisposableStore}from"../../../../base/common/lifecycle.js";import{Range}from"../../../common/core/range.js";import{getColorPresentations}from"./color.js";import{ColorDetector}from"./colorDetector.js";import{ColorPickerModel}from"./colorPickerModel.js";import{ColorPickerWidget}from"./colorPickerWidget.js";import{IThemeService}from"../../../../platform/theme/common/themeService.js";export class ColorHover{constructor(owner,range,model,provider){this.owner=owner,this.range=range,this.model=model,this.provider=provider,this.forceShowAtRange=!0}isValidForHoverAnchor(anchor){return 1===anchor.type&&this.range.startColumn<=anchor.range.startColumn&&this.range.endColumn>=anchor.range.endColumn}}let ColorHoverParticipant=class ColorHoverParticipant{constructor(_editor,_themeService){this._editor=_editor,this._themeService=_themeService,this.hoverOrdinal=1}computeSync(anchor,lineDecorations){return[]}computeAsync(anchor,lineDecorations,token){return AsyncIterableObject.fromPromise(this._computeAsync(anchor,lineDecorations,token))}_computeAsync(anchor,lineDecorations,token){return __awaiter(this,void 0,void 0,(function*(){if(!this._editor.hasModel())return[];const colorDetector=ColorDetector.get(this._editor);if(!colorDetector)return[];for(const d of lineDecorations){if(!colorDetector.isColorDecoration(d))continue;const colorData=colorDetector.getColorData(d.range.getStartPosition());if(colorData){return[yield this._createColorHover(this._editor.getModel(),colorData.colorInfo,colorData.provider)]}}return[]}))}_createColorHover(editorModel,colorInfo,provider){return __awaiter(this,void 0,void 0,(function*(){const originalText=editorModel.getValueInRange(colorInfo.range),{red,green,blue,alpha}=colorInfo.color,rgba=new RGBA(Math.round(255*red),Math.round(255*green),Math.round(255*blue),alpha),color=new Color(rgba),colorPresentations=yield getColorPresentations(editorModel,colorInfo,provider,CancellationToken.None),model=new ColorPickerModel(color,[],0);return model.colorPresentations=colorPresentations||[],model.guessColorPresentation(color,originalText),new ColorHover(this,Range.lift(colorInfo.range),model,provider)}))}renderHoverParts(context,hoverParts){if(0===hoverParts.length||!this._editor.hasModel())return Disposable.None;const disposables=new DisposableStore,colorHover=hoverParts[0],editorModel=this._editor.getModel(),model=colorHover.model,widget=disposables.add(new ColorPickerWidget(context.fragment,model,this._editor.getOption(131),this._themeService));context.setColorPicker(widget);let range=new Range(colorHover.range.startLineNumber,colorHover.range.startColumn,colorHover.range.endLineNumber,colorHover.range.endColumn);const updateEditorModel=()=>{let textEdits,newRange;if(model.presentation.textEdit){textEdits=[model.presentation.textEdit],newRange=new Range(model.presentation.textEdit.range.startLineNumber,model.presentation.textEdit.range.startColumn,model.presentation.textEdit.range.endLineNumber,model.presentation.textEdit.range.endColumn);const trackedRange=this._editor.getModel()._setTrackedRange(null,newRange,3);this._editor.pushUndoStop(),this._editor.executeEdits("colorpicker",textEdits),newRange=this._editor.getModel()._getTrackedRange(trackedRange)||newRange}else textEdits=[{range,text:model.presentation.label,forceMoveMarkers:!1}],newRange=range.setEndPosition(range.endLineNumber,range.startColumn+model.presentation.label.length),this._editor.pushUndoStop(),this._editor.executeEdits("colorpicker",textEdits);model.presentation.additionalTextEdits&&(textEdits=[...model.presentation.additionalTextEdits],this._editor.executeEdits("colorpicker",textEdits),context.hide()),this._editor.pushUndoStop(),range=newRange},updateColorPresentations=color=>getColorPresentations(editorModel,{range,color:{red:color.rgba.r/255,green:color.rgba.g/255,blue:color.rgba.b/255,alpha:color.rgba.a}},colorHover.provider,CancellationToken.None).then((colorPresentations=>{model.colorPresentations=colorPresentations||[]}));return disposables.add(model.onColorFlushed((color=>{updateColorPresentations(color).then(updateEditorModel)}))),disposables.add(model.onDidChangeColor(updateColorPresentations)),disposables}};ColorHoverParticipant=__decorate([__param(1,IThemeService)],ColorHoverParticipant);export{ColorHoverParticipant};